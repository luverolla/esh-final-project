
prj-work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c798  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d94  0800c938  0800c938  0001c938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6cc  0800d6cc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6cc  0800d6cc  0001d6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6d4  0800d6d4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6d4  0800d6d4  0001d6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6d8  0800d6d8  0001d6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  200001f4  0800d8d0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  0800d8d0  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a94c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003869  00000000  00000000  0003ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0003f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae43  00000000  00000000  00040e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b76f  00000000  00000000  0005bcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd8f  00000000  00000000  00077442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001171d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ec4  00000000  00000000  00117224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c920 	.word	0x0800c920

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800c920 	.word	0x0800c920

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <MX_ADC1_Init+0xa0>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <MX_ADC1_Init+0x9c>)
 8001000:	f002 fd6a 	bl	8003ad8 <HAL_ADC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800100a:	f001 fb1d 	bl	8002648 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <MX_ADC1_Init+0x9c>)
 8001020:	f002 ffbc 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800102a:	f001 fb0d 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000210 	.word	0x20000210
 800103c:	40012000 	.word	0x40012000

08001040 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a33      	ldr	r2, [pc, #204]	; (800112c <HAL_ADC_MspInit+0xec>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d15f      	bne.n	8001122 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_ADC_MspInit+0xf0>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a31      	ldr	r2, [pc, #196]	; (8001130 <HAL_ADC_MspInit+0xf0>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_ADC_MspInit+0xf0>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_ADC_MspInit+0xf0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <HAL_ADC_MspInit+0xf0>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_ADC_MspInit+0xf0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4821      	ldr	r0, [pc, #132]	; (8001134 <HAL_ADC_MspInit+0xf4>)
 80010ae:	f003 ff33 	bl	8004f18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <HAL_ADC_MspInit+0xfc>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010f6:	4810      	ldr	r0, [pc, #64]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 80010f8:	f003 fb0c 	bl	8004714 <HAL_DMA_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001102:	f001 faa1 	bl	8002648 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_ADC_MspInit+0xf8>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2012      	movs	r0, #18
 8001118:	f003 fac5 	bl	80046a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800111c:	2012      	movs	r0, #18
 800111e:	f003 fade 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40012000 	.word	0x40012000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	20000258 	.word	0x20000258
 800113c:	40026410 	.word	0x40026410

08001140 <__B3950_RAW2VLT>:
#include <stdlib.h>

#include "b3950.h"

float __B3950_RAW2VLT(uint32_t raw)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	return (float)raw * B3950_VCC / B3950_ADC_LVLS;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001152:	ee17 0a90 	vmov	r0, s15
 8001156:	f7ff f9ff 	bl	8000558 <__aeabi_f2d>
 800115a:	a310      	add	r3, pc, #64	; (adr r3, 800119c <__B3950_RAW2VLT+0x5c>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa52 	bl	8000608 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <__B3950_RAW2VLT+0x58>)
 8001172:	f7ff fb73 	bl	800085c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fd3b 	bl	8000bf8 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	ee07 3a90 	vmov	s15, r3
}
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	40b00000 	.word	0x40b00000
 800119c:	66666666 	.word	0x66666666
 80011a0:	400a6666 	.word	0x400a6666
 80011a4:	00000000 	.word	0x00000000

080011a8 <__B3950_VLT2RES>:

float __B3950_VLT2RES(float v)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	ed87 0a01 	vstr	s0, [r7, #4]
	return (v * B3950_RSER) / (B3950_VCC - v);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff f9d0 	bl	8000558 <__aeabi_f2d>
 80011b8:	a313      	add	r3, pc, #76	; (adr r3, 8001208 <__B3950_VLT2RES+0x60>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa23 	bl	8000608 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4614      	mov	r4, r2
 80011c8:	461d      	mov	r5, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f9c4 	bl	8000558 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	a10e      	add	r1, pc, #56	; (adr r1, 8001210 <__B3950_VLT2RES+0x68>)
 80011d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011da:	f7ff f85d 	bl	8000298 <__aeabi_dsub>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4620      	mov	r0, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	f7ff fb39 	bl	800085c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fd01 	bl	8000bf8 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	ee07 3a90 	vmov	s15, r3
}
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bdb0      	pop	{r4, r5, r7, pc}
 8001206:	bf00      	nop
 8001208:	00000000 	.word	0x00000000
 800120c:	40c38800 	.word	0x40c38800
 8001210:	66666666 	.word	0x66666666
 8001214:	400a6666 	.word	0x400a6666

08001218 <__B3950_RES2TMP>:

float __B3950_RES2TMP(float res)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 1 / ((1/B3950_TREF) + ((1/B3950_BVAL) * log(res/B3950_RREF))) - 273.15;
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f998 	bl	8000558 <__aeabi_f2d>
 8001228:	a322      	add	r3, pc, #136	; (adr r3, 80012b4 <__B3950_RES2TMP+0x9c>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff fb15 	bl	800085c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ec43 2b17 	vmov	d7, r2, r3
 800123a:	eeb0 0a47 	vmov.f32	s0, s14
 800123e:	eef0 0a67 	vmov.f32	s1, s15
 8001242:	f00b f969 	bl	800c518 <log>
 8001246:	ec51 0b10 	vmov	r0, r1, d0
 800124a:	a31c      	add	r3, pc, #112	; (adr r3, 80012bc <__B3950_RES2TMP+0xa4>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f9da 	bl	8000608 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	a319      	add	r3, pc, #100	; (adr r3, 80012c4 <__B3950_RES2TMP+0xac>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f81b 	bl	800029c <__adddf3>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	4910      	ldr	r1, [pc, #64]	; (80012b0 <__B3950_RES2TMP+0x98>)
 8001270:	f7ff faf4 	bl	800085c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a30a      	add	r3, pc, #40	; (adr r3, 80012a8 <__B3950_RES2TMP+0x90>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f809 	bl	8000298 <__aeabi_dsub>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fcb3 	bl	8000bf8 <__aeabi_d2f>
 8001292:	4603      	mov	r3, r0
 8001294:	ee07 3a90 	vmov	s15, r3
}
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	66666666 	.word	0x66666666
 80012ac:	40711266 	.word	0x40711266
 80012b0:	3ff00000 	.word	0x3ff00000
 80012b4:	00000000 	.word	0x00000000
 80012b8:	40f86a00 	.word	0x40f86a00
 80012bc:	7e1ed981 	.word	0x7e1ed981
 80012c0:	3f309765 	.word	0x3f309765
 80012c4:	dcb5db83 	.word	0xdcb5db83
 80012c8:	3f6b79e1 	.word	0x3f6b79e1

080012cc <B3950_Init>:

B3950_Handle* B3950_Init(uint32_t* buffer)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	B3950_Handle* hd = (B3950_Handle*)malloc(sizeof(B3950_Handle));
 80012d4:	200c      	movs	r0, #12
 80012d6:	f008 fa2b 	bl	8009730 <malloc>
 80012da:	4603      	mov	r3, r0
 80012dc:	60fb      	str	r3, [r7, #12]
	hd->buffer = buffer;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]

	return hd;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <B3950_Read>:
{
	free(hd);
}

float B3950_Read(B3950_Handle* hd)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	uint32_t value = *hd->buffer;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
	hd->volts = __B3950_RAW2VLT(value);
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff ff1e 	bl	8001140 <__B3950_RAW2VLT>
 8001304:	eef0 7a40 	vmov.f32	s15, s0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	edc3 7a01 	vstr	s15, [r3, #4]
	hd->resist = __B3950_VLT2RES(hd->volts);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edd3 7a01 	vldr	s15, [r3, #4]
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	f7ff ff46 	bl	80011a8 <__B3950_VLT2RES>
 800131c:	eef0 7a40 	vmov.f32	s15, s0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	edc3 7a02 	vstr	s15, [r3, #8]
	return __B3950_RES2TMP(hd->resist);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edd3 7a02 	vldr	s15, [r3, #8]
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f7ff ff72 	bl	8001218 <__B3950_RES2TMP>
 8001334:	eef0 7a40 	vmov.f32	s15, s0
}
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_DMA_Init+0x3c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <MX_DMA_Init+0x3c>)
 8001354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_DMA_Init+0x3c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2038      	movs	r0, #56	; 0x38
 800136c:	f003 f99b 	bl	80046a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001370:	2038      	movs	r0, #56	; 0x38
 8001372:	f003 f9b4 	bl	80046de <HAL_NVIC_EnableIRQ>

}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <bcd2Dec>:
* @brief       Convert BCD to Decimal
* @param[in]   val value to convert from BCD to Decimal
* @return      res Converted value
*/
uint8_t bcd2Dec ( uint8_t val )
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = ((val/16*10) + (val % 16));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4413      	add	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	73fb      	strb	r3, [r7, #15]
    return res;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <dec2Bcd>:
* @brief        Convert Decimal to BCD
* @param[in]    val value to convert from Decimal to BCD
* @return       res Converted value
*/
uint8_t dec2Bcd ( uint8_t val )
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    uint8_t res = ((val/10*16) + (val%10));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <dec2Bcd+0x44>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	b2d8      	uxtb	r0, r3
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <dec2Bcd+0x44>)
 80013d6:	fba3 1302 	umull	r1, r3, r3, r2
 80013da:	08d9      	lsrs	r1, r3, #3
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4403      	add	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
    return res;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	cccccccd 	.word	0xcccccccd

08001400 <ds1307rtc_get_date_time>:




int8_t ds1307rtc_get_date_time(date_time_t* datetime)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af04      	add	r7, sp, #16
 8001406:	6078      	str	r0, [r7, #4]
	//Mem_Read is equivalent for performing Transmit of the MemAddress and Receive



														 //DS1307_SECONDS is the first register to be read
	returnValue = HAL_I2C_Mem_Read(HI2C, DS1307_ADDRESS, DS1307_SECONDS, ADDRESS_SIZE, in_buff, DATA_TRANSFER_SIZE, HAL_MAX_DELAY);
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2307      	movs	r3, #7
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	2200      	movs	r2, #0
 800141c:	21d0      	movs	r1, #208	; 0xd0
 800141e:	4835      	ldr	r0, [pc, #212]	; (80014f4 <ds1307rtc_get_date_time+0xf4>)
 8001420:	f004 fc92 	bl	8005d48 <HAL_I2C_Mem_Read>
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]
	if(returnValue != HAL_OK)
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <ds1307rtc_get_date_time+0x34>
	{
		return DS1307_IC2_ERR;
 800142e:	f06f 0301 	mvn.w	r3, #1
 8001432:	e05b      	b.n	80014ec <ds1307rtc_get_date_time+0xec>



	//USING Master Receive and Transmit functions
																  //DS1307_SECONDS is the first register to be read
	returnValue = HAL_I2C_Master_Transmit(HI2C, DS1307_ADDRESS, DS1307_SECONDS, ADDRESS_SIZE, HAL_MAX_DELAY);
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	2200      	movs	r2, #0
 800143e:	21d0      	movs	r1, #208	; 0xd0
 8001440:	482c      	ldr	r0, [pc, #176]	; (80014f4 <ds1307rtc_get_date_time+0xf4>)
 8001442:	f004 f863 	bl	800550c <HAL_I2C_Master_Transmit>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]
	if(returnValue != HAL_OK)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <ds1307rtc_get_date_time+0x56>
	{
		return DS1307_IC2_ERR;
 8001450:	f06f 0301 	mvn.w	r3, #1
 8001454:	e04a      	b.n	80014ec <ds1307rtc_get_date_time+0xec>
	}

	returnValue = HAL_I2C_Master_Receive(HI2C, DS1307_ADDRESS, in_buff, DATA_TRANSFER_SIZE, HAL_MAX_DELAY);
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2307      	movs	r3, #7
 8001462:	21d0      	movs	r1, #208	; 0xd0
 8001464:	4823      	ldr	r0, [pc, #140]	; (80014f4 <ds1307rtc_get_date_time+0xf4>)
 8001466:	f004 f94f 	bl	8005708 <HAL_I2C_Master_Receive>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]
	if(returnValue != HAL_OK)
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <ds1307rtc_get_date_time+0x7a>
	{
		return DS1307_IC2_ERR;
 8001474:	f06f 0301 	mvn.w	r3, #1
 8001478:	e038      	b.n	80014ec <ds1307rtc_get_date_time+0xec>
	}

	datetime->seconds = bcd2Dec(in_buff[0]);
 800147a:	7a3b      	ldrb	r3, [r7, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff81 	bl	8001384 <bcd2Dec>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	701a      	strb	r2, [r3, #0]
	datetime->minutes = bcd2Dec(in_buff[1]);
 800148a:	7a7b      	ldrb	r3, [r7, #9]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff79 	bl	8001384 <bcd2Dec>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	705a      	strb	r2, [r3, #1]
	datetime->hours = bcd2Dec(in_buff[2]);
 800149a:	7abb      	ldrb	r3, [r7, #10]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff71 	bl	8001384 <bcd2Dec>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	709a      	strb	r2, [r3, #2]
	datetime->day = bcd2Dec(in_buff[3]);
 80014aa:	7afb      	ldrb	r3, [r7, #11]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff69 	bl	8001384 <bcd2Dec>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	70da      	strb	r2, [r3, #3]
	datetime->date = bcd2Dec(in_buff[4]);
 80014ba:	7b3b      	ldrb	r3, [r7, #12]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff61 	bl	8001384 <bcd2Dec>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	711a      	strb	r2, [r3, #4]
	datetime->month = bcd2Dec(in_buff[5]);
 80014ca:	7b7b      	ldrb	r3, [r7, #13]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff59 	bl	8001384 <bcd2Dec>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	715a      	strb	r2, [r3, #5]
	datetime->year = bcd2Dec(in_buff[6]);
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff51 	bl	8001384 <bcd2Dec>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	80da      	strh	r2, [r3, #6]

	return DS1307_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000030c 	.word	0x2000030c

080014f8 <ds1307rtc_set_date_time>:




int8_t ds1307rtc_set_date_time(const date_time_t* datetime)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef returnValue;
	uint8_t out_buff[DATA_TRANSFER_SIZE+ADDRESS_SIZE];

	//Putting the address
	out_buff[0] = DS1307_SECONDS;
 8001500:	2300      	movs	r3, #0
 8001502:	733b      	strb	r3, [r7, #12]
	//Filling the data
	out_buff[1] = dec2Bcd(datetime->seconds);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff55 	bl	80013b8 <dec2Bcd>
 800150e:	4603      	mov	r3, r0
 8001510:	737b      	strb	r3, [r7, #13]
	out_buff[2] = dec2Bcd(datetime->minutes);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff4e 	bl	80013b8 <dec2Bcd>
 800151c:	4603      	mov	r3, r0
 800151e:	73bb      	strb	r3, [r7, #14]
	out_buff[3] = dec2Bcd(datetime->hours);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	789b      	ldrb	r3, [r3, #2]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff47 	bl	80013b8 <dec2Bcd>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
	out_buff[4] = dec2Bcd(datetime->day);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	78db      	ldrb	r3, [r3, #3]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff40 	bl	80013b8 <dec2Bcd>
 8001538:	4603      	mov	r3, r0
 800153a:	743b      	strb	r3, [r7, #16]
	out_buff[5] = dec2Bcd(datetime->date);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff39 	bl	80013b8 <dec2Bcd>
 8001546:	4603      	mov	r3, r0
 8001548:	747b      	strb	r3, [r7, #17]
	out_buff[6] = dec2Bcd(datetime->month);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	795b      	ldrb	r3, [r3, #5]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff32 	bl	80013b8 <dec2Bcd>
 8001554:	4603      	mov	r3, r0
 8001556:	74bb      	strb	r3, [r7, #18]
	out_buff[7] = dec2Bcd(datetime->year);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	88db      	ldrh	r3, [r3, #6]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff2a 	bl	80013b8 <dec2Bcd>
 8001564:	4603      	mov	r3, r0
 8001566:	74fb      	strb	r3, [r7, #19]


	returnValue = HAL_I2C_Mem_Write(HI2C, DS1307_ADDRESS,  DS1307_SECONDS, ADDRESS_SIZE, out_buff+1, DATA_TRANSFER_SIZE, HAL_MAX_DELAY);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	3301      	adds	r3, #1
 800156e:	f04f 32ff 	mov.w	r2, #4294967295
 8001572:	9202      	str	r2, [sp, #8]
 8001574:	2207      	movs	r2, #7
 8001576:	9201      	str	r2, [sp, #4]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	2200      	movs	r2, #0
 800157e:	21d0      	movs	r1, #208	; 0xd0
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <ds1307rtc_set_date_time+0xa8>)
 8001582:	f004 fae7 	bl	8005b54 <HAL_I2C_Mem_Write>
 8001586:	4603      	mov	r3, r0
 8001588:	75fb      	strb	r3, [r7, #23]
	if(returnValue != HAL_OK)
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <ds1307rtc_set_date_time+0x9e>
	{
		return DS1307_IC2_ERR;
 8001590:	f06f 0301 	mvn.w	r3, #1
 8001594:	e000      	b.n	8001598 <ds1307rtc_set_date_time+0xa0>
	if(returnValue != HAL_OK)
	{
		return DS1307_IC2_ERR;
	}*/

	return DS1307_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000030c 	.word	0x2000030c

080015a4 <ds1307rtc_init>:




int8_t ds1307rtc_init()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_IsDeviceReady(HI2C, DS1307_ADDRESS, MAX_RETRY, HAL_MAX_DELAY);
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	2203      	movs	r2, #3
 80015b0:	21d0      	movs	r1, #208	; 0xd0
 80015b2:	4808      	ldr	r0, [pc, #32]	; (80015d4 <ds1307rtc_init+0x30>)
 80015b4:	f004 fdee 	bl	8006194 <HAL_I2C_IsDeviceReady>
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
	if(returnValue != HAL_OK)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <ds1307rtc_init+0x24>
	{
		return DS1307_ERR;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e000      	b.n	80015ca <ds1307rtc_init+0x26>
	}
	return DS1307_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000030c 	.word	0x2000030c

080015d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <MX_GPIO_Init+0xc4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a29      	ldr	r2, [pc, #164]	; (800169c <MX_GPIO_Init+0xc4>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <MX_GPIO_Init+0xc4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <MX_GPIO_Init+0xc4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a22      	ldr	r2, [pc, #136]	; (800169c <MX_GPIO_Init+0xc4>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <MX_GPIO_Init+0xc4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_GPIO_Init+0xc4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <MX_GPIO_Init+0xc4>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_GPIO_Init+0xc4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|ERROR_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	21a0      	movs	r1, #160	; 0xa0
 8001646:	4816      	ldr	r0, [pc, #88]	; (80016a0 <MX_GPIO_Init+0xc8>)
 8001648:	f003 fdea 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800164c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001652:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	4810      	ldr	r0, [pc, #64]	; (80016a4 <MX_GPIO_Init+0xcc>)
 8001664:	f003 fc58 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|ERROR_Pin;
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4619      	mov	r1, r3
 800167e:	4808      	ldr	r0, [pc, #32]	; (80016a0 <MX_GPIO_Init+0xc8>)
 8001680:	f003 fc4a 	bl	8004f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2028      	movs	r0, #40	; 0x28
 800168a:	f003 f80c 	bl	80046a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800168e:	2028      	movs	r0, #40	; 0x28
 8001690:	f003 f825 	bl	80046de <HAL_NVIC_EnableIRQ>

}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020800 	.word	0x40020800

080016a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <MX_I2C1_Init+0x54>)
 80016b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <MX_I2C1_Init+0x58>)
 80016b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016e6:	f003 fdcd 	bl	8005284 <HAL_I2C_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f0:	f000 ffaa 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200002b8 	.word	0x200002b8
 80016fc:	40005400 	.word	0x40005400
 8001700:	000186a0 	.word	0x000186a0

08001704 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_I2C2_Init+0x50>)
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_I2C2_Init+0x54>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_I2C2_Init+0x50>)
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_I2C2_Init+0x58>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_I2C2_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_I2C2_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_I2C2_Init+0x50>)
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_I2C2_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_I2C2_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_I2C2_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_I2C2_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_I2C2_Init+0x50>)
 8001742:	f003 fd9f 	bl	8005284 <HAL_I2C_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800174c:	f000 ff7c 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000030c 	.word	0x2000030c
 8001758:	40005800 	.word	0x40005800
 800175c:	000186a0 	.word	0x000186a0

08001760 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_I2C3_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C3_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_I2C3_Init+0x58>)
 800176e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_I2C3_Init+0x50>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_I2C3_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_I2C3_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_I2C3_Init+0x50>)
 800179e:	f003 fd71 	bl	8005284 <HAL_I2C_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f000 ff4e 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000360 	.word	0x20000360
 80017b4:	40005c00 	.word	0x40005c00
 80017b8:	000186a0 	.word	0x000186a0

080017bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a63      	ldr	r2, [pc, #396]	; (8001968 <HAL_I2C_MspInit+0x1ac>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12c      	bne.n	8001838 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	4b62      	ldr	r3, [pc, #392]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a61      	ldr	r2, [pc, #388]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b5f      	ldr	r3, [pc, #380]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
 80017f8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fa:	23c0      	movs	r3, #192	; 0xc0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fe:	2312      	movs	r3, #18
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180a:	2304      	movs	r3, #4
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4856      	ldr	r0, [pc, #344]	; (8001970 <HAL_I2C_MspInit+0x1b4>)
 8001816:	f003 fb7f 	bl	8004f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 8001824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001836:	e093      	b.n	8001960 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a4d      	ldr	r2, [pc, #308]	; (8001974 <HAL_I2C_MspInit+0x1b8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d13d      	bne.n	80018be <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a48      	ldr	r2, [pc, #288]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001864:	2312      	movs	r3, #18
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001870:	2304      	movs	r3, #4
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	483d      	ldr	r0, [pc, #244]	; (8001970 <HAL_I2C_MspInit+0x1b4>)
 800187c:	f003 fb4c 	bl	8004f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001880:	2308      	movs	r3, #8
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001884:	2312      	movs	r3, #18
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001890:	2309      	movs	r3, #9
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4835      	ldr	r0, [pc, #212]	; (8001970 <HAL_I2C_MspInit+0x1b4>)
 800189c:	f003 fb3c 	bl	8004f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a30      	ldr	r2, [pc, #192]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697b      	ldr	r3, [r7, #20]
}
 80018bc:	e050      	b.n	8001960 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <HAL_I2C_MspInit+0x1bc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d14b      	bne.n	8001960 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	4a1f      	ldr	r2, [pc, #124]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6313      	str	r3, [r2, #48]	; 0x30
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001906:	2312      	movs	r3, #18
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001912:	2304      	movs	r3, #4
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	4817      	ldr	r0, [pc, #92]	; (800197c <HAL_I2C_MspInit+0x1c0>)
 800191e:	f003 fafb 	bl	8004f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001934:	2304      	movs	r3, #4
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <HAL_I2C_MspInit+0x1c4>)
 8001940:	f003 faea 	bl	8004f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 800194e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_I2C_MspInit+0x1b0>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
}
 8001960:	bf00      	nop
 8001962:	3738      	adds	r7, #56	; 0x38
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40005400 	.word	0x40005400
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400
 8001974:	40005800 	.word	0x40005800
 8001978:	40005c00 	.word	0x40005c00
 800197c:	40020800 	.word	0x40020800
 8001980:	40020000 	.word	0x40020000

08001984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	b0cb      	sub	sp, #300	; 0x12c
 8001988:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198a:	f002 f80f 	bl	80039ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198e:	f000 fa5b 	bl	8001e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001992:	f7ff fe21 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001996:	f7ff fcd5 	bl	8001344 <MX_DMA_Init>
  MX_ADC1_Init();
 800199a:	f7ff faff 	bl	8000f9c <MX_ADC1_Init>
  MX_I2C1_Init();
 800199e:	f7ff fe83 	bl	80016a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80019a2:	f7ff feaf 	bl	8001704 <MX_I2C2_Init>
  MX_I2C3_Init();
 80019a6:	f7ff fedb 	bl	8001760 <MX_I2C3_Init>
  MX_TIM2_Init();
 80019aa:	f001 fdeb 	bl	8003584 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80019ae:	f001 ff59 	bl	8003864 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80019b2:	f001 fe8f 	bl	80036d4 <MX_TIM10_Init>
  MX_TIM3_Init();
 80019b6:	f001 fe3f 	bl	8003638 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  USART_PRINT("\r\nSystem init...");
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	4989      	ldr	r1, [pc, #548]	; (8001be4 <main+0x260>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f008 fc36 	bl	800a230 <siprintf>
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fc0a 	bl	80001e0 <strlen>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	1d39      	adds	r1, r7, #4
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	4884      	ldr	r0, [pc, #528]	; (8001be8 <main+0x264>)
 80019d8:	f006 feb9 	bl	800874e <HAL_UART_Transmit>

	uint32_t adc_buffer[1];
	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 1);
 80019dc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019e0:	2201      	movs	r2, #1
 80019e2:	4619      	mov	r1, r3
 80019e4:	4881      	ldr	r0, [pc, #516]	; (8001bec <main+0x268>)
 80019e6:	f002 f9cb 	bl	8003d80 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim3);
 80019ea:	4881      	ldr	r0, [pc, #516]	; (8001bf0 <main+0x26c>)
 80019ec:	f005 fe94 	bl	8007718 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 80019f0:	4880      	ldr	r0, [pc, #512]	; (8001bf4 <main+0x270>)
 80019f2:	f005 fe91 	bl	8007718 <HAL_TIM_Base_Start_IT>

	// devices creation
	temp_sens = B3950_Init(adc_buffer);
 80019f6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fc66 	bl	80012cc <B3950_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a7d      	ldr	r2, [pc, #500]	; (8001bf8 <main+0x274>)
 8001a04:	6013      	str	r3, [r2, #0]
	pox = MAX32664(&hi2c1, &PC0, &PC1, 0x55);
 8001a06:	2355      	movs	r3, #85	; 0x55
 8001a08:	4a7c      	ldr	r2, [pc, #496]	; (8001bfc <main+0x278>)
 8001a0a:	497d      	ldr	r1, [pc, #500]	; (8001c00 <main+0x27c>)
 8001a0c:	487d      	ldr	r0, [pc, #500]	; (8001c04 <main+0x280>)
 8001a0e:	f000 fe20 	bl	8002652 <MAX32664>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a7c      	ldr	r2, [pc, #496]	; (8001c08 <main+0x284>)
 8001a16:	6013      	str	r3, [r2, #0]

	// devices init/start
	ssd1306_Init();
 8001a18:	f001 fa44 	bl	8002ea4 <ssd1306_Init>
	ds1307rtc_init();
 8001a1c:	f7ff fdc2 	bl	80015a4 <ds1307rtc_init>
	MAX32664_Begin(pox);
 8001a20:	4b79      	ldr	r3, [pc, #484]	; (8001c08 <main+0x284>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fe32 	bl	800268e <MAX32664_Begin>

	date_time_t dt = {.year = 23, .month = 6, .date = 12, .hours=8, .minutes=21, .seconds=0};
 8001a2a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	2315      	movs	r3, #21
 8001a36:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8001a40:	230c      	movs	r3, #12
 8001a42:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
 8001a46:	2306      	movs	r3, #6
 8001a48:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
 8001a4c:	2317      	movs	r3, #23
 8001a4e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	ds1307rtc_set_date_time(&dt);
 8001a52:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fd4e 	bl	80014f8 <ds1307rtc_set_date_time>

	date_time_t test;
	ds1307rtc_get_date_time(&test);
 8001a5c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fccd 	bl	8001400 <ds1307rtc_get_date_time>
	USART_PRINT("\r\nDatetime: %u/%u/%d %u:%u:%u", test.date, test.month, (int)test.year, test.hours, test.minutes, test.seconds);
 8001a66:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8001a70:	461e      	mov	r6, r3
 8001a72:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8001a76:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 8001a7a:	f897 10fd 	ldrb.w	r1, [r7, #253]	; 0xfd
 8001a7e:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
 8001a82:	4604      	mov	r4, r0
 8001a84:	1d38      	adds	r0, r7, #4
 8001a86:	9403      	str	r4, [sp, #12]
 8001a88:	9102      	str	r1, [sp, #8]
 8001a8a:	9201      	str	r2, [sp, #4]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4633      	mov	r3, r6
 8001a90:	462a      	mov	r2, r5
 8001a92:	495e      	ldr	r1, [pc, #376]	; (8001c0c <main+0x288>)
 8001a94:	f008 fbcc 	bl	800a230 <siprintf>
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fba0 	bl	80001e0 <strlen>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	1d39      	adds	r1, r7, #4
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	484f      	ldr	r0, [pc, #316]	; (8001be8 <main+0x264>)
 8001aac:	f006 fe4f 	bl	800874e <HAL_UART_Transmit>

	uint8_t error = MAX32664_ConfigBpm(pox, MODE_ONE); // Configuring just the BPM settings.
 8001ab0:	4b55      	ldr	r3, [pc, #340]	; (8001c08 <main+0x284>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fe7b 	bl	80027b2 <MAX32664_ConfigBpm>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	if (error == SB_SUCCESS) {
 8001ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d111      	bne.n	8001aee <main+0x16a>
		USART_PRINT("\r\nSensor configured correctly");
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4950      	ldr	r1, [pc, #320]	; (8001c10 <main+0x28c>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f008 fbae 	bl	800a230 <siprintf>
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fb82 	bl	80001e0 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	1d39      	adds	r1, r7, #4
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	4840      	ldr	r0, [pc, #256]	; (8001be8 <main+0x264>)
 8001ae8:	f006 fe31 	bl	800874e <HAL_UART_Transmit>
 8001aec:	e012      	b.n	8001b14 <main+0x190>
	} else {
		USART_PRINT("\r\nError during configuration with status code %u", error);
 8001aee:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	4947      	ldr	r1, [pc, #284]	; (8001c14 <main+0x290>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f008 fb9a 	bl	800a230 <siprintf>
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb6e 	bl	80001e0 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	1d39      	adds	r1, r7, #4
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	4836      	ldr	r0, [pc, #216]	; (8001be8 <main+0x264>)
 8001b10:	f006 fe1d 	bl	800874e <HAL_UART_Transmit>
	}

	// Data lags a bit behind the sensor, if you're finger is on the sensor when
	// it's being configured this delay will give some time for the data to catch
	// up.
	USART_PRINT("\r\nLoading sensor data...");
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4940      	ldr	r1, [pc, #256]	; (8001c18 <main+0x294>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f008 fb89 	bl	800a230 <siprintf>
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fb5d 	bl	80001e0 <strlen>
 8001b26:	4603      	mov	r3, r0
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	1d39      	adds	r1, r7, #4
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	482d      	ldr	r0, [pc, #180]	; (8001be8 <main+0x264>)
 8001b32:	f006 fe0c 	bl	800874e <HAL_UART_Transmit>
	HAL_Delay(4000);
 8001b36:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001b3a:	f001 ffa9 	bl	8003a90 <HAL_Delay>
	USART_PRINT("\r\nOk, sensor ready");
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4936      	ldr	r1, [pc, #216]	; (8001c1c <main+0x298>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f008 fb74 	bl	800a230 <siprintf>
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fb48 	bl	80001e0 <strlen>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	1d39      	adds	r1, r7, #4
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	4823      	ldr	r0, [pc, #140]	; (8001be8 <main+0x264>)
 8001b5c:	f006 fdf7 	bl	800874e <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <main+0x29c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d002      	beq.n	8001b6e <main+0x1ea>
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d063      	beq.n	8001c34 <main+0x2b0>

			measureCount += 1;
			break;
		}
		default:
			break;
 8001b6c:	e15c      	b.n	8001e28 <main+0x4a4>
			bioData poxData = MAX32664_ReadBpm(pox);
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <main+0x284>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fe77 	bl	800286c <MAX32664_ReadBpm>
			flag_finger_on_p = (poxData.status == 3);
 8001b7e:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <main+0x2a0>)
 8001b90:	701a      	strb	r2, [r3, #0]
			if (flag_finger_on_p) {
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <main+0x2a0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8145 	beq.w	8001e26 <main+0x4a2>
				ssd1306_Fill(Black);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f001 f9eb 	bl	8002f78 <ssd1306_Fill>
				ssd1306_SetCursor(0, 0);
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f001 fb35 	bl	8003214 <ssd1306_SetCursor>
				ssd1306_WriteString("Measuring", Font_7x10, White);
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <main+0x2a4>)
 8001bac:	2301      	movs	r3, #1
 8001bae:	ca06      	ldmia	r2, {r1, r2}
 8001bb0:	481e      	ldr	r0, [pc, #120]	; (8001c2c <main+0x2a8>)
 8001bb2:	f001 fb09 	bl	80031c8 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001bb6:	f001 fa03 	bl	8002fc0 <ssd1306_UpdateScreen>
				USART_PRINT("\r\nOk, measuring");
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	491c      	ldr	r1, [pc, #112]	; (8001c30 <main+0x2ac>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f008 fb36 	bl	800a230 <siprintf>
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fb0a 	bl	80001e0 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	1d39      	adds	r1, r7, #4
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	4804      	ldr	r0, [pc, #16]	; (8001be8 <main+0x264>)
 8001bd8:	f006 fdb9 	bl	800874e <HAL_UART_Transmit>
				state = MS_MEASURE;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <main+0x29c>)
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
			break;
 8001be2:	e120      	b.n	8001e26 <main+0x4a2>
 8001be4:	0800c938 	.word	0x0800c938
 8001be8:	200008e0 	.word	0x200008e0
 8001bec:	20000210 	.word	0x20000210
 8001bf0:	20000850 	.word	0x20000850
 8001bf4:	20000898 	.word	0x20000898
 8001bf8:	200003b4 	.word	0x200003b4
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000000 	.word	0x20000000
 8001c04:	200002b8 	.word	0x200002b8
 8001c08:	200003b8 	.word	0x200003b8
 8001c0c:	0800c94c 	.word	0x0800c94c
 8001c10:	0800c96c 	.word	0x0800c96c
 8001c14:	0800c98c 	.word	0x0800c98c
 8001c18:	0800c9c0 	.word	0x0800c9c0
 8001c1c:	0800c9dc 	.word	0x0800c9dc
 8001c20:	200003bd 	.word	0x200003bd
 8001c24:	200003bc 	.word	0x200003bc
 8001c28:	20000010 	.word	0x20000010
 8001c2c:	0800c9f0 	.word	0x0800c9f0
 8001c30:	0800c9fc 	.word	0x0800c9fc
			bioData poxData = MAX32664_ReadBpm(pox);
 8001c34:	4b7e      	ldr	r3, [pc, #504]	; (8001e30 <main+0x4ac>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fe14 	bl	800286c <MAX32664_ReadBpm>
			if ((float)poxData.heartRate < 10.0 || (float)poxData.oxygen < 10.0)
 8001c44:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	f240 80ed 	bls.w	8001e28 <main+0x4a4>
 8001c4e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	f240 80e8 	bls.w	8001e28 <main+0x4a4>
			float tmp = B3950_Read(temp_sens);
 8001c58:	4b76      	ldr	r3, [pc, #472]	; (8001e34 <main+0x4b0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fb46 	bl	80012ee <B3950_Read>
 8001c62:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110
			average.oxygen += poxData.oxygen;
 8001c66:	4b74      	ldr	r3, [pc, #464]	; (8001e38 <main+0x4b4>)
 8001c68:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c6c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7c:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <main+0x4b4>)
 8001c7e:	edc3 7a01 	vstr	s15, [r3, #4]
			average.heartRate += poxData.heartRate;
 8001c82:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <main+0x4b4>)
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <main+0x4b4>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
			average.confidence += poxData.confidence;
 8001c9e:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <main+0x4b4>)
 8001ca0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ca4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb4:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <main+0x4b4>)
 8001cb6:	edc3 7a02 	vstr	s15, [r3, #8]
			average.temperature += tmp;
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <main+0x4b4>)
 8001cbc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cc0:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <main+0x4b4>)
 8001cca:	edc3 7a03 	vstr	s15, [r3, #12]
			if (poxData.heartRate > maximum.heartRate)
 8001cce:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <main+0x4b8>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	dd08      	ble.n	8001cfc <main+0x378>
				maximum.heartRate = poxData.heartRate;
 8001cea:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf6:	4b51      	ldr	r3, [pc, #324]	; (8001e3c <main+0x4b8>)
 8001cf8:	edc3 7a00 	vstr	s15, [r3]
			if (poxData.heartRate < minimum.heartRate)
 8001cfc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <main+0x4bc>)
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	d508      	bpl.n	8001d2a <main+0x3a6>
				minimum.heartRate = poxData.heartRate;
 8001d18:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <main+0x4bc>)
 8001d26:	edc3 7a00 	vstr	s15, [r3]
			if (poxData.oxygen > maximum.oxygen)
 8001d2a:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <main+0x4b8>)
 8001d38:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	dd08      	ble.n	8001d58 <main+0x3d4>
				maximum.oxygen = poxData.oxygen;
 8001d46:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <main+0x4b8>)
 8001d54:	edc3 7a01 	vstr	s15, [r3, #4]
			if (poxData.oxygen < minimum.oxygen)
 8001d58:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <main+0x4bc>)
 8001d66:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	d508      	bpl.n	8001d86 <main+0x402>
				minimum.oxygen = poxData.oxygen;
 8001d74:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <main+0x4bc>)
 8001d82:	edc3 7a01 	vstr	s15, [r3, #4]
			if (poxData.confidence > maximum.confidence)
 8001d86:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <main+0x4b8>)
 8001d94:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	dd08      	ble.n	8001db4 <main+0x430>
				maximum.confidence = poxData.confidence;
 8001da2:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <main+0x4b8>)
 8001db0:	edc3 7a02 	vstr	s15, [r3, #8]
			if (poxData.confidence < minimum.confidence)
 8001db4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <main+0x4bc>)
 8001dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d508      	bpl.n	8001de2 <main+0x45e>
				minimum.confidence = poxData.confidence;
 8001dd0:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <main+0x4bc>)
 8001dde:	edc3 7a02 	vstr	s15, [r3, #8]
			if (tmp > maximum.temperature)
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <main+0x4b8>)
 8001de4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001de8:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8001dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	dd03      	ble.n	8001dfe <main+0x47a>
				maximum.temperature = tmp;
 8001df6:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <main+0x4b8>)
 8001df8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001dfc:	60d3      	str	r3, [r2, #12]
			if (tmp < minimum.temperature)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <main+0x4bc>)
 8001e00:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e04:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8001e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d503      	bpl.n	8001e1a <main+0x496>
				minimum.temperature = tmp;
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <main+0x4bc>)
 8001e14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e18:	60d3      	str	r3, [r2, #12]
			measureCount += 1;
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <main+0x4c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <main+0x4c0>)
 8001e22:	6013      	str	r3, [r2, #0]
			break;
 8001e24:	e000      	b.n	8001e28 <main+0x4a4>
			break;
 8001e26:	bf00      	nop
		}

		// pox sensor delay
		HAL_Delay(40);
 8001e28:	2028      	movs	r0, #40	; 0x28
 8001e2a:	f001 fe31 	bl	8003a90 <HAL_Delay>
		switch (state) {
 8001e2e:	e697      	b.n	8001b60 <main+0x1dc>
 8001e30:	200003b8 	.word	0x200003b8
 8001e34:	200003b4 	.word	0x200003b4
 8001e38:	200003cc 	.word	0x200003cc
 8001e3c:	200003dc 	.word	0x200003dc
 8001e40:	200003ec 	.word	0x200003ec
 8001e44:	200003c4 	.word	0x200003c4

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	; 0x50
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2230      	movs	r2, #48	; 0x30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 fc88 	bl	800976c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <SystemClock_Config+0xb8>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <SystemClock_Config+0xb8>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <SystemClock_Config+0xb8>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <SystemClock_Config+0xbc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <SystemClock_Config+0xbc>)
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <SystemClock_Config+0xbc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb0:	2310      	movs	r3, #16
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f004 ff43 	bl	8006d48 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ec8:	f000 fbbe 	bl	8002648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f005 f9a6 	bl	8007238 <HAL_RCC_ClockConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ef2:	f000 fba9 	bl	8002648 <Error_Handler>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3750      	adds	r7, #80	; 0x50
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
	}
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	0000      	movs	r0, r0
	...

08001f20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f24:	b0e1      	sub	sp, #388	; 0x184
 8001f26:	af06      	add	r7, sp, #24
 8001f28:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001f2c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f30:	6018      	str	r0, [r3, #0]

	if (htim == &htim10) {
 8001f32:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001f36:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a51      	ldr	r2, [pc, #324]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f040 831a 	bne.w	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>

		if (state == MS_MEASURE) {
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	f040 82b5 	bne.w	80024b8 <HAL_TIM_PeriodElapsedCallback+0x598>
			if (__EXPIRED(timeCount, MAX_MEASURE_TIME)) {
 8001f4e:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f56:	4293      	cmp	r3, r2
 8001f58:	f040 82a8 	bne.w	80024ac <HAL_TIM_PeriodElapsedCallback+0x58c>
				timeCount = 0;
 8001f5c:	4b4b      	ldr	r3, [pc, #300]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
				state = MS_END;
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001f64:	2203      	movs	r2, #3
 8001f66:	701a      	strb	r2, [r3, #0]
				date_time_t curr = {0};
 8001f68:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
				ds1307rtc_get_date_time(&curr);
 8001f72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fa42 	bl	8001400 <ds1307rtc_get_date_time>
				USART_PRINT("\r\nReport [%d-%d-%dT%d:%d:%d]", curr.year, curr.month, curr.date, curr.hours, curr.minutes, curr.seconds);
 8001f7c:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001f80:	461d      	mov	r5, r3
 8001f82:	f897 3165 	ldrb.w	r3, [r7, #357]	; 0x165
 8001f86:	461e      	mov	r6, r3
 8001f88:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 8001f8c:	f897 2162 	ldrb.w	r2, [r7, #354]	; 0x162
 8001f90:	f897 1161 	ldrb.w	r1, [r7, #353]	; 0x161
 8001f94:	f897 0160 	ldrb.w	r0, [r7, #352]	; 0x160
 8001f98:	4604      	mov	r4, r0
 8001f9a:	f107 0008 	add.w	r0, r7, #8
 8001f9e:	9403      	str	r4, [sp, #12]
 8001fa0:	9102      	str	r1, [sp, #8]
 8001fa2:	9201      	str	r2, [sp, #4]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	4633      	mov	r3, r6
 8001fa8:	462a      	mov	r2, r5
 8001faa:	4939      	ldr	r1, [pc, #228]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001fac:	f008 f940 	bl	800a230 <siprintf>
 8001fb0:	f107 0308 	add.w	r3, r7, #8
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe f913 	bl	80001e0 <strlen>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	f107 0108 	add.w	r1, r7, #8
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	4833      	ldr	r0, [pc, #204]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001fc8:	f006 fbc1 	bl	800874e <HAL_UART_Transmit>
				if (measureCount < OPT_MEASURES) {
 8001fcc:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b1d      	cmp	r3, #29
 8001fd2:	d816      	bhi.n	8002002 <HAL_TIM_PeriodElapsedCallback+0xe2>
					USART_PRINT("\r\nobtained %lu/%lu good samples -> discard", measureCount, (uint32_t)OPT_MEASURES);
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f107 0008 	add.w	r0, r7, #8
 8001fdc:	231e      	movs	r3, #30
 8001fde:	492f      	ldr	r1, [pc, #188]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001fe0:	f008 f926 	bl	800a230 <siprintf>
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe f8f9 	bl	80001e0 <strlen>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	f107 0108 	add.w	r1, r7, #8
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	4826      	ldr	r0, [pc, #152]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ffc:	f006 fba7 	bl	800874e <HAL_UART_Transmit>
 8002000:	e015      	b.n	800202e <HAL_TIM_PeriodElapsedCallback+0x10e>
				} else {
					USART_PRINT("\r\nobtained %lu/%lu good samples -> accept", measureCount, (uint32_t)OPT_MEASURES);
 8002002:	4b25      	ldr	r3, [pc, #148]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f107 0008 	add.w	r0, r7, #8
 800200a:	231e      	movs	r3, #30
 800200c:	4924      	ldr	r1, [pc, #144]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800200e:	f008 f90f 	bl	800a230 <siprintf>
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe f8e2 	bl	80001e0 <strlen>
 800201c:	4603      	mov	r3, r0
 800201e:	b29a      	uxth	r2, r3
 8002020:	f107 0108 	add.w	r1, r7, #8
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	481a      	ldr	r0, [pc, #104]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800202a:	f006 fb90 	bl	800874e <HAL_UART_Transmit>
				}

				if (measureCount < OPT_MEASURES) {
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b1d      	cmp	r3, #29
 8002034:	d83e      	bhi.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x194>
					state = MS_ERROR;
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002038:	2205      	movs	r2, #5
 800203a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800203c:	2201      	movs	r2, #1
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	4818      	ldr	r0, [pc, #96]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002042:	f003 f8ed 	bl	8005220 <HAL_GPIO_WritePin>
					ssd1306_Fill(Black);
 8002046:	2000      	movs	r0, #0
 8002048:	f000 ff96 	bl	8002f78 <ssd1306_Fill>
					ssd1306_SetCursor(0, 0);
 800204c:	2100      	movs	r1, #0
 800204e:	2000      	movs	r0, #0
 8002050:	f001 f8e0 	bl	8003214 <ssd1306_SetCursor>
					ssd1306_WriteString("Invalid measure", Font_7x10, White);
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002056:	2301      	movs	r3, #1
 8002058:	ca06      	ldmia	r2, {r1, r2}
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800205c:	f001 f8b4 	bl	80031c8 <ssd1306_WriteString>
					ssd1306_SetCursor(0, 15);
 8002060:	210f      	movs	r1, #15
 8002062:	2000      	movs	r0, #0
 8002064:	f001 f8d6 	bl	8003214 <ssd1306_SetCursor>
					ssd1306_WriteString("Repeat", Font_7x10, White);
 8002068:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800206a:	2301      	movs	r3, #1
 800206c:	ca06      	ldmia	r2, {r1, r2}
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002070:	f001 f8aa 	bl	80031c8 <ssd1306_WriteString>
					ssd1306_SetCursor(0, 0);
 8002074:	2100      	movs	r1, #0
 8002076:	2000      	movs	r0, #0
 8002078:	f001 f8cc 	bl	8003214 <ssd1306_SetCursor>
					ssd1306_UpdateScreen();
 800207c:	f000 ffa0 	bl	8002fc0 <ssd1306_UpdateScreen>
					return;
 8002080:	e27a      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
 8002082:	bf00      	nop
 8002084:	20000898 	.word	0x20000898
 8002088:	200003bd 	.word	0x200003bd
 800208c:	200003c8 	.word	0x200003c8
 8002090:	0800ca0c 	.word	0x0800ca0c
 8002094:	200008e0 	.word	0x200008e0
 8002098:	200003c4 	.word	0x200003c4
 800209c:	0800ca2c 	.word	0x0800ca2c
 80020a0:	0800ca58 	.word	0x0800ca58
 80020a4:	40020000 	.word	0x40020000
 80020a8:	20000010 	.word	0x20000010
 80020ac:	0800ca84 	.word	0x0800ca84
 80020b0:	0800ca94 	.word	0x0800ca94
				}

				average.oxygen /= measureCount;
 80020b4:	4bb8      	ldr	r3, [pc, #736]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80020b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80020ba:	4bb8      	ldr	r3, [pc, #736]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ca:	4bb3      	ldr	r3, [pc, #716]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80020cc:	edc3 7a01 	vstr	s15, [r3, #4]
				average.heartRate /= measureCount;
 80020d0:	4bb1      	ldr	r3, [pc, #708]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80020d2:	edd3 6a00 	vldr	s13, [r3]
 80020d6:	4bb1      	ldr	r3, [pc, #708]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e6:	4bac      	ldr	r3, [pc, #688]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80020e8:	edc3 7a00 	vstr	s15, [r3]
				average.confidence /= measureCount;
 80020ec:	4baa      	ldr	r3, [pc, #680]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80020ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80020f2:	4baa      	ldr	r3, [pc, #680]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002102:	4ba5      	ldr	r3, [pc, #660]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002104:	edc3 7a02 	vstr	s15, [r3, #8]
				average.temperature /= measureCount;
 8002108:	4ba3      	ldr	r3, [pc, #652]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800210a:	edd3 6a03 	vldr	s13, [r3, #12]
 800210e:	4ba3      	ldr	r3, [pc, #652]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800211a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211e:	4b9e      	ldr	r3, [pc, #632]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002120:	edc3 7a03 	vstr	s15, [r3, #12]

				USART_PRINT("\r\nHr: %.1f, Ox: %.0f, Conf: %.0f, T: %.1f", (float)average.heartRate, (float)average.oxygen, average.confidence, average.temperature);
 8002124:	4b9c      	ldr	r3, [pc, #624]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa15 	bl	8000558 <__aeabi_f2d>
 800212e:	4682      	mov	sl, r0
 8002130:	468b      	mov	fp, r1
 8002132:	4b99      	ldr	r3, [pc, #612]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa0e 	bl	8000558 <__aeabi_f2d>
 800213c:	4604      	mov	r4, r0
 800213e:	460d      	mov	r5, r1
 8002140:	4b95      	ldr	r3, [pc, #596]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fa07 	bl	8000558 <__aeabi_f2d>
 800214a:	4680      	mov	r8, r0
 800214c:	4689      	mov	r9, r1
 800214e:	4b92      	ldr	r3, [pc, #584]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fa00 	bl	8000558 <__aeabi_f2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	f107 0008 	add.w	r0, r7, #8
 8002160:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002164:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002168:	e9cd 4500 	strd	r4, r5, [sp]
 800216c:	4652      	mov	r2, sl
 800216e:	465b      	mov	r3, fp
 8002170:	498b      	ldr	r1, [pc, #556]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8002172:	f008 f85d 	bl	800a230 <siprintf>
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f830 	bl	80001e0 <strlen>
 8002180:	4603      	mov	r3, r0
 8002182:	b29a      	uxth	r2, r3
 8002184:	f107 0108 	add.w	r1, r7, #8
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	4885      	ldr	r0, [pc, #532]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x484>)
 800218e:	f006 fade 	bl	800874e <HAL_UART_Transmit>

				// uncertainty computation
				MachineData unc;
				// max errors
				unc.heartRate = (maximum.heartRate - minimum.heartRate) / 2;
 8002192:	4b85      	ldr	r3, [pc, #532]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x48c>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021aa:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
				unc.oxygen = (maximum.oxygen - minimum.oxygen) / 2;
 80021ae:	4b7e      	ldr	r3, [pc, #504]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80021b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80021b4:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80021b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80021ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c6:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
				unc.temperature = (maximum.temperature - minimum.temperature) / 2;
 80021ca:	4b77      	ldr	r3, [pc, #476]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80021cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80021d0:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80021d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80021d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e2:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c

				unc.heartRate = (average.heartRate + unc.heartRate) / average.heartRate;
 80021e6:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80021e8:	ed93 7a00 	vldr	s14, [r3]
 80021ec:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 80021f0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021fe:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
				unc.oxygen = (average.oxygen + unc.oxygen) / average.oxygen;
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002204:	ed93 7a01 	vldr	s14, [r3, #4]
 8002208:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 800220c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002210:	4b61      	ldr	r3, [pc, #388]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002212:	ed93 7a01 	vldr	s14, [r3, #4]
 8002216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221a:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
				unc.temperature = (average.temperature + unc.temperature) / average.temperature;
 800221e:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002220:	ed93 7a03 	vldr	s14, [r3, #12]
 8002224:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 8002228:	ee77 6a27 	vadd.f32	s13, s14, s15
 800222c:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800222e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002236:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c

				if (unc.heartRate <= MIN_UNCERT_THRES || unc.oxygen <= MIN_UNCERT_THRES || unc.temperature <= MIN_UNCERT_THRES) {
 800223a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f98a 	bl	8000558 <__aeabi_f2d>
 8002244:	a352      	add	r3, pc, #328	; (adr r3, 8002390 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe fc59 	bl	8000b00 <__aeabi_dcmple>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d119      	bne.n	8002288 <HAL_TIM_PeriodElapsedCallback+0x368>
 8002254:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f97d 	bl	8000558 <__aeabi_f2d>
 800225e:	a34c      	add	r3, pc, #304	; (adr r3, 8002390 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe fc4c 	bl	8000b00 <__aeabi_dcmple>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_TIM_PeriodElapsedCallback+0x368>
 800226e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f970 	bl	8000558 <__aeabi_f2d>
 8002278:	a345      	add	r3, pc, #276	; (adr r3, 8002390 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	f7fe fc3f 	bl	8000b00 <__aeabi_dcmple>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d025      	beq.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x3b4>
					state = MS_ERROR;
 8002288:	4b49      	ldr	r3, [pc, #292]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800228a:	2205      	movs	r2, #5
 800228c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800228e:	2201      	movs	r2, #1
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	4848      	ldr	r0, [pc, #288]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002294:	f002 ffc4 	bl	8005220 <HAL_GPIO_WritePin>
					ssd1306_Fill(Black);
 8002298:	2000      	movs	r0, #0
 800229a:	f000 fe6d 	bl	8002f78 <ssd1306_Fill>
					ssd1306_SetCursor(0, 0);
 800229e:	2100      	movs	r1, #0
 80022a0:	2000      	movs	r0, #0
 80022a2:	f000 ffb7 	bl	8003214 <ssd1306_SetCursor>
					ssd1306_WriteString("Invalid measure", Font_7x10, White);
 80022a6:	4a44      	ldr	r2, [pc, #272]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80022a8:	2301      	movs	r3, #1
 80022aa:	ca06      	ldmia	r2, {r1, r2}
 80022ac:	4843      	ldr	r0, [pc, #268]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80022ae:	f000 ff8b 	bl	80031c8 <ssd1306_WriteString>
					ssd1306_SetCursor(0, 15);
 80022b2:	210f      	movs	r1, #15
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 ffad 	bl	8003214 <ssd1306_SetCursor>
					ssd1306_WriteString("Repeat", Font_7x10, White);
 80022ba:	4a3f      	ldr	r2, [pc, #252]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80022bc:	2301      	movs	r3, #1
 80022be:	ca06      	ldmia	r2, {r1, r2}
 80022c0:	483f      	ldr	r0, [pc, #252]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80022c2:	f000 ff81 	bl	80031c8 <ssd1306_WriteString>
					ssd1306_SetCursor(0, 0);
 80022c6:	2100      	movs	r1, #0
 80022c8:	2000      	movs	r0, #0
 80022ca:	f000 ffa3 	bl	8003214 <ssd1306_SetCursor>
					ssd1306_UpdateScreen();
 80022ce:	f000 fe77 	bl	8002fc0 <ssd1306_UpdateScreen>
					return;
 80022d2:	e151      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
				}

				if (average.heartRate > HIGH_HR_THRES) {
 80022d4:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80023c4 <HAL_TIM_PeriodElapsedCallback+0x4a4>
 80022de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	dd2a      	ble.n	800233e <HAL_TIM_PeriodElapsedCallback+0x41e>
					state = MS_EXERCISE;
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80022ea:	2206      	movs	r2, #6
 80022ec:	701a      	strb	r2, [r3, #0]
					USART_PRINT("\r\nBreath exercise mode");
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	4935      	ldr	r1, [pc, #212]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80022f4:	4618      	mov	r0, r3
 80022f6:	f007 ff9b 	bl	800a230 <siprintf>
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fd ff6e 	bl	80001e0 <strlen>
 8002304:	4603      	mov	r3, r0
 8002306:	b29a      	uxth	r2, r3
 8002308:	f107 0108 	add.w	r1, r7, #8
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
 8002310:	4824      	ldr	r0, [pc, #144]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8002312:	f006 fa1c 	bl	800874e <HAL_UART_Transmit>
					ssd1306_Fill(Black);
 8002316:	2000      	movs	r0, #0
 8002318:	f000 fe2e 	bl	8002f78 <ssd1306_Fill>
					ssd1306_SetCursor(0, 0);
 800231c:	2100      	movs	r1, #0
 800231e:	2000      	movs	r0, #0
 8002320:	f000 ff78 	bl	8003214 <ssd1306_SetCursor>
					ssd1306_WriteString("Exercise mode", Font_7x10, White);
 8002324:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8002326:	2301      	movs	r3, #1
 8002328:	ca06      	ldmia	r2, {r1, r2}
 800232a:	4828      	ldr	r0, [pc, #160]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 800232c:	f000 ff4c 	bl	80031c8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002330:	f000 fe46 	bl	8002fc0 <ssd1306_UpdateScreen>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002334:	2104      	movs	r1, #4
 8002336:	4826      	ldr	r0, [pc, #152]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002338:	f005 faa0 	bl	800787c <HAL_TIM_PWM_Start>
					return;
 800233c:	e11c      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
				}
				if (average.oxygen < LOW_OXY_THRES && average.temperature > HIGH_TEMP_THRES) {
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002340:	edd3 7a01 	vldr	s15, [r3, #4]
 8002344:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80023d4 <HAL_TIM_PeriodElapsedCallback+0x4b4>
 8002348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	d546      	bpl.n	80023e0 <HAL_TIM_PeriodElapsedCallback+0x4c0>
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002354:	edd3 7a03 	vldr	s15, [r3, #12]
 8002358:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80023d8 <HAL_TIM_PeriodElapsedCallback+0x4b8>
 800235c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002364:	dd3c      	ble.n	80023e0 <HAL_TIM_PeriodElapsedCallback+0x4c0>
					state = MS_COVID_19;
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002368:	2204      	movs	r2, #4
 800236a:	701a      	strb	r2, [r3, #0]
					ssd1306_Fill(Black);
 800236c:	2000      	movs	r0, #0
 800236e:	f000 fe03 	bl	8002f78 <ssd1306_Fill>
					ssd1306_SetCursor(0, 0);
 8002372:	2100      	movs	r1, #0
 8002374:	2000      	movs	r0, #0
 8002376:	f000 ff4d 	bl	8003214 <ssd1306_SetCursor>
					ssd1306_WriteString("Take a COVID test", Font_7x10, White);
 800237a:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800237c:	2301      	movs	r3, #1
 800237e:	ca06      	ldmia	r2, {r1, r2}
 8002380:	4816      	ldr	r0, [pc, #88]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8002382:	f000 ff21 	bl	80031c8 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002386:	f000 fe1b 	bl	8002fc0 <ssd1306_UpdateScreen>
					return;
 800238a:	e0f5      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
 800238c:	f3af 8000 	nop.w
 8002390:	9999999a 	.word	0x9999999a
 8002394:	3fb99999 	.word	0x3fb99999
 8002398:	200003cc 	.word	0x200003cc
 800239c:	200003c4 	.word	0x200003c4
 80023a0:	0800ca9c 	.word	0x0800ca9c
 80023a4:	200008e0 	.word	0x200008e0
 80023a8:	200003dc 	.word	0x200003dc
 80023ac:	200003ec 	.word	0x200003ec
 80023b0:	200003bd 	.word	0x200003bd
 80023b4:	40020000 	.word	0x40020000
 80023b8:	20000010 	.word	0x20000010
 80023bc:	0800ca84 	.word	0x0800ca84
 80023c0:	0800ca94 	.word	0x0800ca94
 80023c4:	42960000 	.word	0x42960000
 80023c8:	0800cac8 	.word	0x0800cac8
 80023cc:	0800cae0 	.word	0x0800cae0
 80023d0:	20000808 	.word	0x20000808
 80023d4:	42bc0000 	.word	0x42bc0000
 80023d8:	42100000 	.word	0x42100000
 80023dc:	0800caf0 	.word	0x0800caf0
				// write pox data
				char hr[30];
				char ox[30];
				char cf[30];
				char tmp_msg[30];
				sprintf(hr, "Hr: %.1f bpm", average.heartRate);
 80023e0:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x664>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8b7 	bl	8000558 <__aeabi_f2d>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80023f2:	4965      	ldr	r1, [pc, #404]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x668>)
 80023f4:	f007 ff1c 	bl	800a230 <siprintf>
				sprintf(ox, "Ox: %.0f perc", average.oxygen);
 80023f8:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x664>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f8ab 	bl	8000558 <__aeabi_f2d>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800240a:	4960      	ldr	r1, [pc, #384]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800240c:	f007 ff10 	bl	800a230 <siprintf>
				sprintf(cf, "Cf: %.0f perc", average.confidence);
 8002410:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f89f 	bl	8000558 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8002422:	495b      	ldr	r1, [pc, #364]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002424:	f007 ff04 	bl	800a230 <siprintf>
				sprintf(tmp_msg, "T: %.1f C", average.temperature);
 8002428:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x664>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f893 	bl	8000558 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800243a:	4956      	ldr	r1, [pc, #344]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x674>)
 800243c:	f007 fef8 	bl	800a230 <siprintf>
				ssd1306_Fill(Black);
 8002440:	2000      	movs	r0, #0
 8002442:	f000 fd99 	bl	8002f78 <ssd1306_Fill>
				ssd1306_SetCursor(0, 0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f000 fee3 	bl	8003214 <ssd1306_SetCursor>
				ssd1306_WriteString(hr, Font_7x10, White);
 800244e:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002450:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8002454:	2301      	movs	r3, #1
 8002456:	ca06      	ldmia	r2, {r1, r2}
 8002458:	f000 feb6 	bl	80031c8 <ssd1306_WriteString>
				ssd1306_SetCursor(0, 15);
 800245c:	210f      	movs	r1, #15
 800245e:	2000      	movs	r0, #0
 8002460:	f000 fed8 	bl	8003214 <ssd1306_SetCursor>
				ssd1306_WriteString(ox, Font_7x10, White);
 8002464:	4a4c      	ldr	r2, [pc, #304]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002466:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800246a:	2301      	movs	r3, #1
 800246c:	ca06      	ldmia	r2, {r1, r2}
 800246e:	f000 feab 	bl	80031c8 <ssd1306_WriteString>
				ssd1306_SetCursor(0, 30);
 8002472:	211e      	movs	r1, #30
 8002474:	2000      	movs	r0, #0
 8002476:	f000 fecd 	bl	8003214 <ssd1306_SetCursor>
				ssd1306_WriteString(cf, Font_7x10, White);
 800247a:	4a47      	ldr	r2, [pc, #284]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x678>)
 800247c:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8002480:	2301      	movs	r3, #1
 8002482:	ca06      	ldmia	r2, {r1, r2}
 8002484:	f000 fea0 	bl	80031c8 <ssd1306_WriteString>
				ssd1306_SetCursor(0, 45);
 8002488:	212d      	movs	r1, #45	; 0x2d
 800248a:	2000      	movs	r0, #0
 800248c:	f000 fec2 	bl	8003214 <ssd1306_SetCursor>
				ssd1306_WriteString(tmp_msg, Font_7x10, White);
 8002490:	4a41      	ldr	r2, [pc, #260]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002492:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8002496:	2301      	movs	r3, #1
 8002498:	ca06      	ldmia	r2, {r1, r2}
 800249a:	f000 fe95 	bl	80031c8 <ssd1306_WriteString>
				ssd1306_SetCursor(0, 0);
 800249e:	2100      	movs	r1, #0
 80024a0:	2000      	movs	r0, #0
 80024a2:	f000 feb7 	bl	8003214 <ssd1306_SetCursor>
				ssd1306_UpdateScreen();
 80024a6:	f000 fd8b 	bl	8002fc0 <ssd1306_UpdateScreen>
			}

			else {
				timeCount += 1;
			}
			return;
 80024aa:	e065      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
				timeCount += 1;
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80024b4:	6013      	str	r3, [r2, #0]
			return;
 80024b6:	e05f      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
		}

		if (state == MS_EXERCISE) {
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b06      	cmp	r3, #6
 80024be:	d13d      	bne.n	800253c <HAL_TIM_PeriodElapsedCallback+0x61c>
			if (__EXPIRED(timeCount, EXERCISE_TIME)) {
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024c8:	d10a      	bne.n	80024e0 <HAL_TIM_PeriodElapsedCallback+0x5c0>
				timeCount = 0;
 80024ca:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80024d0:	2104      	movs	r1, #4
 80024d2:	4834      	ldr	r0, [pc, #208]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80024d4:	f005 fa82 	bl	80079dc <HAL_TIM_PWM_Stop>
				state = MS_WAIT;
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
				return;
 80024de:	e04b      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
			}


			if (led_dir==0)
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_TIM_PeriodElapsedCallback+0x5d4>
				led_pulse += 4;
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3304      	adds	r3, #4
 80024ee:	4a2f      	ldr	r2, [pc, #188]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e004      	b.n	80024fe <HAL_TIM_PeriodElapsedCallback+0x5de>
			else
				led_pulse -= 4;
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3b04      	subs	r3, #4
 80024fa:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80024fc:	6013      	str	r3, [r2, #0]

			if ( (led_pulse==0) || (led_pulse>=999))
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x5f2>
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800250e:	4293      	cmp	r3, r2
 8002510:	d909      	bls.n	8002526 <HAL_TIM_PeriodElapsedCallback+0x606>
				led_dir=!led_dir;
 8002512:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8002524:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, led_pulse);
 8002526:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a20      	ldr	r2, [pc, #128]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x68c>)
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
			timeCount += 1;
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8002538:	6013      	str	r3, [r2, #0]
			return;
 800253a:	e01d      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
		}

		if (state == MS_ERROR || state == MS_COVID_19) {
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d003      	beq.n	800254c <HAL_TIM_PeriodElapsedCallback+0x62c>
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d115      	bne.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
			if (timeCount == PAUSE_TIME * 100) {
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002554:	d10b      	bne.n	800256e <HAL_TIM_PeriodElapsedCallback+0x64e>
				timeCount = 0;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800255c:	2200      	movs	r2, #0
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	4813      	ldr	r0, [pc, #76]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8002562:	f002 fe5d 	bl	8005220 <HAL_GPIO_WritePin>
				state = MS_WAIT;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
				return;
 800256c:	e004      	b.n	8002578 <HAL_TIM_PeriodElapsedCallback+0x658>
			}

			timeCount += 1;
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8002576:	6013      	str	r3, [r2, #0]
		}
	}
}
 8002578:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800257c:	46bd      	mov	sp, r7
 800257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002582:	bf00      	nop
 8002584:	200003cc 	.word	0x200003cc
 8002588:	0800cb04 	.word	0x0800cb04
 800258c:	0800cb14 	.word	0x0800cb14
 8002590:	0800cb24 	.word	0x0800cb24
 8002594:	0800cb34 	.word	0x0800cb34
 8002598:	20000010 	.word	0x20000010
 800259c:	200003c8 	.word	0x200003c8
 80025a0:	200003bd 	.word	0x200003bd
 80025a4:	20000808 	.word	0x20000808
 80025a8:	200003be 	.word	0x200003be
 80025ac:	200003c0 	.word	0x200003c0
 80025b0:	40020000 	.word	0x40020000

080025b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0b4      	sub	sp, #208	; 0xd0
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c4:	d12f      	bne.n	8002626 <HAL_GPIO_EXTI_Callback+0x72>
	{
		if (state == MS_IDLE) {
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_GPIO_EXTI_Callback+0x7c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d12b      	bne.n	8002626 <HAL_GPIO_EXTI_Callback+0x72>
			USART_PRINT("\r\nDevice is on");
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	4918      	ldr	r1, [pc, #96]	; (8002634 <HAL_GPIO_EXTI_Callback+0x80>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f007 fe2b 	bl	800a230 <siprintf>
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fdfe 	bl	80001e0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	f107 0108 	add.w	r1, r7, #8
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	4811      	ldr	r0, [pc, #68]	; (8002638 <HAL_GPIO_EXTI_Callback+0x84>)
 80025f2:	f006 f8ac 	bl	800874e <HAL_UART_Transmit>
			state = MS_WAIT;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_GPIO_EXTI_Callback+0x7c>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
			ssd1306_Fill(Black);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f000 fcbb 	bl	8002f78 <ssd1306_Fill>
			ssd1306_WriteString("Put finger", Font_7x10, White);
 8002602:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_GPIO_EXTI_Callback+0x88>)
 8002604:	2301      	movs	r3, #1
 8002606:	ca06      	ldmia	r2, {r1, r2}
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <HAL_GPIO_EXTI_Callback+0x8c>)
 800260a:	f000 fddd 	bl	80031c8 <ssd1306_WriteString>
			ssd1306_SetCursor(0, 15);
 800260e:	210f      	movs	r1, #15
 8002610:	2000      	movs	r0, #0
 8002612:	f000 fdff 	bl	8003214 <ssd1306_SetCursor>
			ssd1306_WriteString("on sensors", Font_7x10, White);
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_GPIO_EXTI_Callback+0x88>)
 8002618:	2301      	movs	r3, #1
 800261a:	ca06      	ldmia	r2, {r1, r2}
 800261c:	4809      	ldr	r0, [pc, #36]	; (8002644 <HAL_GPIO_EXTI_Callback+0x90>)
 800261e:	f000 fdd3 	bl	80031c8 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002622:	f000 fccd 	bl	8002fc0 <ssd1306_UpdateScreen>
		}
	}
}
 8002626:	bf00      	nop
 8002628:	37d0      	adds	r7, #208	; 0xd0
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003bd 	.word	0x200003bd
 8002634:	0800cb40 	.word	0x0800cb40
 8002638:	200008e0 	.word	0x200008e0
 800263c:	20000010 	.word	0x20000010
 8002640:	0800cb50 	.word	0x0800cb50
 8002644:	0800cb5c 	.word	0x0800cb5c

08002648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800264c:	b672      	cpsid	i
}
 800264e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002650:	e7fe      	b.n	8002650 <Error_Handler+0x8>

08002652 <MAX32664>:
#include "usart.h"

#include <stdlib.h>

MAX32664_Handle* MAX32664(I2C_HandleTypeDef *hi2c, GPIO_Line *resetLine,
		GPIO_Line *mfioLine, uint8_t address) {
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	70fb      	strb	r3, [r7, #3]
	MAX32664_Handle *handle = (MAX32664_Handle*) malloc(
 8002660:	2068      	movs	r0, #104	; 0x68
 8002662:	f007 f865 	bl	8009730 <malloc>
 8002666:	4603      	mov	r3, r0
 8002668:	617b      	str	r3, [r7, #20]
			sizeof(MAX32664_Handle));
	handle->hi2c = hi2c;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	649a      	str	r2, [r3, #72]	; 0x48
	handle->_resetLine = resetLine;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	64da      	str	r2, [r3, #76]	; 0x4c
	handle->_mfioLine = mfioLine;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	651a      	str	r2, [r3, #80]	; 0x50
	handle->_address = address;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	return handle;
 8002684:	697b      	ldr	r3, [r7, #20]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <MAX32664_Begin>:
// application mode, the MFIO pin must be pulled HIGH while the board is held
// in reset for 10ms. After 50 addtional ms have elapsed the board should be
// in application mode and will return two bytes, the first 0x00 is a
// successful communcation byte, followed by 0x00 which is the byte indicating
// which mode the IC is in.
uint8_t MAX32664_Begin(MAX32664_Handle *handle) {
 800268e:	b580      	push	{r7, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]

	if (handle->hi2c == NULL || handle->_resetLine == NULL
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <MAX32664_Begin+0x20>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <MAX32664_Begin+0x20>
			|| handle->_mfioLine == NULL) // Bail if the pins have still not been defined
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <MAX32664_Begin+0x24>
		return 0xFF; // Return SB_ERR_UNKNOWN
 80026ae:	23ff      	movs	r3, #255	; 0xff
 80026b0:	e06b      	b.n	800278a <MAX32664_Begin+0xfc>

	GPIO_InitTypeDef conf = {0};
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]
	conf.Pin = handle->_resetLine->pin;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	889b      	ldrh	r3, [r3, #4]
 80026c8:	60bb      	str	r3, [r7, #8]
	conf.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	60fb      	str	r3, [r7, #12]
	conf.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
	conf.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(handle->_resetLine->port, &conf);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f107 0208 	add.w	r2, r7, #8
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 fc18 	bl	8004f18 <HAL_GPIO_Init>

	conf.Pin = handle->_mfioLine->pin;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ec:	889b      	ldrh	r3, [r3, #4]
 80026ee:	60bb      	str	r3, [r7, #8]
	conf.Mode = GPIO_MODE_OUTPUT_PP;
 80026f0:	2301      	movs	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
	conf.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
	conf.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(handle->_mfioLine->port, &conf);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f107 0208 	add.w	r2, r7, #8
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f002 fc05 	bl	8004f18 <HAL_GPIO_Init>

	HAL_GPIO_WriteLine(handle->_mfioLine, GPIO_PIN_SET);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	889b      	ldrh	r3, [r3, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	4619      	mov	r1, r3
 800271e:	f002 fd7f 	bl	8005220 <HAL_GPIO_WritePin>
	HAL_GPIO_WriteLine(handle->_resetLine, GPIO_PIN_RESET);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	889b      	ldrh	r3, [r3, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	4619      	mov	r1, r3
 8002732:	f002 fd75 	bl	8005220 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002736:	200a      	movs	r0, #10
 8002738:	f001 f9aa 	bl	8003a90 <HAL_Delay>
	HAL_GPIO_WriteLine(handle->_resetLine, GPIO_PIN_SET);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	889b      	ldrh	r3, [r3, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	4619      	mov	r1, r3
 800274c:	f002 fd68 	bl	8005220 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8002750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002754:	f001 f99c 	bl	8003a90 <HAL_Delay>

	conf.Pin = handle->_mfioLine->pin;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275c:	889b      	ldrh	r3, [r3, #4]
 800275e:	60bb      	str	r3, [r7, #8]
	conf.Mode = GPIO_MODE_INPUT;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
	conf.Pull = GPIO_PULLUP;
 8002764:	2301      	movs	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(handle->_mfioLine->port, &conf);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f107 0208 	add.w	r2, r7, #8
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fbcf 	bl	8004f18 <HAL_GPIO_Init>
	// To be used as an interrupt later

	uint8_t responseByte = MAX32664_ReadByte(handle, READ_DEVICE_MODE, 0x00); // 0x00 only possible Index Byte.
 800277a:	2200      	movs	r2, #0
 800277c:	2102      	movs	r1, #2
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa81 	bl	8002c86 <MAX32664_ReadByte>
 8002784:	4603      	mov	r3, r0
 8002786:	77fb      	strb	r3, [r7, #31]

	return responseByte;
 8002788:	7ffb      	ldrb	r3, [r7, #31]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <MAX32664_ReadSensorHubStatus>:
	return responseByte;
}

// Family Byte: HUB_STATUS (0x00), Index Byte: 0x00, No Write Byte.
// The following function checks the status of the FIFO.
uint8_t MAX32664_ReadSensorHubStatus(MAX32664_Handle *handle) {
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]

	uint8_t status = MAX32664_ReadByte(handle, 0x00, 0x00); // Just family and index byte.
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa71 	bl	8002c86 <MAX32664_ReadByte>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]
	return status; // Will return 0x00
 80027a8:	7bfb      	ldrb	r3, [r7, #15]

}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <MAX32664_ConfigBpm>:

// This function sets very basic settings to get sensor and biometric data.
// The biometric data includes data about heartrate, the confidence
// level, SpO2 levels, and whether the sensor has detected a finger or not.
uint8_t MAX32664_ConfigBpm(MAX32664_Handle *handle, uint8_t mode) {
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	70fb      	strb	r3, [r7, #3]

	uint8_t statusChauf = SB_ERR_UNKNOWN;
 80027be:	23ff      	movs	r3, #255	; 0xff
 80027c0:	73fb      	strb	r3, [r7, #15]
	if (mode == MODE_ONE || mode == MODE_TWO) {
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d004      	beq.n	80027d2 <MAX32664_ConfigBpm+0x20>
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d001      	beq.n	80027d2 <MAX32664_ConfigBpm+0x20>
	} else
		return INCORR_PARAM;
 80027ce:	23ee      	movs	r3, #238	; 0xee
 80027d0:	e048      	b.n	8002864 <MAX32664_ConfigBpm+0xb2>

	statusChauf = MAX32664_SetOutputMode(handle, ALGO_DATA); // Just the data
 80027d2:	2102      	movs	r1, #2
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f95b 	bl	8002a90 <MAX32664_SetOutputMode>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
	if (statusChauf != SB_SUCCESS) {
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MAX32664_ConfigBpm+0x36>
		return statusChauf;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	e03d      	b.n	8002864 <MAX32664_ConfigBpm+0xb2>
	}

	statusChauf = MAX32664_SetFifoThreshold(handle, 0x01); // One sample before interrupt is fired.
 80027e8:	2101      	movs	r1, #1
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f96d 	bl	8002aca <MAX32664_SetFifoThreshold>
 80027f0:	4603      	mov	r3, r0
 80027f2:	73fb      	strb	r3, [r7, #15]
	if (statusChauf != SB_SUCCESS) {
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MAX32664_ConfigBpm+0x4c>
		return statusChauf;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	e032      	b.n	8002864 <MAX32664_ConfigBpm+0xb2>
	}

	statusChauf = MAX32664_AgcAlgoControl(handle, ENABLE); // One sample before interrupt is fired.
 80027fe:	2101      	movs	r1, #1
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f99b 	bl	8002b3c <MAX32664_AgcAlgoControl>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
	if (statusChauf != SB_SUCCESS) {
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MAX32664_ConfigBpm+0x62>
		return statusChauf;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	e027      	b.n	8002864 <MAX32664_ConfigBpm+0xb2>
	}

	statusChauf = MAX32664_Max30101Control(handle, ENABLE);
 8002814:	2101      	movs	r1, #1
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f91a 	bl	8002a50 <MAX32664_Max30101Control>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
	if (statusChauf != SB_SUCCESS) {
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MAX32664_ConfigBpm+0x78>
		return statusChauf;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	e01c      	b.n	8002864 <MAX32664_ConfigBpm+0xb2>
	}

	statusChauf = MAX32664_MaximFastAlgoControl(handle, mode);
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f9a4 	bl	8002b7c <MAX32664_MaximFastAlgoControl>
 8002834:	4603      	mov	r3, r0
 8002836:	73fb      	strb	r3, [r7, #15]
	if (statusChauf != SB_SUCCESS) {
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MAX32664_ConfigBpm+0x90>
		return statusChauf;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	e010      	b.n	8002864 <MAX32664_ConfigBpm+0xb2>
	}

	handle->_userSelectedMode = mode;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	handle->_sampleRate = MAX32664_ReadAlgoSamples(handle);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f965 	bl	8002b1a <MAX32664_ReadAlgoSamples>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	HAL_Delay(1000);
 800285a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800285e:	f001 f917 	bl	8003a90 <HAL_Delay>
	return SB_SUCCESS;
 8002862:	2300      	movs	r3, #0

}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <MAX32664_ReadBpm>:
// This function takes the 8 bytes from the FIFO buffer related to the wrist
// heart rate algortihm: heart rate (uint16_t), confidence (uint8_t) , SpO2 (uint16_t),
// and the finger detected status (uint8_t). Note that the the algorithm is stated as
// "wrist" though the sensor only works with the finger. The data is loaded
// into the whrmFifo and returned.
bioData MAX32664_ReadBpm(MAX32664_Handle *handle) {
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	b08c      	sub	sp, #48	; 0x30
 8002870:	af02      	add	r7, sp, #8
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]

	bioData libBpm;
	uint8_t statusChauf; // The status chauffeur captures return values.

	statusChauf = MAX32664_ReadSensorHubStatus(handle);
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f7ff ff8b 	bl	8002792 <MAX32664_ReadSensorHubStatus>
 800287c:	4603      	mov	r3, r0
 800287e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (statusChauf == 1) { // Communication Error
 8002882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002886:	2b01      	cmp	r3, #1
 8002888:	d110      	bne.n	80028ac <MAX32664_ReadBpm+0x40>
		libBpm.heartRate = 100;
 800288a:	2364      	movs	r3, #100	; 0x64
 800288c:	82bb      	strh	r3, [r7, #20]
		libBpm.confidence = 100;
 800288e:	2364      	movs	r3, #100	; 0x64
 8002890:	75bb      	strb	r3, [r7, #22]
		libBpm.oxygen = 100;
 8002892:	2364      	movs	r3, #100	; 0x64
 8002894:	833b      	strh	r3, [r7, #24]
		return libBpm;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	461d      	mov	r5, r3
 800289a:	f107 040c 	add.w	r4, r7, #12
 800289e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028aa:	e0c9      	b.n	8002a40 <MAX32664_ReadBpm+0x1d4>
	}

	MAX32664_NumSamplesOutFifo(handle);
 80028ac:	6838      	ldr	r0, [r7, #0]
 80028ae:	f000 f924 	bl	8002afa <MAX32664_NumSamplesOutFifo>

	if (handle->_userSelectedMode == MODE_ONE) {
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d140      	bne.n	800293e <MAX32664_ReadBpm+0xd2>

		MAX32664_ReadFillArray(handle, READ_DATA_OUTPUT, READ_DATA,
				MAXFAST_ARRAY_SIZE, handle->bpmArr);
 80028bc:	683b      	ldr	r3, [r7, #0]
		MAX32664_ReadFillArray(handle, READ_DATA_OUTPUT, READ_DATA,
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2306      	movs	r3, #6
 80028c2:	2201      	movs	r2, #1
 80028c4:	2112      	movs	r1, #18
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f000 fa4d 	bl	8002d66 <MAX32664_ReadFillArray>

		// Heart Rate formatting
		libBpm.heartRate = (uint16_t) (handle->bpmArr[0]) << 8;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	82bb      	strh	r3, [r7, #20]
		libBpm.heartRate |= (handle->bpmArr[1]);
 80028d8:	8aba      	ldrh	r2, [r7, #20]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4313      	orrs	r3, r2
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	82bb      	strh	r3, [r7, #20]
		libBpm.heartRate /= 10;
 80028e6:	8abb      	ldrh	r3, [r7, #20]
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <MAX32664_ReadBpm+0x1dc>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	08db      	lsrs	r3, r3, #3
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	82bb      	strh	r3, [r7, #20]

		// Confidence formatting
		libBpm.confidence = handle->bpmArr[2];
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	789b      	ldrb	r3, [r3, #2]
 80028f8:	75bb      	strb	r3, [r7, #22]

		//Blood oxygen level formatting
		libBpm.oxygen = (uint16_t) (handle->bpmArr[3]) << 8;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	78db      	ldrb	r3, [r3, #3]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b29b      	uxth	r3, r3
 8002904:	833b      	strh	r3, [r7, #24]
		libBpm.oxygen |= handle->bpmArr[4];
 8002906:	8b3a      	ldrh	r2, [r7, #24]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	791b      	ldrb	r3, [r3, #4]
 800290c:	b29b      	uxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	833b      	strh	r3, [r7, #24]
		libBpm.oxygen /= 10;
 8002914:	8b3b      	ldrh	r3, [r7, #24]
 8002916:	4a4c      	ldr	r2, [pc, #304]	; (8002a48 <MAX32664_ReadBpm+0x1dc>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	08db      	lsrs	r3, r3, #3
 800291e:	b29b      	uxth	r3, r3
 8002920:	833b      	strh	r3, [r7, #24]

		//"Machine State" - has a finger been detected?
		libBpm.status = handle->bpmArr[5];
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	795b      	ldrb	r3, [r3, #5]
 8002926:	76bb      	strb	r3, [r7, #26]

		return libBpm;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	461d      	mov	r5, r3
 800292c:	f107 040c 	add.w	r4, r7, #12
 8002930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002938:	e885 0003 	stmia.w	r5, {r0, r1}
 800293c:	e080      	b.n	8002a40 <MAX32664_ReadBpm+0x1d4>
	}

	else if (handle->_userSelectedMode == MODE_TWO) {
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002944:	2b02      	cmp	r3, #2
 8002946:	d16b      	bne.n	8002a20 <MAX32664_ReadBpm+0x1b4>
		MAX32664_ReadFillArray(handle, READ_DATA_OUTPUT, READ_DATA,
		MAXFAST_ARRAY_SIZE + MAXFAST_EXTENDED_DATA, handle->bpmArrTwo);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	3306      	adds	r3, #6
		MAX32664_ReadFillArray(handle, READ_DATA_OUTPUT, READ_DATA,
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	230b      	movs	r3, #11
 8002950:	2201      	movs	r2, #1
 8002952:	2112      	movs	r1, #18
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	f000 fa06 	bl	8002d66 <MAX32664_ReadFillArray>

		// Heart Rate formatting
		libBpm.heartRate = (uint16_t) (handle->bpmArrTwo[0]) << 8;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	799b      	ldrb	r3, [r3, #6]
 800295e:	b29b      	uxth	r3, r3
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	b29b      	uxth	r3, r3
 8002964:	82bb      	strh	r3, [r7, #20]
		libBpm.heartRate |= (handle->bpmArrTwo[1]);
 8002966:	8aba      	ldrh	r2, [r7, #20]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	79db      	ldrb	r3, [r3, #7]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	82bb      	strh	r3, [r7, #20]
		libBpm.heartRate /= 10;
 8002974:	8abb      	ldrh	r3, [r7, #20]
 8002976:	4a34      	ldr	r2, [pc, #208]	; (8002a48 <MAX32664_ReadBpm+0x1dc>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	b29b      	uxth	r3, r3
 8002980:	82bb      	strh	r3, [r7, #20]

		// Confidence formatting
		libBpm.confidence = handle->bpmArrTwo[2];
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	7a1b      	ldrb	r3, [r3, #8]
 8002986:	75bb      	strb	r3, [r7, #22]

		//Blood oxygen level formatting
		libBpm.oxygen = (uint16_t) (handle->bpmArrTwo[3]) << 8;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	7a5b      	ldrb	r3, [r3, #9]
 800298c:	b29b      	uxth	r3, r3
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	b29b      	uxth	r3, r3
 8002992:	833b      	strh	r3, [r7, #24]
		libBpm.oxygen |= handle->bpmArrTwo[4];
 8002994:	8b3a      	ldrh	r2, [r7, #24]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	7a9b      	ldrb	r3, [r3, #10]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	833b      	strh	r3, [r7, #24]
		libBpm.oxygen /= 10.0;
 80029a2:	8b3b      	ldrh	r3, [r7, #24]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fdc5 	bl	8000534 <__aeabi_i2d>
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <MAX32664_ReadBpm+0x1e0>)
 80029b0:	f7fd ff54 	bl	800085c <__aeabi_ddiv>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f8fc 	bl	8000bb8 <__aeabi_d2uiz>
 80029c0:	4603      	mov	r3, r0
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	833b      	strh	r3, [r7, #24]

		//"Machine State" - has a finger been detected?
		libBpm.status = handle->bpmArrTwo[5];
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7adb      	ldrb	r3, [r3, #11]
 80029ca:	76bb      	strb	r3, [r7, #26]

		//Sp02 r Value formatting
		uint16_t tempVal = (uint16_t) (handle->bpmArrTwo[6]) << 8;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	7b1b      	ldrb	r3, [r3, #12]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		tempVal |= handle->bpmArrTwo[7];
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	7b5b      	ldrb	r3, [r3, #13]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029de:	4313      	orrs	r3, r2
 80029e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		libBpm.rValue = tempVal;
 80029e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ec:	edc7 7a07 	vstr	s15, [r7, #28]
		libBpm.rValue /= 10.0;
 80029f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80029f4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80029f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029fc:	edc7 7a07 	vstr	s15, [r7, #28]

		//Extended Machine State formatting
		libBpm.extStatus = handle->bpmArrTwo[8];
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	7b9b      	ldrb	r3, [r3, #14]
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	f887 3020 	strb.w	r3, [r7, #32]

		// There are two additional bytes of data that were requested but that
		// have not been implemented in firmware 10.1 so will not be saved to
		// user's data.
		return libBpm;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	461d      	mov	r5, r3
 8002a0e:	f107 040c 	add.w	r4, r7, #12
 8002a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a1e:	e00f      	b.n	8002a40 <MAX32664_ReadBpm+0x1d4>
	}

	else {
		libBpm.heartRate = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	82bb      	strh	r3, [r7, #20]
		libBpm.confidence = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	75bb      	strb	r3, [r7, #22]
		libBpm.oxygen = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	833b      	strh	r3, [r7, #24]
		return libBpm;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	461d      	mov	r5, r3
 8002a30:	f107 040c 	add.w	r4, r7, #12
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3c:	e885 0003 	stmia.w	r5, {r0, r1}
	}

}
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bdb0      	pop	{r4, r5, r7, pc}
 8002a48:	cccccccd 	.word	0xcccccccd
 8002a4c:	40240000 	.word	0x40240000

08002a50 <MAX32664_Max30101Control>:
}

// Family Byte: ENABLE_SENSOR (0x44), Index Byte: ENABLE_MAX30101 (0x03), Write
// Byte: senSwitch  (parameter - 0x00 or 0x01).
// This function enables the MAX30101.
uint8_t MAX32664_Max30101Control(MAX32664_Handle *handle, uint8_t senSwitch) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]

	if (senSwitch == 0 || senSwitch == 1) {
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <MAX32664_Max30101Control+0x1c>
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d001      	beq.n	8002a6c <MAX32664_Max30101Control+0x1c>
	} else
		return INCORR_PARAM;
 8002a68:	23ee      	movs	r3, #238	; 0xee
 8002a6a:	e00d      	b.n	8002a88 <MAX32664_Max30101Control+0x38>

	// Check that communication was successful, not that the sensor is enabled.
	uint8_t statusByte = MAX32664_EnableWrite(handle, ENABLE_SENSOR,
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	2144      	movs	r1, #68	; 0x44
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8a5 	bl	8002bc2 <MAX32664_EnableWrite>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73fb      	strb	r3, [r7, #15]
			ENABLE_MAX30101, senSwitch);
	if (statusByte != SB_SUCCESS)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MAX32664_Max30101Control+0x36>
		return statusByte;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	e000      	b.n	8002a88 <MAX32664_Max30101Control+0x38>
	else
		return SB_SUCCESS;
 8002a86:	2300      	movs	r3, #0

}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <MAX32664_SetOutputMode>:

}

// Family Byte: OUTPUT_MODE (0x10), Index Byte: SET_FORMAT (0x00),
// Write Byte : outputType (Parameter values in OUTPUT_MODE_WRITE_BYTE)
uint8_t MAX32664_SetOutputMode(MAX32664_Handle *handle, uint8_t outputType) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]

	if (outputType > SENSOR_ALGO_COUNTER) // Bytes between 0x00 and 0x07
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	2b07      	cmp	r3, #7
 8002aa0:	d901      	bls.n	8002aa6 <MAX32664_SetOutputMode+0x16>
		return INCORR_PARAM;
 8002aa2:	23ee      	movs	r3, #238	; 0xee
 8002aa4:	e00d      	b.n	8002ac2 <MAX32664_SetOutputMode+0x32>

	// Check that communication was successful, not that the IC is outputting
	// correct format.
	uint8_t statusByte = MAX32664_WriteByte(handle, OUTPUT_MODE, SET_FORMAT,
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2110      	movs	r1, #16
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f8b9 	bl	8002c24 <MAX32664_WriteByte>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73fb      	strb	r3, [r7, #15]
			outputType);
	if (statusByte != SB_SUCCESS)
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MAX32664_SetOutputMode+0x30>
		return statusByte;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	e000      	b.n	8002ac2 <MAX32664_SetOutputMode+0x32>
	else
		return SB_SUCCESS;
 8002ac0:	2300      	movs	r3, #0

}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <MAX32664_SetFifoThreshold>:
// Family Byte: OUTPUT_MODE(0x10), Index Byte: WRITE_SET_THRESHOLD (0x01), Write byte: intThres
// (parameter - value betwen 0 and 0xFF).
// This function changes the threshold for the FIFO interrupt bit/pin. The
// interrupt pin is the MFIO pin which is set to INPUT after IC initialization
// (begin).
uint8_t MAX32664_SetFifoThreshold(MAX32664_Handle *handle, uint8_t intThresh) {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]

	// Checks that there was succesful communcation, not that the threshold was
	// set correctly.
	uint8_t statusByte = MAX32664_WriteByte(handle, OUTPUT_MODE,
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2110      	movs	r1, #16
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8a1 	bl	8002c24 <MAX32664_WriteByte>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]
			WRITE_SET_THRESHOLD, intThresh);
	if (statusByte != SB_SUCCESS)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MAX32664_SetFifoThreshold+0x26>
		return statusByte;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	e000      	b.n	8002af2 <MAX32664_SetFifoThreshold+0x28>
	else
		return SB_SUCCESS;
 8002af0:	2300      	movs	r3, #0

}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <MAX32664_NumSamplesOutFifo>:

// Family Byte: READ_DATA_OUTPUT (0x12), Index Byte: NUM_SAMPLES (0x00), Write
// Byte: NONE
// This function returns the number of samples available in the FIFO.
uint8_t MAX32664_NumSamplesOutFifo(MAX32664_Handle *handle) {
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]

	uint8_t sampAvail = MAX32664_ReadByte(handle, READ_DATA_OUTPUT,
 8002b02:	2200      	movs	r2, #0
 8002b04:	2112      	movs	r1, #18
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8bd 	bl	8002c86 <MAX32664_ReadByte>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]
			NUM_SAMPLES);
	return sampAvail;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]

}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <MAX32664_ReadAlgoSamples>:

// Family Byte: READ_ALGORITHM_CONFIG (0x51), Index Byte:
// READ_AGC_NUM_SAMPLES (0x00), Write Byte: READ_AGC_NUM_SAMPLES_ID (0x03)
// This function changes the number of samples that are averaged.
// It takes a paramater of zero to 255.
uint8_t MAX32664_ReadAlgoSamples(MAX32664_Handle *handle) {
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]

	uint8_t samples = MAX32664_ReadByteWrite(handle, READ_ALGORITHM_CONFIG,
 8002b22:	2303      	movs	r3, #3
 8002b24:	2200      	movs	r2, #0
 8002b26:	2151      	movs	r1, #81	; 0x51
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f8e2 	bl	8002cf2 <MAX32664_ReadByteWrite>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]
			READ_AGC_NUM_SAMPLES, READ_AGC_NUM_SAMPLES_ID);
	return samples;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]

}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <MAX32664_AgcAlgoControl>:
}

// Family Byte: ENABLE_ALGORITHM (0x52), Index Byte:
// ENABLE_AGC_ALGO (0x00)
// This function enables (one) or disables (zero) the automatic gain control algorithm.
uint8_t MAX32664_AgcAlgoControl(MAX32664_Handle *handle, uint8_t enable) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]

	if (enable == 0 || enable == 1) {
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <MAX32664_AgcAlgoControl+0x1c>
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d001      	beq.n	8002b58 <MAX32664_AgcAlgoControl+0x1c>
	} else
		return INCORR_PARAM;
 8002b54:	23ee      	movs	r3, #238	; 0xee
 8002b56:	e00d      	b.n	8002b74 <MAX32664_AgcAlgoControl+0x38>

	uint8_t statusByte = MAX32664_EnableWrite(handle, ENABLE_ALGORITHM,
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2152      	movs	r1, #82	; 0x52
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f82f 	bl	8002bc2 <MAX32664_EnableWrite>
 8002b64:	4603      	mov	r3, r0
 8002b66:	73fb      	strb	r3, [r7, #15]
			ENABLE_AGC_ALGO, enable);
	if (statusByte != SB_SUCCESS)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MAX32664_AgcAlgoControl+0x36>
		return statusByte;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	e000      	b.n	8002b74 <MAX32664_AgcAlgoControl+0x38>
	else
		return SB_SUCCESS;
 8002b72:	2300      	movs	r3, #0

}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <MAX32664_MaximFastAlgoControl>:

// Family Byte: ENABLE_ALGORITHM (0x52), Index Byte:
// ENABLE_WHRM_ALGO (0x02)
// This function enables (one) or disables (zero) the wrist heart rate monitor
// algorithm.
uint8_t MAX32664_MaximFastAlgoControl(MAX32664_Handle *handle, uint8_t mode) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]

	if (mode == 0 || mode == 1 || mode == 2) {
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <MAX32664_MaximFastAlgoControl+0x22>
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d004      	beq.n	8002b9e <MAX32664_MaximFastAlgoControl+0x22>
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d001      	beq.n	8002b9e <MAX32664_MaximFastAlgoControl+0x22>
	} else
		return INCORR_PARAM;
 8002b9a:	23ee      	movs	r3, #238	; 0xee
 8002b9c:	e00d      	b.n	8002bba <MAX32664_MaximFastAlgoControl+0x3e>

	uint8_t statusByte = MAX32664_EnableWrite(handle, ENABLE_ALGORITHM,
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	2152      	movs	r1, #82	; 0x52
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f80c 	bl	8002bc2 <MAX32664_EnableWrite>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]
			ENABLE_WHRM_ALGO, mode);
	if (statusByte != SB_SUCCESS)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MAX32664_MaximFastAlgoControl+0x3c>
		return statusByte;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	e000      	b.n	8002bba <MAX32664_MaximFastAlgoControl+0x3e>
	else
		return SB_SUCCESS;
 8002bb8:	2300      	movs	r3, #0

}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <MAX32664_EnableWrite>:
//-------------------Private Functions-----------------------

// This function uses the given family, index, and write byte to enable
// the given sensor.
uint8_t MAX32664_EnableWrite(MAX32664_Handle *handle, uint8_t _familyByte,
		uint8_t _indexByte, uint8_t _enableByte) {
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af02      	add	r7, sp, #8
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	4608      	mov	r0, r1
 8002bcc:	4611      	mov	r1, r2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	70fb      	strb	r3, [r7, #3]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70bb      	strb	r3, [r7, #2]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	707b      	strb	r3, [r7, #1]
	uint8_t wbuffer[3] = {_familyByte, _indexByte, _enableByte};
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	733b      	strb	r3, [r7, #12]
 8002be0:	78bb      	ldrb	r3, [r7, #2]
 8002be2:	737b      	strb	r3, [r7, #13]
 8002be4:	787b      	ldrb	r3, [r7, #1]
 8002be6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(handle->hi2c, WRITE_ADDRESS, wbuffer, 3, HAL_MAX_DELAY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002bec:	f107 020c 	add.w	r2, r7, #12
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	21aa      	movs	r1, #170	; 0xaa
 8002bfa:	f002 fc87 	bl	800550c <HAL_I2C_Master_Transmit>
	HAL_Delay(ENABLE_CMD_DELAY);
 8002bfe:	20fa      	movs	r0, #250	; 0xfa
 8002c00:	f000 ff46 	bl	8003a90 <HAL_Delay>
	 delay(ENABLE_CMD_DELAY);
	 */

	// Status Byte, success or no? 0x00 is a successful transmit
	uint8_t buffer[1];
	HAL_I2C_Master_Receive(handle->hi2c, READ_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002c08:	f107 0208 	add.w	r2, r7, #8
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2301      	movs	r3, #1
 8002c14:	21ab      	movs	r1, #171	; 0xab
 8002c16:	f002 fd77 	bl	8005708 <HAL_I2C_Master_Receive>
	/*
	 _i2cPort->requestFrom(_address, static_cast<uint8_t>(1));
	 uint8_t statusByte = _i2cPort->read();
	 */
	return buffer[0];
 8002c1a:	7a3b      	ldrb	r3, [r7, #8]

}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <MAX32664_WriteByte>:
// with the MAX32664 which in turn communicates with downward sensors. There
// are two steps demonstrated in this function. First a write to the MCU
// indicating what you want to do, a delay, and then a read to confirm positive
// transmission.
uint8_t MAX32664_WriteByte(MAX32664_Handle *handle, uint8_t _familyByte,
		uint8_t _indexByte, uint8_t _writeByte) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	70fb      	strb	r3, [r7, #3]
 8002c36:	460b      	mov	r3, r1
 8002c38:	70bb      	strb	r3, [r7, #2]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	707b      	strb	r3, [r7, #1]

	uint8_t wbuffer[3] = {_familyByte, _indexByte, _writeByte };
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	733b      	strb	r3, [r7, #12]
 8002c42:	78bb      	ldrb	r3, [r7, #2]
 8002c44:	737b      	strb	r3, [r7, #13]
 8002c46:	787b      	ldrb	r3, [r7, #1]
 8002c48:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(handle->hi2c, WRITE_ADDRESS, wbuffer, 3, HAL_MAX_DELAY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002c4e:	f107 020c 	add.w	r2, r7, #12
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2303      	movs	r3, #3
 8002c5a:	21aa      	movs	r1, #170	; 0xaa
 8002c5c:	f002 fc56 	bl	800550c <HAL_I2C_Master_Transmit>
	HAL_Delay(CMD_DELAY);
 8002c60:	2014      	movs	r0, #20
 8002c62:	f000 ff15 	bl	8003a90 <HAL_Delay>

	// Status Byte, success or no? 0x00 is a successful transmit
	uint8_t buffer[1];
	HAL_I2C_Master_Receive(handle->hi2c, READ_ADDRESS, buffer,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002c6a:	f107 0208 	add.w	r2, r7, #8
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2301      	movs	r3, #1
 8002c76:	21ab      	movs	r1, #171	; 0xab
 8002c78:	f002 fd46 	bl	8005708 <HAL_I2C_Master_Receive>
			1, HAL_MAX_DELAY);
	return buffer[0];
 8002c7c:	7a3b      	ldrb	r3, [r7, #8]

}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <MAX32664_ReadByte>:
}
// This function handles all read commands or stated another way, all information
// requests. It starts a request by writing the family byte an index byte, and
// then delays 60 microseconds, during which the MAX32664 retrieves the requested
// information. An I-squared-C request is then issued, and the information is read.
uint8_t MAX32664_ReadByte(MAX32664_Handle *handle, uint8_t _familyByte, uint8_t _indexByte) {
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af02      	add	r7, sp, #8
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	70fb      	strb	r3, [r7, #3]
 8002c92:	4613      	mov	r3, r2
 8002c94:	70bb      	strb	r3, [r7, #2]

	uint8_t returnByte;
	uint8_t statusByte;

	uint8_t wbuffer[2] = {_familyByte, _indexByte };
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	733b      	strb	r3, [r7, #12]
 8002c9a:	78bb      	ldrb	r3, [r7, #2]
 8002c9c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(handle->hi2c, WRITE_ADDRESS, wbuffer, 2, HAL_MAX_DELAY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002ca2:	f107 020c 	add.w	r2, r7, #12
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2302      	movs	r3, #2
 8002cae:	21aa      	movs	r1, #170	; 0xaa
 8002cb0:	f002 fc2c 	bl	800550c <HAL_I2C_Master_Transmit>

	HAL_Delay(CMD_DELAY);
 8002cb4:	2014      	movs	r0, #20
 8002cb6:	f000 feeb 	bl	8003a90 <HAL_Delay>

	uint8_t buffer[2] = {0x0A, 0x0B};
 8002cba:	f640 330a 	movw	r3, #2826	; 0xb0a
 8002cbe:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Receive(handle->hi2c, READ_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002cc4:	f107 0208 	add.w	r2, r7, #8
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	21ab      	movs	r1, #171	; 0xab
 8002cd2:	f002 fd19 	bl	8005708 <HAL_I2C_Master_Receive>
	statusByte = buffer[0];
 8002cd6:	7a3b      	ldrb	r3, [r7, #8]
 8002cd8:	73fb      	strb	r3, [r7, #15]

	if (statusByte != SB_SUCCESS) // SB_SUCCESS (0x00) - how do I know its
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MAX32664_ReadByte+0x5e>
		return statusByte; // Return the error, see: READ_STATUS_BYTE_VALUE
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	e002      	b.n	8002cea <MAX32664_ReadByte+0x64>

	returnByte = buffer[1];
 8002ce4:	7a7b      	ldrb	r3, [r7, #9]
 8002ce6:	73bb      	strb	r3, [r7, #14]
	return returnByte; // If good then return the actual byte.
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]

}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <MAX32664_ReadByteWrite>:
// Write Byte as a parameter. It starts a request by writing the family byte, index byte, and
// write byte to the MAX32664 and then delays 60 microseconds, during which
// the MAX32664 retrieves the requested information. A I-squared-C request is
// then issued, and the information is read.
uint8_t MAX32664_ReadByteWrite(MAX32664_Handle *handle, uint8_t _familyByte,
		uint8_t _indexByte, uint8_t _writeByte) {
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af02      	add	r7, sp, #8
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4603      	mov	r3, r0
 8002d02:	70fb      	strb	r3, [r7, #3]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70bb      	strb	r3, [r7, #2]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	707b      	strb	r3, [r7, #1]

	uint8_t returnByte;
	uint8_t statusByte;

	uint8_t wbuffer[3] = {_familyByte, _indexByte, _writeByte };
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	743b      	strb	r3, [r7, #16]
 8002d10:	78bb      	ldrb	r3, [r7, #2]
 8002d12:	747b      	strb	r3, [r7, #17]
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit(handle->hi2c, WRITE_ADDRESS, wbuffer, 3,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002d1c:	f107 0210 	add.w	r2, r7, #16
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2303      	movs	r3, #3
 8002d28:	21aa      	movs	r1, #170	; 0xaa
 8002d2a:	f002 fbef 	bl	800550c <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);

	HAL_Delay(CMD_DELAY);
 8002d2e:	2014      	movs	r0, #20
 8002d30:	f000 feae 	bl	8003a90 <HAL_Delay>

	uint8_t buffer[2];
	HAL_I2C_Master_Receive(handle->hi2c, READ_ADDRESS, buffer, 2,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002d38:	f107 020c 	add.w	r2, r7, #12
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2302      	movs	r3, #2
 8002d44:	21ab      	movs	r1, #171	; 0xab
 8002d46:	f002 fcdf 	bl	8005708 <HAL_I2C_Master_Receive>
			HAL_MAX_DELAY);
	statusByte = buffer[0];
 8002d4a:	7b3b      	ldrb	r3, [r7, #12]
 8002d4c:	75fb      	strb	r3, [r7, #23]
	if (statusByte) // SB_SUCCESS (0x00)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MAX32664_ReadByteWrite+0x66>
		return statusByte; // Return the error, see: READ_STATUS_BYTE_VALUE
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	e002      	b.n	8002d5e <MAX32664_ReadByteWrite+0x6c>

	returnByte = buffer[1];
 8002d58:	7b7b      	ldrb	r3, [r7, #13]
 8002d5a:	75bb      	strb	r3, [r7, #22]
	return returnByte; // If good then return the actual byte.
 8002d5c:	7dbb      	ldrb	r3, [r7, #22]

}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <MAX32664_ReadFillArray>:

uint8_t MAX32664_ReadFillArray(MAX32664_Handle *handle, uint8_t _familyByte,
		uint8_t _indexByte, uint8_t _numOfReads, uint8_t array[]) {
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b088      	sub	sp, #32
 8002d6a:	af02      	add	r7, sp, #8
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	4608      	mov	r0, r1
 8002d70:	4611      	mov	r1, r2
 8002d72:	461a      	mov	r2, r3
 8002d74:	4603      	mov	r3, r0
 8002d76:	70fb      	strb	r3, [r7, #3]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70bb      	strb	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]

	uint8_t statusByte;

	uint8_t wbuffer[2] = { _familyByte, _indexByte };
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	723b      	strb	r3, [r7, #8]
 8002d84:	78bb      	ldrb	r3, [r7, #2]
 8002d86:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(handle->hi2c, WRITE_ADDRESS, wbuffer, 2,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002d8c:	f107 0208 	add.w	r2, r7, #8
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2302      	movs	r3, #2
 8002d98:	21aa      	movs	r1, #170	; 0xaa
 8002d9a:	f002 fbb7 	bl	800550c <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);
	HAL_Delay(CMD_DELAY);
 8002d9e:	2014      	movs	r0, #20
 8002da0:	f000 fe76 	bl	8003a90 <HAL_Delay>

	uint8_t *buffer = (uint8_t*) malloc(_numOfReads + 1);
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	3301      	adds	r3, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f006 fcc1 	bl	8009730 <malloc>
 8002dae:	4603      	mov	r3, r0
 8002db0:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Receive(handle->hi2c, READ_ADDRESS, buffer,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002db6:	787b      	ldrb	r3, [r7, #1]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc2:	9200      	str	r2, [sp, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	21ab      	movs	r1, #171	; 0xab
 8002dc8:	f002 fc9e 	bl	8005708 <HAL_I2C_Master_Receive>
			_numOfReads + 1, HAL_MAX_DELAY);
	statusByte = buffer[0];
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	72fb      	strb	r3, [r7, #11]
	if (statusByte) { // SB_SUCCESS: 0x00
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <MAX32664_ReadFillArray+0x94>
		for (size_t i = 0; i < _numOfReads; i++) {
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e007      	b.n	8002dee <MAX32664_ReadFillArray+0x88>
			array[i] = 0;
 8002dde:	6a3a      	ldr	r2, [r7, #32]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	4413      	add	r3, r2
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < _numOfReads; i++) {
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	787b      	ldrb	r3, [r7, #1]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d3f3      	bcc.n	8002dde <MAX32664_ReadFillArray+0x78>
		}
		return statusByte;
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	e016      	b.n	8002e28 <MAX32664_ReadFillArray+0xc2>
	}

	for (size_t i = 0; i < _numOfReads; i++) {
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	e00b      	b.n	8002e18 <MAX32664_ReadFillArray+0xb2>
		array[i] = buffer[i + 1];
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	3301      	adds	r3, #1
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	441a      	add	r2, r3
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	440b      	add	r3, r1
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < _numOfReads; i++) {
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	3301      	adds	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3ef      	bcc.n	8002e00 <MAX32664_ReadFillArray+0x9a>
	}

	free(buffer);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f006 fc8d 	bl	8009740 <free>
	return statusByte;
 8002e26:	7afb      	ldrb	r3, [r7, #11]

}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	2301      	movs	r3, #1
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2301      	movs	r3, #1
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2178      	movs	r1, #120	; 0x78
 8002e5e:	4803      	ldr	r0, [pc, #12]	; (8002e6c <ssd1306_WriteCommand+0x2c>)
 8002e60:	f002 fe78 	bl	8005b54 <HAL_I2C_Mem_Write>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000360 	.word	0x20000360

08002e70 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af04      	add	r7, sp, #16
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e82:	9202      	str	r2, [sp, #8]
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	2178      	movs	r1, #120	; 0x78
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <ssd1306_WriteData+0x30>)
 8002e92:	f002 fe5f 	bl	8005b54 <HAL_I2C_Mem_Write>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000360 	.word	0x20000360

08002ea4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002ea8:	f7ff ffc2 	bl	8002e30 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002eac:	2064      	movs	r0, #100	; 0x64
 8002eae:	f000 fdef 	bl	8003a90 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f000 f9da 	bl	800326c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002eb8:	2020      	movs	r0, #32
 8002eba:	f7ff ffc1 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7ff ffbe 	bl	8002e40 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ec4:	20b0      	movs	r0, #176	; 0xb0
 8002ec6:	f7ff ffbb 	bl	8002e40 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002eca:	20c8      	movs	r0, #200	; 0xc8
 8002ecc:	f7ff ffb8 	bl	8002e40 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7ff ffb5 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002ed6:	2010      	movs	r0, #16
 8002ed8:	f7ff ffb2 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002edc:	2040      	movs	r0, #64	; 0x40
 8002ede:	f7ff ffaf 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002ee2:	20ff      	movs	r0, #255	; 0xff
 8002ee4:	f000 f9ae 	bl	8003244 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002ee8:	20a1      	movs	r0, #161	; 0xa1
 8002eea:	f7ff ffa9 	bl	8002e40 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002eee:	20a6      	movs	r0, #166	; 0xa6
 8002ef0:	f7ff ffa6 	bl	8002e40 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002ef4:	20a8      	movs	r0, #168	; 0xa8
 8002ef6:	f7ff ffa3 	bl	8002e40 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002efa:	203f      	movs	r0, #63	; 0x3f
 8002efc:	f7ff ffa0 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f00:	20a4      	movs	r0, #164	; 0xa4
 8002f02:	f7ff ff9d 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002f06:	20d3      	movs	r0, #211	; 0xd3
 8002f08:	f7ff ff9a 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7ff ff97 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f12:	20d5      	movs	r0, #213	; 0xd5
 8002f14:	f7ff ff94 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002f18:	20f0      	movs	r0, #240	; 0xf0
 8002f1a:	f7ff ff91 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002f1e:	20d9      	movs	r0, #217	; 0xd9
 8002f20:	f7ff ff8e 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002f24:	2022      	movs	r0, #34	; 0x22
 8002f26:	f7ff ff8b 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002f2a:	20da      	movs	r0, #218	; 0xda
 8002f2c:	f7ff ff88 	bl	8002e40 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002f30:	2012      	movs	r0, #18
 8002f32:	f7ff ff85 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002f36:	20db      	movs	r0, #219	; 0xdb
 8002f38:	f7ff ff82 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002f3c:	2020      	movs	r0, #32
 8002f3e:	f7ff ff7f 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002f42:	208d      	movs	r0, #141	; 0x8d
 8002f44:	f7ff ff7c 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002f48:	2014      	movs	r0, #20
 8002f4a:	f7ff ff79 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 f98c 	bl	800326c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f000 f80f 	bl	8002f78 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002f5a:	f000 f831 	bl	8002fc0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <ssd1306_Init+0xd0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <ssd1306_Init+0xd0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002f6a:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <ssd1306_Init+0xd0>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	711a      	strb	r2, [r3, #4]
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	200007fc 	.word	0x200007fc

08002f78 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e00d      	b.n	8002fa4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <ssd1306_Fill+0x1a>
 8002f8e:	2100      	movs	r1, #0
 8002f90:	e000      	b.n	8002f94 <ssd1306_Fill+0x1c>
 8002f92:	21ff      	movs	r1, #255	; 0xff
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <ssd1306_Fill+0x44>)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d3ed      	bcc.n	8002f88 <ssd1306_Fill+0x10>
    }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	200003fc 	.word	0x200003fc

08002fc0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	e016      	b.n	8002ffa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	3b50      	subs	r3, #80	; 0x50
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff34 	bl	8002e40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7ff ff31 	bl	8002e40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002fde:	2010      	movs	r0, #16
 8002fe0:	f7ff ff2e 	bl	8002e40 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	01db      	lsls	r3, r3, #7
 8002fe8:	4a08      	ldr	r2, [pc, #32]	; (800300c <ssd1306_UpdateScreen+0x4c>)
 8002fea:	4413      	add	r3, r2
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff3e 	bl	8002e70 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	71fb      	strb	r3, [r7, #7]
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b07      	cmp	r3, #7
 8002ffe:	d9e5      	bls.n	8002fcc <ssd1306_UpdateScreen+0xc>
    }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200003fc 	.word	0x200003fc

08003010 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	460b      	mov	r3, r1
 800301c:	71bb      	strb	r3, [r7, #6]
 800301e:	4613      	mov	r3, r2
 8003020:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db3d      	blt.n	80030a6 <ssd1306_DrawPixel+0x96>
 800302a:	79bb      	ldrb	r3, [r7, #6]
 800302c:	2b3f      	cmp	r3, #63	; 0x3f
 800302e:	d83a      	bhi.n	80030a6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003030:	797b      	ldrb	r3, [r7, #5]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d11a      	bne.n	800306c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003036:	79fa      	ldrb	r2, [r7, #7]
 8003038:	79bb      	ldrb	r3, [r7, #6]
 800303a:	08db      	lsrs	r3, r3, #3
 800303c:	b2d8      	uxtb	r0, r3
 800303e:	4603      	mov	r3, r0
 8003040:	01db      	lsls	r3, r3, #7
 8003042:	4413      	add	r3, r2
 8003044:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <ssd1306_DrawPixel+0xa4>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	b25a      	sxtb	r2, r3
 800304a:	79bb      	ldrb	r3, [r7, #6]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	b25b      	sxtb	r3, r3
 8003058:	4313      	orrs	r3, r2
 800305a:	b259      	sxtb	r1, r3
 800305c:	79fa      	ldrb	r2, [r7, #7]
 800305e:	4603      	mov	r3, r0
 8003060:	01db      	lsls	r3, r3, #7
 8003062:	4413      	add	r3, r2
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <ssd1306_DrawPixel+0xa4>)
 8003068:	54d1      	strb	r1, [r2, r3]
 800306a:	e01d      	b.n	80030a8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800306c:	79fa      	ldrb	r2, [r7, #7]
 800306e:	79bb      	ldrb	r3, [r7, #6]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	b2d8      	uxtb	r0, r3
 8003074:	4603      	mov	r3, r0
 8003076:	01db      	lsls	r3, r3, #7
 8003078:	4413      	add	r3, r2
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <ssd1306_DrawPixel+0xa4>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	b25a      	sxtb	r2, r3
 8003080:	79bb      	ldrb	r3, [r7, #6]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	2101      	movs	r1, #1
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	b25b      	sxtb	r3, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	b25b      	sxtb	r3, r3
 8003092:	4013      	ands	r3, r2
 8003094:	b259      	sxtb	r1, r3
 8003096:	79fa      	ldrb	r2, [r7, #7]
 8003098:	4603      	mov	r3, r0
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	4413      	add	r3, r2
 800309e:	b2c9      	uxtb	r1, r1
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <ssd1306_DrawPixel+0xa4>)
 80030a2:	54d1      	strb	r1, [r2, r3]
 80030a4:	e000      	b.n	80030a8 <ssd1306_DrawPixel+0x98>
        return;
 80030a6:	bf00      	nop
    }
}
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	200003fc 	.word	0x200003fc

080030b8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4604      	mov	r4, r0
 80030c0:	1d38      	adds	r0, r7, #4
 80030c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80030c6:	461a      	mov	r2, r3
 80030c8:	4623      	mov	r3, r4
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	4613      	mov	r3, r2
 80030ce:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b1f      	cmp	r3, #31
 80030d4:	d902      	bls.n	80030dc <ssd1306_WriteChar+0x24>
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b7e      	cmp	r3, #126	; 0x7e
 80030da:	d901      	bls.n	80030e0 <ssd1306_WriteChar+0x28>
        return 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	e06d      	b.n	80031bc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80030e0:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <ssd1306_WriteChar+0x10c>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	793b      	ldrb	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	2b80      	cmp	r3, #128	; 0x80
 80030ec:	dc06      	bgt.n	80030fc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80030ee:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <ssd1306_WriteChar+0x10c>)
 80030f0:	885b      	ldrh	r3, [r3, #2]
 80030f2:	461a      	mov	r2, r3
 80030f4:	797b      	ldrb	r3, [r7, #5]
 80030f6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	dd01      	ble.n	8003100 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e05d      	b.n	80031bc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e04c      	b.n	80031a0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	3b20      	subs	r3, #32
 800310c:	7979      	ldrb	r1, [r7, #5]
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4619      	mov	r1, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	440b      	add	r3, r1
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	e034      	b.n	8003190 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d012      	beq.n	800315c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003136:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <ssd1306_WriteChar+0x10c>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4413      	add	r3, r2
 8003142:	b2d8      	uxtb	r0, r3
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <ssd1306_WriteChar+0x10c>)
 8003146:	885b      	ldrh	r3, [r3, #2]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4413      	add	r3, r2
 8003150:	b2db      	uxtb	r3, r3
 8003152:	7bba      	ldrb	r2, [r7, #14]
 8003154:	4619      	mov	r1, r3
 8003156:	f7ff ff5b 	bl	8003010 <ssd1306_DrawPixel>
 800315a:	e016      	b.n	800318a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <ssd1306_WriteChar+0x10c>)
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	4413      	add	r3, r2
 8003168:	b2d8      	uxtb	r0, r3
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <ssd1306_WriteChar+0x10c>)
 800316c:	885b      	ldrh	r3, [r3, #2]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	4413      	add	r3, r2
 8003176:	b2d9      	uxtb	r1, r3
 8003178:	7bbb      	ldrb	r3, [r7, #14]
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	f7ff ff43 	bl	8003010 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3301      	adds	r3, #1
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	793b      	ldrb	r3, [r7, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4293      	cmp	r3, r2
 8003198:	d3c5      	bcc.n	8003126 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	797b      	ldrb	r3, [r7, #5]
 80031a2:	461a      	mov	r2, r3
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d3ad      	bcc.n	8003106 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <ssd1306_WriteChar+0x10c>)
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	793b      	ldrb	r3, [r7, #4]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <ssd1306_WriteChar+0x10c>)
 80031b8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3724      	adds	r7, #36	; 0x24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	200007fc 	.word	0x200007fc

080031c8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	1d38      	adds	r0, r7, #4
 80031d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80031d6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80031d8:	e012      	b.n	8003200 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	7818      	ldrb	r0, [r3, #0]
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	1d3a      	adds	r2, r7, #4
 80031e2:	ca06      	ldmia	r2, {r1, r2}
 80031e4:	f7ff ff68 	bl	80030b8 <ssd1306_WriteChar>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d002      	beq.n	80031fa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	e008      	b.n	800320c <ssd1306_WriteString+0x44>
        }
        str++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3301      	adds	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e8      	bne.n	80031da <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	781b      	ldrb	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	460a      	mov	r2, r1
 800321e:	71fb      	strb	r3, [r7, #7]
 8003220:	4613      	mov	r3, r2
 8003222:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	b29a      	uxth	r2, r3
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <ssd1306_SetCursor+0x2c>)
 800322a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800322c:	79bb      	ldrb	r3, [r7, #6]
 800322e:	b29a      	uxth	r2, r3
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <ssd1306_SetCursor+0x2c>)
 8003232:	805a      	strh	r2, [r3, #2]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	200007fc 	.word	0x200007fc

08003244 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800324e:	2381      	movs	r3, #129	; 0x81
 8003250:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fdf3 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fdef 	bl	8002e40 <ssd1306_WriteCommand>
}
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800327c:	23af      	movs	r3, #175	; 0xaf
 800327e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <ssd1306_SetDisplayOn+0x38>)
 8003282:	2201      	movs	r2, #1
 8003284:	715a      	strb	r2, [r3, #5]
 8003286:	e004      	b.n	8003292 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003288:	23ae      	movs	r3, #174	; 0xae
 800328a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <ssd1306_SetDisplayOn+0x38>)
 800328e:	2200      	movs	r2, #0
 8003290:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fdd3 	bl	8002e40 <ssd1306_WriteCommand>
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200007fc 	.word	0x200007fc

080032a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_MspInit+0x4c>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a0f      	ldr	r2, [pc, #60]	; (80032f4 <HAL_MspInit+0x4c>)
 80032b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_MspInit+0x4c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_MspInit+0x4c>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <HAL_MspInit+0x4c>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_MspInit+0x4c>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80032e6:	2006      	movs	r0, #6
 80032e8:	f001 f9d2 	bl	8004690 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800

080032f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032fc:	e7fe      	b.n	80032fc <NMI_Handler+0x4>

080032fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003302:	e7fe      	b.n	8003302 <HardFault_Handler+0x4>

08003304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <MemManage_Handler+0x4>

0800330a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330e:	e7fe      	b.n	800330e <BusFault_Handler+0x4>

08003310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003314:	e7fe      	b.n	8003314 <UsageFault_Handler+0x4>

08003316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003344:	f000 fb84 	bl	8003a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}

0800334c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003350:	4802      	ldr	r0, [pc, #8]	; (800335c <ADC_IRQHandler+0x10>)
 8003352:	f000 fc04 	bl	8003b5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000210 	.word	0x20000210

08003360 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003364:	4802      	ldr	r0, [pc, #8]	; (8003370 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003366:	f004 fb9d 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000898 	.word	0x20000898

08003374 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003378:	4802      	ldr	r0, [pc, #8]	; (8003384 <TIM2_IRQHandler+0x10>)
 800337a:	f004 fb93 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000808 	.word	0x20000808

08003388 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <TIM3_IRQHandler+0x10>)
 800338e:	f004 fb89 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000850 	.word	0x20000850

0800339c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <USART2_IRQHandler+0x10>)
 80033a2:	f005 fa67 	bl	8008874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200008e0 	.word	0x200008e0

080033b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80033b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033b8:	f001 ff4c 	bl	8005254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <DMA2_Stream0_IRQHandler+0x10>)
 80033c6:	f001 fb3d 	bl	8004a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000258 	.word	0x20000258

080033d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return 1;
 80033d8:	2301      	movs	r3, #1
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_kill>:

int _kill(int pid, int sig)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033ee:	f006 f975 	bl	80096dc <__errno>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2216      	movs	r2, #22
 80033f6:	601a      	str	r2, [r3, #0]
  return -1;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_exit>:

void _exit (int status)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ffe7 	bl	80033e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003416:	e7fe      	b.n	8003416 <_exit+0x12>

08003418 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e00a      	b.n	8003440 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800342a:	f3af 8000 	nop.w
 800342e:	4601      	mov	r1, r0
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	60ba      	str	r2, [r7, #8]
 8003436:	b2ca      	uxtb	r2, r1
 8003438:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	3301      	adds	r3, #1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	dbf0      	blt.n	800342a <_read+0x12>
  }

  return len;
 8003448:	687b      	ldr	r3, [r7, #4]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e009      	b.n	8003478 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	60ba      	str	r2, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3301      	adds	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	dbf1      	blt.n	8003464 <_write+0x12>
  }
  return len;
 8003480:	687b      	ldr	r3, [r7, #4]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <_close>:

int _close(int file)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034b2:	605a      	str	r2, [r3, #4]
  return 0;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <_isatty>:

int _isatty(int file)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <_sbrk+0x5c>)
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <_sbrk+0x60>)
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <_sbrk+0x64>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <_sbrk+0x64>)
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <_sbrk+0x68>)
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <_sbrk+0x64>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d207      	bcs.n	8003534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003524:	f006 f8da 	bl	80096dc <__errno>
 8003528:	4603      	mov	r3, r0
 800352a:	220c      	movs	r2, #12
 800352c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e009      	b.n	8003548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <_sbrk+0x64>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <_sbrk+0x64>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	4a05      	ldr	r2, [pc, #20]	; (8003558 <_sbrk+0x64>)
 8003544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003546:	68fb      	ldr	r3, [r7, #12]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20018000 	.word	0x20018000
 8003554:	00000400 	.word	0x00000400
 8003558:	20000804 	.word	0x20000804
 800355c:	20000938 	.word	0x20000938

08003560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <SystemInit+0x20>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	4a05      	ldr	r2, [pc, #20]	; (8003580 <SystemInit+0x20>)
 800356c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800358a:	f107 0320 	add.w	r3, r7, #32
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	615a      	str	r2, [r3, #20]
 80035a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <MX_TIM2_Init+0xb0>)
 80035a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <MX_TIM2_Init+0xb0>)
 80035b0:	229f      	movs	r2, #159	; 0x9f
 80035b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <MX_TIM2_Init+0xb0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <MX_TIM2_Init+0xb0>)
 80035bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <MX_TIM2_Init+0xb0>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <MX_TIM2_Init+0xb0>)
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80035ce:	4819      	ldr	r0, [pc, #100]	; (8003634 <MX_TIM2_Init+0xb0>)
 80035d0:	f004 f904 	bl	80077dc <HAL_TIM_PWM_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80035da:	f7ff f835 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035e6:	f107 0320 	add.w	r3, r7, #32
 80035ea:	4619      	mov	r1, r3
 80035ec:	4811      	ldr	r0, [pc, #68]	; (8003634 <MX_TIM2_Init+0xb0>)
 80035ee:	f004 ffdf 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80035f8:	f7ff f826 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035fc:	2360      	movs	r3, #96	; 0x60
 80035fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8003600:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	2204      	movs	r2, #4
 8003612:	4619      	mov	r1, r3
 8003614:	4807      	ldr	r0, [pc, #28]	; (8003634 <MX_TIM2_Init+0xb0>)
 8003616:	f004 fb4d 	bl	8007cb4 <HAL_TIM_PWM_ConfigChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003620:	f7ff f812 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003624:	4803      	ldr	r0, [pc, #12]	; (8003634 <MX_TIM2_Init+0xb0>)
 8003626:	f000 f8e5 	bl	80037f4 <HAL_TIM_MspPostInit>

}
 800362a:	bf00      	nop
 800362c:	3728      	adds	r7, #40	; 0x28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000808 	.word	0x20000808

08003638 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800364c:	463b      	mov	r3, r7
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <MX_TIM3_Init+0x94>)
 8003656:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <MX_TIM3_Init+0x98>)
 8003658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <MX_TIM3_Init+0x94>)
 800365c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8003660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <MX_TIM3_Init+0x94>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <MX_TIM3_Init+0x94>)
 800366a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800366e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <MX_TIM3_Init+0x94>)
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <MX_TIM3_Init+0x94>)
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800367c:	4813      	ldr	r0, [pc, #76]	; (80036cc <MX_TIM3_Init+0x94>)
 800367e:	f003 fffb 	bl	8007678 <HAL_TIM_Base_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003688:	f7fe ffde 	bl	8002648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800368c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003692:	f107 0308 	add.w	r3, r7, #8
 8003696:	4619      	mov	r1, r3
 8003698:	480c      	ldr	r0, [pc, #48]	; (80036cc <MX_TIM3_Init+0x94>)
 800369a:	f004 fbcd 	bl	8007e38 <HAL_TIM_ConfigClockSource>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80036a4:	f7fe ffd0 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036a8:	2320      	movs	r3, #32
 80036aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036b0:	463b      	mov	r3, r7
 80036b2:	4619      	mov	r1, r3
 80036b4:	4805      	ldr	r0, [pc, #20]	; (80036cc <MX_TIM3_Init+0x94>)
 80036b6:	f004 ff7b 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80036c0:	f7fe ffc2 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80036c4:	bf00      	nop
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000850 	.word	0x20000850
 80036d0:	40000400 	.word	0x40000400

080036d4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <MX_TIM10_Init+0x40>)
 80036da:	4a0f      	ldr	r2, [pc, #60]	; (8003718 <MX_TIM10_Init+0x44>)
 80036dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 159;
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <MX_TIM10_Init+0x40>)
 80036e0:	229f      	movs	r2, #159	; 0x9f
 80036e2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <MX_TIM10_Init+0x40>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <MX_TIM10_Init+0x40>)
 80036ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036f0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <MX_TIM10_Init+0x40>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <MX_TIM10_Init+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80036fe:	4805      	ldr	r0, [pc, #20]	; (8003714 <MX_TIM10_Init+0x40>)
 8003700:	f003 ffba 	bl	8007678 <HAL_TIM_Base_Init>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800370a:	f7fe ff9d 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000898 	.word	0x20000898
 8003718:	40014400 	.word	0x40014400

0800371c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372c:	d115      	bne.n	800375a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_TIM_PWM_MspInit+0x48>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <HAL_TIM_PWM_MspInit+0x48>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_TIM_PWM_MspInit+0x48>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2100      	movs	r1, #0
 800374e:	201c      	movs	r0, #28
 8003750:	f000 ffa9 	bl	80046a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003754:	201c      	movs	r0, #28
 8003756:	f000 ffc2 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800

08003768 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <HAL_TIM_Base_MspInit+0x80>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d116      	bne.n	80037a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_TIM_Base_MspInit+0x84>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <HAL_TIM_Base_MspInit+0x84>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <HAL_TIM_Base_MspInit+0x84>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	2100      	movs	r1, #0
 800379a:	201d      	movs	r0, #29
 800379c:	f000 ff83 	bl	80046a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037a0:	201d      	movs	r0, #29
 80037a2:	f000 ff9c 	bl	80046de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80037a6:	e01a      	b.n	80037de <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a10      	ldr	r2, [pc, #64]	; (80037f0 <HAL_TIM_Base_MspInit+0x88>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d115      	bne.n	80037de <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_TIM_Base_MspInit+0x84>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <HAL_TIM_Base_MspInit+0x84>)
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_TIM_Base_MspInit+0x84>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2101      	movs	r1, #1
 80037d2:	2019      	movs	r0, #25
 80037d4:	f000 ff67 	bl	80046a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037d8:	2019      	movs	r0, #25
 80037da:	f000 ff80 	bl	80046de <HAL_NVIC_EnableIRQ>
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40014400 	.word	0x40014400

080037f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d11d      	bne.n	8003852 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_TIM_MspPostInit+0x68>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a0f      	ldr	r2, [pc, #60]	; (800385c <HAL_TIM_MspPostInit+0x68>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_TIM_MspPostInit+0x68>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003832:	2302      	movs	r3, #2
 8003834:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003836:	2302      	movs	r3, #2
 8003838:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003842:	2301      	movs	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	f107 030c 	add.w	r3, r7, #12
 800384a:	4619      	mov	r1, r3
 800384c:	4804      	ldr	r0, [pc, #16]	; (8003860 <HAL_TIM_MspPostInit+0x6c>)
 800384e:	f001 fb63 	bl	8004f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003852:	bf00      	nop
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	40020000 	.word	0x40020000

08003864 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <MX_USART2_UART_Init+0x50>)
 800386c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 8003870:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 800387e:	2200      	movs	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 800388a:	220c      	movs	r2, #12
 800388c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800389a:	4805      	ldr	r0, [pc, #20]	; (80038b0 <MX_USART2_UART_Init+0x4c>)
 800389c:	f004 ff0a 	bl	80086b4 <HAL_UART_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80038a6:	f7fe fecf 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200008e0 	.word	0x200008e0
 80038b4:	40004400 	.word	0x40004400

080038b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_UART_MspInit+0x94>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d133      	bne.n	8003942 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <HAL_UART_MspInit+0x98>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <HAL_UART_MspInit+0x98>)
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_UART_MspInit+0x98>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_UART_MspInit+0x98>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a14      	ldr	r2, [pc, #80]	; (8003950 <HAL_UART_MspInit+0x98>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_UART_MspInit+0x98>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003912:	230c      	movs	r3, #12
 8003914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391e:	2303      	movs	r3, #3
 8003920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003922:	2307      	movs	r3, #7
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4619      	mov	r1, r3
 800392c:	4809      	ldr	r0, [pc, #36]	; (8003954 <HAL_UART_MspInit+0x9c>)
 800392e:	f001 faf3 	bl	8004f18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2101      	movs	r1, #1
 8003936:	2026      	movs	r0, #38	; 0x26
 8003938:	f000 feb5 	bl	80046a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800393c:	2026      	movs	r0, #38	; 0x26
 800393e:	f000 fece 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003942:	bf00      	nop
 8003944:	3728      	adds	r7, #40	; 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40004400 	.word	0x40004400
 8003950:	40023800 	.word	0x40023800
 8003954:	40020000 	.word	0x40020000

08003958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800395c:	480d      	ldr	r0, [pc, #52]	; (8003994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800395e:	490e      	ldr	r1, [pc, #56]	; (8003998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003964:	e002      	b.n	800396c <LoopCopyDataInit>

08003966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396a:	3304      	adds	r3, #4

0800396c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800396c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800396e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003970:	d3f9      	bcc.n	8003966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003972:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003974:	4c0b      	ldr	r4, [pc, #44]	; (80039a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003978:	e001      	b.n	800397e <LoopFillZerobss>

0800397a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800397c:	3204      	adds	r2, #4

0800397e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800397e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003980:	d3fb      	bcc.n	800397a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003982:	f7ff fded 	bl	8003560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003986:	f005 feaf 	bl	80096e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800398a:	f7fd fffb 	bl	8001984 <main>
  bx  lr    
 800398e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003990:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003998:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800399c:	0800d6dc 	.word	0x0800d6dc
  ldr r2, =_sbss
 80039a0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80039a4:	20000938 	.word	0x20000938

080039a8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039a8:	e7fe      	b.n	80039a8 <DMA1_Stream0_IRQHandler>
	...

080039ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <HAL_Init+0x40>)
 80039b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_Init+0x40>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <HAL_Init+0x40>)
 80039c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c8:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_Init+0x40>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a07      	ldr	r2, [pc, #28]	; (80039ec <HAL_Init+0x40>)
 80039ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d4:	2003      	movs	r0, #3
 80039d6:	f000 fe5b 	bl	8004690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039da:	2000      	movs	r0, #0
 80039dc:	f000 f808 	bl	80039f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039e0:	f7ff fc62 	bl	80032a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023c00 	.word	0x40023c00

080039f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_InitTick+0x54>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_InitTick+0x58>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fe73 	bl	80046fa <HAL_SYSTICK_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00e      	b.n	8003a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d80a      	bhi.n	8003a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a24:	2200      	movs	r2, #0
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2c:	f000 fe3b 	bl	80046a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a30:	4a06      	ldr	r2, [pc, #24]	; (8003a4c <HAL_InitTick+0x5c>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000018 	.word	0x20000018
 8003a48:	20000020 	.word	0x20000020
 8003a4c:	2000001c 	.word	0x2000001c

08003a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_IncTick+0x20>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_IncTick+0x24>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_IncTick+0x24>)
 8003a62:	6013      	str	r3, [r2, #0]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000020 	.word	0x20000020
 8003a74:	20000924 	.word	0x20000924

08003a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_GetTick+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000924 	.word	0x20000924

08003a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7ff ffee 	bl	8003a78 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d005      	beq.n	8003ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <HAL_Delay+0x44>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ab6:	bf00      	nop
 8003ab8:	f7ff ffde 	bl	8003a78 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d8f7      	bhi.n	8003ab8 <HAL_Delay+0x28>
  {
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000020 	.word	0x20000020

08003ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e033      	b.n	8003b56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd faa2 	bl	8001040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d118      	bne.n	8003b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b1e:	f023 0302 	bic.w	r3, r3, #2
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fb58 	bl	80041e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
 8003b46:	e001      	b.n	8003b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d049      	beq.n	8003c28 <HAL_ADC_IRQHandler+0xca>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d046      	beq.n	8003c28 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d105      	bne.n	8003bb2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d12b      	bne.n	8003c18 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d127      	bne.n	8003c18 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d119      	bne.n	8003c18 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0220 	bic.w	r2, r2, #32
 8003bf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0201 	orr.w	r2, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fe f975 	bl	8001f08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f06f 0212 	mvn.w	r2, #18
 8003c26:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d057      	beq.n	8003cee <HAL_ADC_IRQHandler+0x190>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d054      	beq.n	8003cee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d139      	bne.n	8003cde <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d006      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d12b      	bne.n	8003cde <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d124      	bne.n	8003cde <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11d      	bne.n	8003cde <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d119      	bne.n	8003cde <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d105      	bne.n	8003cde <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fbfc 	bl	80044dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 020c 	mvn.w	r2, #12
 8003cec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d017      	beq.n	8003d34 <HAL_ADC_IRQHandler+0x1d6>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10d      	bne.n	8003d34 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f925 	bl	8003f74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0201 	mvn.w	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d42:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d015      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x218>
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f043 0202 	orr.w	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0220 	mvn.w	r2, #32
 8003d64:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f90e 	bl	8003f88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0220 	mvn.w	r2, #32
 8003d74:	601a      	str	r2, [r3, #0]
  }
}
 8003d76:	bf00      	nop
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_Start_DMA+0x1e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0ce      	b.n	8003f3c <HAL_ADC_Start_DMA+0x1bc>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d018      	beq.n	8003de6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dc4:	4b5f      	ldr	r3, [pc, #380]	; (8003f44 <HAL_ADC_Start_DMA+0x1c4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5f      	ldr	r2, [pc, #380]	; (8003f48 <HAL_ADC_Start_DMA+0x1c8>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0c9a      	lsrs	r2, r3, #18
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003dd8:	e002      	b.n	8003de0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f9      	bne.n	8003dda <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df4:	d107      	bne.n	8003e06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 8086 	bne.w	8003f22 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	d106      	bne.n	8003e64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	f023 0206 	bic.w	r2, r3, #6
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44
 8003e62:	e002      	b.n	8003e6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e72:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <HAL_ADC_Start_DMA+0x1cc>)
 8003e74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	4a35      	ldr	r2, [pc, #212]	; (8003f50 <HAL_ADC_Start_DMA+0x1d0>)
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	4a34      	ldr	r2, [pc, #208]	; (8003f54 <HAL_ADC_Start_DMA+0x1d4>)
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <HAL_ADC_Start_DMA+0x1d8>)
 8003e8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ea6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	334c      	adds	r3, #76	; 0x4c
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f000 fcd2 	bl	8004870 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d129      	bne.n	8003f3a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	e020      	b.n	8003f3a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <HAL_ADC_Start_DMA+0x1dc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d11b      	bne.n	8003f3a <HAL_ADC_Start_DMA+0x1ba>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d114      	bne.n	8003f3a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	e00b      	b.n	8003f3a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f043 0210 	orr.w	r2, r3, #16
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f043 0201 	orr.w	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000018 	.word	0x20000018
 8003f48:	431bde83 	.word	0x431bde83
 8003f4c:	40012300 	.word	0x40012300
 8003f50:	080043d9 	.word	0x080043d9
 8003f54:	08004493 	.word	0x08004493
 8003f58:	080044af 	.word	0x080044af
 8003f5c:	40012000 	.word	0x40012000

08003f60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x1c>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e105      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x228>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b09      	cmp	r3, #9
 8003fc6:	d925      	bls.n	8004014 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68d9      	ldr	r1, [r3, #12]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	3b1e      	subs	r3, #30
 8003fde:	2207      	movs	r2, #7
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	400a      	ands	r2, r1
 8003fec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68d9      	ldr	r1, [r3, #12]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	4618      	mov	r0, r3
 8004000:	4603      	mov	r3, r0
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4403      	add	r3, r0
 8004006:	3b1e      	subs	r3, #30
 8004008:	409a      	lsls	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e022      	b.n	800405a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6919      	ldr	r1, [r3, #16]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	2207      	movs	r2, #7
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43da      	mvns	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	400a      	ands	r2, r1
 8004036:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6919      	ldr	r1, [r3, #16]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	4618      	mov	r0, r3
 800404a:	4603      	mov	r3, r0
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4403      	add	r3, r0
 8004050:	409a      	lsls	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b06      	cmp	r3, #6
 8004060:	d824      	bhi.n	80040ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	3b05      	subs	r3, #5
 8004074:	221f      	movs	r2, #31
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43da      	mvns	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	400a      	ands	r2, r1
 8004082:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	4618      	mov	r0, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	3b05      	subs	r3, #5
 800409e:	fa00 f203 	lsl.w	r2, r0, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34
 80040aa:	e04c      	b.n	8004146 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	d824      	bhi.n	80040fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	3b23      	subs	r3, #35	; 0x23
 80040c6:	221f      	movs	r2, #31
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43da      	mvns	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	400a      	ands	r2, r1
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	4618      	mov	r0, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	3b23      	subs	r3, #35	; 0x23
 80040f0:	fa00 f203 	lsl.w	r2, r0, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
 80040fc:	e023      	b.n	8004146 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	3b41      	subs	r3, #65	; 0x41
 8004110:	221f      	movs	r2, #31
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43da      	mvns	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	400a      	ands	r2, r1
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	4618      	mov	r0, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	3b41      	subs	r3, #65	; 0x41
 800413a:	fa00 f203 	lsl.w	r2, r0, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004146:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <HAL_ADC_ConfigChannel+0x234>)
 8004148:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a21      	ldr	r2, [pc, #132]	; (80041d4 <HAL_ADC_ConfigChannel+0x238>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d109      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x1cc>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b12      	cmp	r3, #18
 800415a:	d105      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <HAL_ADC_ConfigChannel+0x238>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d123      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x21e>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b10      	cmp	r3, #16
 8004178:	d003      	beq.n	8004182 <HAL_ADC_ConfigChannel+0x1e6>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b11      	cmp	r3, #17
 8004180:	d11b      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b10      	cmp	r3, #16
 8004194:	d111      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_ADC_ConfigChannel+0x23c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a10      	ldr	r2, [pc, #64]	; (80041dc <HAL_ADC_ConfigChannel+0x240>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	0c9a      	lsrs	r2, r3, #18
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041ac:	e002      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f9      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40012300 	.word	0x40012300
 80041d4:	40012000 	.word	0x40012000
 80041d8:	20000018 	.word	0x20000018
 80041dc:	431bde83 	.word	0x431bde83

080041e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041e8:	4b79      	ldr	r3, [pc, #484]	; (80043d0 <ADC_Init+0x1f0>)
 80041ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	021a      	lsls	r2, r3, #8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6899      	ldr	r1, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <ADC_Init+0x1f4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d022      	beq.n	80042be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6899      	ldr	r1, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	e00f      	b.n	80042de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0202 	bic.w	r2, r2, #2
 80042ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6899      	ldr	r1, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	7e1b      	ldrb	r3, [r3, #24]
 80042f8:	005a      	lsls	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800432a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	3b01      	subs	r3, #1
 8004338:	035a      	lsls	r2, r3, #13
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	e007      	b.n	8004354 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004352:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	3b01      	subs	r3, #1
 8004370:	051a      	lsls	r2, r3, #20
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004396:	025a      	lsls	r2, r3, #9
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6899      	ldr	r1, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	029a      	lsls	r2, r3, #10
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40012300 	.word	0x40012300
 80043d4:	0f000001 	.word	0x0f000001

080043d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d13c      	bne.n	800446c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d12b      	bne.n	8004464 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004410:	2b00      	cmp	r3, #0
 8004412:	d127      	bne.n	8004464 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800441e:	2b00      	cmp	r3, #0
 8004420:	d006      	beq.n	8004430 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800442c:	2b00      	cmp	r3, #0
 800442e:	d119      	bne.n	8004464 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0220 	bic.w	r2, r2, #32
 800443e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f043 0201 	orr.w	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7fd fd4f 	bl	8001f08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800446a:	e00e      	b.n	800448a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fd85 	bl	8003f88 <HAL_ADC_ErrorCallback>
}
 800447e:	e004      	b.n	800448a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff fd5d 	bl	8003f60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f043 0204 	orr.w	r2, r3, #4
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fd5a 	bl	8003f88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	60d3      	str	r3, [r2, #12]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <__NVIC_GetPriorityGrouping+0x18>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	f003 0307 	and.w	r3, r3, #7
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db0b      	blt.n	800457e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 021f 	and.w	r2, r3, #31
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <__NVIC_EnableIRQ+0x38>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2001      	movs	r0, #1
 8004576:	fa00 f202 	lsl.w	r2, r0, r2
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db0a      	blt.n	80045ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	490c      	ldr	r1, [pc, #48]	; (80045dc <__NVIC_SetPriority+0x4c>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	440b      	add	r3, r1
 80045b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b8:	e00a      	b.n	80045d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4908      	ldr	r1, [pc, #32]	; (80045e0 <__NVIC_SetPriority+0x50>)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	3b04      	subs	r3, #4
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	440b      	add	r3, r1
 80045ce:	761a      	strb	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f1c3 0307 	rsb	r3, r3, #7
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf28      	it	cs
 8004602:	2304      	movcs	r3, #4
 8004604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3304      	adds	r3, #4
 800460a:	2b06      	cmp	r3, #6
 800460c:	d902      	bls.n	8004614 <NVIC_EncodePriority+0x30>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3b03      	subs	r3, #3
 8004612:	e000      	b.n	8004616 <NVIC_EncodePriority+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	401a      	ands	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800462c:	f04f 31ff 	mov.w	r1, #4294967295
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43d9      	mvns	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	4313      	orrs	r3, r2
         );
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	; 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800465c:	d301      	bcc.n	8004662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800465e:	2301      	movs	r3, #1
 8004660:	e00f      	b.n	8004682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <SysTick_Config+0x40>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800466a:	210f      	movs	r1, #15
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	f7ff ff8e 	bl	8004590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <SysTick_Config+0x40>)
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467a:	4b04      	ldr	r3, [pc, #16]	; (800468c <SysTick_Config+0x40>)
 800467c:	2207      	movs	r2, #7
 800467e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	e000e010 	.word	0xe000e010

08004690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff29 	bl	80044f0 <__NVIC_SetPriorityGrouping>
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046b8:	f7ff ff3e 	bl	8004538 <__NVIC_GetPriorityGrouping>
 80046bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	6978      	ldr	r0, [r7, #20]
 80046c4:	f7ff ff8e 	bl	80045e4 <NVIC_EncodePriority>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff5d 	bl	8004590 <__NVIC_SetPriority>
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff31 	bl	8004554 <__NVIC_EnableIRQ>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ffa2 	bl	800464c <SysTick_Config>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004720:	f7ff f9aa 	bl	8003a78 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e099      	b.n	8004864 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004750:	e00f      	b.n	8004772 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004752:	f7ff f991 	bl	8003a78 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b05      	cmp	r3, #5
 800475e:	d908      	bls.n	8004772 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e078      	b.n	8004864 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e8      	bne.n	8004752 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4b38      	ldr	r3, [pc, #224]	; (800486c <HAL_DMA_Init+0x158>)
 800478c:	4013      	ands	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d107      	bne.n	80047dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4313      	orrs	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0307 	bic.w	r3, r3, #7
 80047f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b04      	cmp	r3, #4
 8004804:	d117      	bne.n	8004836 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb01 	bl	8004e20 <DMA_CheckFifoParam>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004832:	2301      	movs	r3, #1
 8004834:	e016      	b.n	8004864 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fab8 	bl	8004db4 <DMA_CalcBaseAndBitshift>
 8004844:	4603      	mov	r3, r0
 8004846:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	223f      	movs	r2, #63	; 0x3f
 800484e:	409a      	lsls	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	f010803f 	.word	0xf010803f

08004870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_DMA_Start_IT+0x26>
 8004892:	2302      	movs	r3, #2
 8004894:	e040      	b.n	8004918 <HAL_DMA_Start_IT+0xa8>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d12f      	bne.n	800490a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fa4a 	bl	8004d58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	223f      	movs	r2, #63	; 0x3f
 80048ca:	409a      	lsls	r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0216 	orr.w	r2, r2, #22
 80048de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	e005      	b.n	8004916 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004912:	2302      	movs	r3, #2
 8004914:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004916:	7dfb      	ldrb	r3, [r7, #23]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800492e:	f7ff f8a3 	bl	8003a78 <HAL_GetTick>
 8004932:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d008      	beq.n	8004952 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e052      	b.n	80049f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0216 	bic.w	r2, r2, #22
 8004960:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004970:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <HAL_DMA_Abort+0x62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0208 	bic.w	r2, r2, #8
 8004990:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a2:	e013      	b.n	80049cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049a4:	f7ff f868 	bl	8003a78 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d90c      	bls.n	80049cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e015      	b.n	80049f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e4      	bne.n	80049a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	223f      	movs	r2, #63	; 0x3f
 80049e0:	409a      	lsls	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d004      	beq.n	8004a1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2280      	movs	r2, #128	; 0x80
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e00c      	b.n	8004a38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2205      	movs	r2, #5
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0201 	bic.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a50:	4b8e      	ldr	r3, [pc, #568]	; (8004c8c <HAL_DMA_IRQHandler+0x248>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a8e      	ldr	r2, [pc, #568]	; (8004c90 <HAL_DMA_IRQHandler+0x24c>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0a9b      	lsrs	r3, r3, #10
 8004a5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6e:	2208      	movs	r2, #8
 8004a70:	409a      	lsls	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01a      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0204 	bic.w	r2, r2, #4
 8004a96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	f043 0201 	orr.w	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d012      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f043 0202 	orr.w	r2, r3, #2
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	2204      	movs	r2, #4
 8004aec:	409a      	lsls	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d012      	beq.n	8004b1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	2204      	movs	r2, #4
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	2210      	movs	r2, #16
 8004b22:	409a      	lsls	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d043      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d03c      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	2210      	movs	r2, #16
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d018      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d024      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
 8004b72:	e01f      	b.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01b      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
 8004b84:	e016      	b.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d107      	bne.n	8004ba4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0208 	bic.w	r2, r2, #8
 8004ba2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	2220      	movs	r2, #32
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 808f 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8087 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2220      	movs	r2, #32
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d136      	bne.n	8004c5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0216 	bic.w	r2, r2, #22
 8004bfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_DMA_IRQHandler+0x1da>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0208 	bic.w	r2, r2, #8
 8004c2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	223f      	movs	r2, #63	; 0x3f
 8004c34:	409a      	lsls	r2, r3
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d07e      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
        }
        return;
 8004c5a:	e079      	b.n	8004d50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01d      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10d      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d031      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
 8004c88:	e02c      	b.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
 8004c8a:	bf00      	nop
 8004c8c:	20000018 	.word	0x20000018
 8004c90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d023      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
 8004ca4:	e01e      	b.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10f      	bne.n	8004cd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0210 	bic.w	r2, r2, #16
 8004cc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d032      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d022      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2205      	movs	r2, #5
 8004cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d307      	bcc.n	8004d2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f2      	bne.n	8004d10 <HAL_DMA_IRQHandler+0x2cc>
 8004d2a:	e000      	b.n	8004d2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
 8004d4e:	e000      	b.n	8004d52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d50:	bf00      	nop
    }
  }
}
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d108      	bne.n	8004d98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d96:	e007      	b.n	8004da8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	3b10      	subs	r3, #16
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <DMA_CalcBaseAndBitshift+0x64>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dce:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <DMA_CalcBaseAndBitshift+0x68>)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d909      	bls.n	8004df6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	659a      	str	r2, [r3, #88]	; 0x58
 8004df4:	e007      	b.n	8004e06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	aaaaaaab 	.word	0xaaaaaaab
 8004e1c:	0800d2ec 	.word	0x0800d2ec

08004e20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11f      	bne.n	8004e7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d856      	bhi.n	8004eee <DMA_CheckFifoParam+0xce>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <DMA_CheckFifoParam+0x28>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e6b 	.word	0x08004e6b
 8004e50:	08004e59 	.word	0x08004e59
 8004e54:	08004eef 	.word	0x08004eef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d046      	beq.n	8004ef2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e68:	e043      	b.n	8004ef2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e72:	d140      	bne.n	8004ef6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e78:	e03d      	b.n	8004ef6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e82:	d121      	bne.n	8004ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d837      	bhi.n	8004efa <DMA_CheckFifoParam+0xda>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <DMA_CheckFifoParam+0x70>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004ea7 	.word	0x08004ea7
 8004e98:	08004ea1 	.word	0x08004ea1
 8004e9c:	08004eb9 	.word	0x08004eb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea4:	e030      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d025      	beq.n	8004efe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb6:	e022      	b.n	8004efe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ec0:	d11f      	bne.n	8004f02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ec6:	e01c      	b.n	8004f02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d903      	bls.n	8004ed6 <DMA_CheckFifoParam+0xb6>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d003      	beq.n	8004edc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ed4:	e018      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eda:	e015      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      break;
 8004eec:	e00b      	b.n	8004f06 <DMA_CheckFifoParam+0xe6>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e00a      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e008      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e006      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
      break;
 8004efa:	bf00      	nop
 8004efc:	e004      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
      break;
 8004efe:	bf00      	nop
 8004f00:	e002      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
      break;
 8004f06:	bf00      	nop
    }
  } 
  
  return status; 
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop

08004f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e159      	b.n	80051e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f34:	2201      	movs	r2, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4013      	ands	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	f040 8148 	bne.w	80051e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d005      	beq.n	8004f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d130      	bne.n	8004fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	2203      	movs	r2, #3
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 0201 	and.w	r2, r3, #1
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d017      	beq.n	8005008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d123      	bne.n	800505c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	08da      	lsrs	r2, r3, #3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3208      	adds	r2, #8
 800501c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	220f      	movs	r2, #15
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4013      	ands	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	08da      	lsrs	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3208      	adds	r2, #8
 8005056:	69b9      	ldr	r1, [r7, #24]
 8005058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	2203      	movs	r2, #3
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	43db      	mvns	r3, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 0203 	and.w	r2, r3, #3
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4313      	orrs	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80a2 	beq.w	80051e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	4b57      	ldr	r3, [pc, #348]	; (8005200 <HAL_GPIO_Init+0x2e8>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	4a56      	ldr	r2, [pc, #344]	; (8005200 <HAL_GPIO_Init+0x2e8>)
 80050a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ac:	6453      	str	r3, [r2, #68]	; 0x44
 80050ae:	4b54      	ldr	r3, [pc, #336]	; (8005200 <HAL_GPIO_Init+0x2e8>)
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ba:	4a52      	ldr	r2, [pc, #328]	; (8005204 <HAL_GPIO_Init+0x2ec>)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	3302      	adds	r3, #2
 80050c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	220f      	movs	r2, #15
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a49      	ldr	r2, [pc, #292]	; (8005208 <HAL_GPIO_Init+0x2f0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d019      	beq.n	800511a <HAL_GPIO_Init+0x202>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a48      	ldr	r2, [pc, #288]	; (800520c <HAL_GPIO_Init+0x2f4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <HAL_GPIO_Init+0x1fe>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a47      	ldr	r2, [pc, #284]	; (8005210 <HAL_GPIO_Init+0x2f8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00d      	beq.n	8005112 <HAL_GPIO_Init+0x1fa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a46      	ldr	r2, [pc, #280]	; (8005214 <HAL_GPIO_Init+0x2fc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <HAL_GPIO_Init+0x1f6>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a45      	ldr	r2, [pc, #276]	; (8005218 <HAL_GPIO_Init+0x300>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d101      	bne.n	800510a <HAL_GPIO_Init+0x1f2>
 8005106:	2304      	movs	r3, #4
 8005108:	e008      	b.n	800511c <HAL_GPIO_Init+0x204>
 800510a:	2307      	movs	r3, #7
 800510c:	e006      	b.n	800511c <HAL_GPIO_Init+0x204>
 800510e:	2303      	movs	r3, #3
 8005110:	e004      	b.n	800511c <HAL_GPIO_Init+0x204>
 8005112:	2302      	movs	r3, #2
 8005114:	e002      	b.n	800511c <HAL_GPIO_Init+0x204>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_GPIO_Init+0x204>
 800511a:	2300      	movs	r3, #0
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	f002 0203 	and.w	r2, r2, #3
 8005122:	0092      	lsls	r2, r2, #2
 8005124:	4093      	lsls	r3, r2
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800512c:	4935      	ldr	r1, [pc, #212]	; (8005204 <HAL_GPIO_Init+0x2ec>)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	089b      	lsrs	r3, r3, #2
 8005132:	3302      	adds	r3, #2
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800513a:	4b38      	ldr	r3, [pc, #224]	; (800521c <HAL_GPIO_Init+0x304>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800515e:	4a2f      	ldr	r2, [pc, #188]	; (800521c <HAL_GPIO_Init+0x304>)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005164:	4b2d      	ldr	r3, [pc, #180]	; (800521c <HAL_GPIO_Init+0x304>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005188:	4a24      	ldr	r2, [pc, #144]	; (800521c <HAL_GPIO_Init+0x304>)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800518e:	4b23      	ldr	r3, [pc, #140]	; (800521c <HAL_GPIO_Init+0x304>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051b2:	4a1a      	ldr	r2, [pc, #104]	; (800521c <HAL_GPIO_Init+0x304>)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b8:	4b18      	ldr	r3, [pc, #96]	; (800521c <HAL_GPIO_Init+0x304>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051dc:	4a0f      	ldr	r2, [pc, #60]	; (800521c <HAL_GPIO_Init+0x304>)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	f67f aea2 	bls.w	8004f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	3724      	adds	r7, #36	; 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	40013800 	.word	0x40013800
 8005208:	40020000 	.word	0x40020000
 800520c:	40020400 	.word	0x40020400
 8005210:	40020800 	.word	0x40020800
 8005214:	40020c00 	.word	0x40020c00
 8005218:	40021000 	.word	0x40021000
 800521c:	40013c00 	.word	0x40013c00

08005220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	807b      	strh	r3, [r7, #2]
 800522c:	4613      	mov	r3, r2
 800522e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005230:	787b      	ldrb	r3, [r7, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005236:	887a      	ldrh	r2, [r7, #2]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800523c:	e003      	b.n	8005246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	041a      	lsls	r2, r3, #16
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	619a      	str	r2, [r3, #24]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800525e:	4b08      	ldr	r3, [pc, #32]	; (8005280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d006      	beq.n	8005278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800526a:	4a05      	ldr	r2, [pc, #20]	; (8005280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fd f99e 	bl	80025b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40013c00 	.word	0x40013c00

08005284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e12b      	b.n	80054ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc fa86 	bl	80017bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	; 0x24
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052e8:	f002 f99e 	bl	8007628 <HAL_RCC_GetPCLK1Freq>
 80052ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4a81      	ldr	r2, [pc, #516]	; (80054f8 <HAL_I2C_Init+0x274>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d807      	bhi.n	8005308 <HAL_I2C_Init+0x84>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a80      	ldr	r2, [pc, #512]	; (80054fc <HAL_I2C_Init+0x278>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	bf94      	ite	ls
 8005300:	2301      	movls	r3, #1
 8005302:	2300      	movhi	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e006      	b.n	8005316 <HAL_I2C_Init+0x92>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a7d      	ldr	r2, [pc, #500]	; (8005500 <HAL_I2C_Init+0x27c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	bf94      	ite	ls
 8005310:	2301      	movls	r3, #1
 8005312:	2300      	movhi	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e0e7      	b.n	80054ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4a78      	ldr	r2, [pc, #480]	; (8005504 <HAL_I2C_Init+0x280>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0c9b      	lsrs	r3, r3, #18
 8005328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a6a      	ldr	r2, [pc, #424]	; (80054f8 <HAL_I2C_Init+0x274>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d802      	bhi.n	8005358 <HAL_I2C_Init+0xd4>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	3301      	adds	r3, #1
 8005356:	e009      	b.n	800536c <HAL_I2C_Init+0xe8>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	4a69      	ldr	r2, [pc, #420]	; (8005508 <HAL_I2C_Init+0x284>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	099b      	lsrs	r3, r3, #6
 800536a:	3301      	adds	r3, #1
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	430b      	orrs	r3, r1
 8005372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800537e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	495c      	ldr	r1, [pc, #368]	; (80054f8 <HAL_I2C_Init+0x274>)
 8005388:	428b      	cmp	r3, r1
 800538a:	d819      	bhi.n	80053c0 <HAL_I2C_Init+0x13c>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1e59      	subs	r1, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	fbb1 f3f3 	udiv	r3, r1, r3
 800539a:	1c59      	adds	r1, r3, #1
 800539c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053a0:	400b      	ands	r3, r1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_I2C_Init+0x138>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1e59      	subs	r1, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80053b4:	3301      	adds	r3, #1
 80053b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ba:	e051      	b.n	8005460 <HAL_I2C_Init+0x1dc>
 80053bc:	2304      	movs	r3, #4
 80053be:	e04f      	b.n	8005460 <HAL_I2C_Init+0x1dc>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d111      	bne.n	80053ec <HAL_I2C_Init+0x168>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1e58      	subs	r0, r3, #1
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6859      	ldr	r1, [r3, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	440b      	add	r3, r1
 80053d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053da:	3301      	adds	r3, #1
 80053dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	e012      	b.n	8005412 <HAL_I2C_Init+0x18e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1e58      	subs	r0, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	0099      	lsls	r1, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005402:	3301      	adds	r3, #1
 8005404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_I2C_Init+0x196>
 8005416:	2301      	movs	r3, #1
 8005418:	e022      	b.n	8005460 <HAL_I2C_Init+0x1dc>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10e      	bne.n	8005440 <HAL_I2C_Init+0x1bc>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1e58      	subs	r0, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6859      	ldr	r1, [r3, #4]
 800542a:	460b      	mov	r3, r1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	440b      	add	r3, r1
 8005430:	fbb0 f3f3 	udiv	r3, r0, r3
 8005434:	3301      	adds	r3, #1
 8005436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543e:	e00f      	b.n	8005460 <HAL_I2C_Init+0x1dc>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1e58      	subs	r0, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	0099      	lsls	r1, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	fbb0 f3f3 	udiv	r3, r0, r3
 8005456:	3301      	adds	r3, #1
 8005458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800545c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	6809      	ldr	r1, [r1, #0]
 8005464:	4313      	orrs	r3, r2
 8005466:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800548e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6911      	ldr	r1, [r2, #16]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68d2      	ldr	r2, [r2, #12]
 800549a:	4311      	orrs	r1, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	430b      	orrs	r3, r1
 80054a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	000186a0 	.word	0x000186a0
 80054fc:	001e847f 	.word	0x001e847f
 8005500:	003d08ff 	.word	0x003d08ff
 8005504:	431bde83 	.word	0x431bde83
 8005508:	10624dd3 	.word	0x10624dd3

0800550c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	461a      	mov	r2, r3
 8005518:	460b      	mov	r3, r1
 800551a:	817b      	strh	r3, [r7, #10]
 800551c:	4613      	mov	r3, r2
 800551e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005520:	f7fe faaa 	bl	8003a78 <HAL_GetTick>
 8005524:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b20      	cmp	r3, #32
 8005530:	f040 80e0 	bne.w	80056f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	2319      	movs	r3, #25
 800553a:	2201      	movs	r2, #1
 800553c:	4970      	ldr	r1, [pc, #448]	; (8005700 <HAL_I2C_Master_Transmit+0x1f4>)
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f001 fa24 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
 800554c:	e0d3      	b.n	80056f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_I2C_Master_Transmit+0x50>
 8005558:	2302      	movs	r3, #2
 800555a:	e0cc      	b.n	80056f6 <HAL_I2C_Master_Transmit+0x1ea>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b01      	cmp	r3, #1
 8005570:	d007      	beq.n	8005582 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005590:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2221      	movs	r2, #33	; 0x21
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2210      	movs	r2, #16
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	893a      	ldrh	r2, [r7, #8]
 80055b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a50      	ldr	r2, [pc, #320]	; (8005704 <HAL_I2C_Master_Transmit+0x1f8>)
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055c4:	8979      	ldrh	r1, [r7, #10]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	6a3a      	ldr	r2, [r7, #32]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 ff10 	bl	80063f0 <I2C_MasterRequestWrite>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e08d      	b.n	80056f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055f0:	e066      	b.n	80056c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	6a39      	ldr	r1, [r7, #32]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f001 fa9e 	bl	8006b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00d      	beq.n	800561e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b04      	cmp	r3, #4
 8005608:	d107      	bne.n	800561a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e06b      	b.n	80056f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d11b      	bne.n	8005694 <HAL_I2C_Master_Transmit+0x188>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	d017      	beq.n	8005694 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	6a39      	ldr	r1, [r7, #32]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f001 fa8e 	bl	8006bba <I2C_WaitOnBTFFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00d      	beq.n	80056c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d107      	bne.n	80056bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e01a      	b.n	80056f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d194      	bne.n	80055f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	e000      	b.n	80056f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
  }
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	00100002 	.word	0x00100002
 8005704:	ffff0000 	.word	0xffff0000

08005708 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08c      	sub	sp, #48	; 0x30
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	461a      	mov	r2, r3
 8005714:	460b      	mov	r3, r1
 8005716:	817b      	strh	r3, [r7, #10]
 8005718:	4613      	mov	r3, r2
 800571a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7fe f9ac 	bl	8003a78 <HAL_GetTick>
 8005720:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b20      	cmp	r3, #32
 800572c:	f040 820b 	bne.w	8005b46 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	2319      	movs	r3, #25
 8005736:	2201      	movs	r2, #1
 8005738:	497c      	ldr	r1, [pc, #496]	; (800592c <HAL_I2C_Master_Receive+0x224>)
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f001 f926 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
 8005748:	e1fe      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_I2C_Master_Receive+0x50>
 8005754:	2302      	movs	r3, #2
 8005756:	e1f7      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d007      	beq.n	800577e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2222      	movs	r2, #34	; 0x22
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2210      	movs	r2, #16
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	893a      	ldrh	r2, [r7, #8]
 80057ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4a5c      	ldr	r2, [pc, #368]	; (8005930 <HAL_I2C_Master_Receive+0x228>)
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057c0:	8979      	ldrh	r1, [r7, #10]
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fe94 	bl	80064f4 <I2C_MasterRequestRead>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e1b8      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d113      	bne.n	8005806 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057de:	2300      	movs	r3, #0
 80057e0:	623b      	str	r3, [r7, #32]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	623b      	str	r3, [r7, #32]
 80057f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e18c      	b.n	8005b20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	2b01      	cmp	r3, #1
 800580c:	d11b      	bne.n	8005846 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e16c      	b.n	8005b20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584a:	2b02      	cmp	r3, #2
 800584c:	d11b      	bne.n	8005886 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800586c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	e14c      	b.n	8005b20 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005894:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80058ac:	e138      	b.n	8005b20 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	f200 80f1 	bhi.w	8005a9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d123      	bne.n	8005908 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f001 f9b9 	bl	8006c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e139      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005906:	e10b      	b.n	8005b20 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590c:	2b02      	cmp	r3, #2
 800590e:	d14e      	bne.n	80059ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	2200      	movs	r2, #0
 8005918:	4906      	ldr	r1, [pc, #24]	; (8005934 <HAL_I2C_Master_Receive+0x22c>)
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f001 f836 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e10e      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
 800592a:	bf00      	nop
 800592c:	00100002 	.word	0x00100002
 8005930:	ffff0000 	.word	0xffff0000
 8005934:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059ac:	e0b8      	b.n	8005b20 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	2200      	movs	r2, #0
 80059b6:	4966      	ldr	r1, [pc, #408]	; (8005b50 <HAL_I2C_Master_Receive+0x448>)
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 ffe7 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0bf      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	2200      	movs	r2, #0
 8005a12:	494f      	ldr	r1, [pc, #316]	; (8005b50 <HAL_I2C_Master_Receive+0x448>)
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 ffb9 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e091      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a98:	e042      	b.n	8005b20 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f001 f8cc 	bl	8006c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e04c      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d118      	bne.n	8005b20 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f47f aec2 	bne.w	80058ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e000      	b.n	8005b48 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3728      	adds	r7, #40	; 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	00010004 	.word	0x00010004

08005b54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	817b      	strh	r3, [r7, #10]
 8005b66:	460b      	mov	r3, r1
 8005b68:	813b      	strh	r3, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b6e:	f7fd ff83 	bl	8003a78 <HAL_GetTick>
 8005b72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	f040 80d9 	bne.w	8005d34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2319      	movs	r3, #25
 8005b88:	2201      	movs	r2, #1
 8005b8a:	496d      	ldr	r1, [pc, #436]	; (8005d40 <HAL_I2C_Mem_Write+0x1ec>)
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fefd 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e0cc      	b.n	8005d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_I2C_Mem_Write+0x56>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e0c5      	b.n	8005d36 <HAL_I2C_Mem_Write+0x1e2>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d007      	beq.n	8005bd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2221      	movs	r2, #33	; 0x21
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2240      	movs	r2, #64	; 0x40
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4a4d      	ldr	r2, [pc, #308]	; (8005d44 <HAL_I2C_Mem_Write+0x1f0>)
 8005c10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c12:	88f8      	ldrh	r0, [r7, #6]
 8005c14:	893a      	ldrh	r2, [r7, #8]
 8005c16:	8979      	ldrh	r1, [r7, #10]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	4603      	mov	r3, r0
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fd34 	bl	8006690 <I2C_RequestMemoryWrite>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d052      	beq.n	8005cd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e081      	b.n	8005d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 ff7e 	bl	8006b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d107      	bne.n	8005c5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e06b      	b.n	8005d36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_I2C_Mem_Write+0x180>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d017      	beq.n	8005cd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	781a      	ldrb	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1aa      	bne.n	8005c32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 ff6a 	bl	8006bba <I2C_WaitOnBTFFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00d      	beq.n	8005d08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d107      	bne.n	8005d04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e016      	b.n	8005d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	00100002 	.word	0x00100002
 8005d44:	ffff0000 	.word	0xffff0000

08005d48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08c      	sub	sp, #48	; 0x30
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	817b      	strh	r3, [r7, #10]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	813b      	strh	r3, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d62:	f7fd fe89 	bl	8003a78 <HAL_GetTick>
 8005d66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	f040 8208 	bne.w	8006186 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	2319      	movs	r3, #25
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	497b      	ldr	r1, [pc, #492]	; (8005f6c <HAL_I2C_Mem_Read+0x224>)
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fe03 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e1fb      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_I2C_Mem_Read+0x56>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e1f4      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d007      	beq.n	8005dc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2222      	movs	r2, #34	; 0x22
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2240      	movs	r2, #64	; 0x40
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a5b      	ldr	r2, [pc, #364]	; (8005f70 <HAL_I2C_Mem_Read+0x228>)
 8005e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e06:	88f8      	ldrh	r0, [r7, #6]
 8005e08:	893a      	ldrh	r2, [r7, #8]
 8005e0a:	8979      	ldrh	r1, [r7, #10]
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	4603      	mov	r3, r0
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fcd0 	bl	80067bc <I2C_RequestMemoryRead>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e1b0      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d113      	bne.n	8005e56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	623b      	str	r3, [r7, #32]
 8005e42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	e184      	b.n	8006160 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d11b      	bne.n	8005e96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e164      	b.n	8006160 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d11b      	bne.n	8005ed6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	e144      	b.n	8006160 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005eec:	e138      	b.n	8006160 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	f200 80f1 	bhi.w	80060da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d123      	bne.n	8005f48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fe99 	bl	8006c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e139      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f46:	e10b      	b.n	8006160 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d14e      	bne.n	8005fee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	2200      	movs	r2, #0
 8005f58:	4906      	ldr	r1, [pc, #24]	; (8005f74 <HAL_I2C_Mem_Read+0x22c>)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fd16 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e10e      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
 8005f6a:	bf00      	nop
 8005f6c:	00100002 	.word	0x00100002
 8005f70:	ffff0000 	.word	0xffff0000
 8005f74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fec:	e0b8      	b.n	8006160 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4966      	ldr	r1, [pc, #408]	; (8006190 <HAL_I2C_Mem_Read+0x448>)
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fcc7 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0bf      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	2200      	movs	r2, #0
 8006052:	494f      	ldr	r1, [pc, #316]	; (8006190 <HAL_I2C_Mem_Read+0x448>)
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fc99 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e091      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060d8:	e042      	b.n	8006160 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fdac 	bl	8006c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e04c      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d118      	bne.n	8006160 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	f47f aec2 	bne.w	8005eee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e000      	b.n	8006188 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006186:	2302      	movs	r3, #2
  }
}
 8006188:	4618      	mov	r0, r3
 800618a:	3728      	adds	r7, #40	; 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	00010004 	.word	0x00010004

08006194 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	460b      	mov	r3, r1
 80061a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80061a4:	f7fd fc68 	bl	8003a78 <HAL_GetTick>
 80061a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	f040 8111 	bne.w	80063de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	2319      	movs	r3, #25
 80061c2:	2201      	movs	r2, #1
 80061c4:	4988      	ldr	r1, [pc, #544]	; (80063e8 <HAL_I2C_IsDeviceReady+0x254>)
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fbe0 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80061d2:	2302      	movs	r3, #2
 80061d4:	e104      	b.n	80063e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_I2C_IsDeviceReady+0x50>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e0fd      	b.n	80063e0 <HAL_I2C_IsDeviceReady+0x24c>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d007      	beq.n	800620a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006218:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2224      	movs	r2, #36	; 0x24
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4a70      	ldr	r2, [pc, #448]	; (80063ec <HAL_I2C_IsDeviceReady+0x258>)
 800622c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800623c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fb9e 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00d      	beq.n	8006272 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006264:	d103      	bne.n	800626e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e0b6      	b.n	80063e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006272:	897b      	ldrh	r3, [r7, #10]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006280:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006282:	f7fd fbf9 	bl	8003a78 <HAL_GetTick>
 8006286:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80062b6:	e025      	b.n	8006304 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062b8:	f7fd fbde 	bl	8003a78 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d302      	bcc.n	80062ce <HAL_I2C_IsDeviceReady+0x13a>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d103      	bne.n	80062d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	22a0      	movs	r2, #160	; 0xa0
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	bf0c      	ite	eq
 80062e4:	2301      	moveq	r3, #1
 80062e6:	2300      	movne	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2ba0      	cmp	r3, #160	; 0xa0
 800630e:	d005      	beq.n	800631c <HAL_I2C_IsDeviceReady+0x188>
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <HAL_I2C_IsDeviceReady+0x188>
 8006316:	7dbb      	ldrb	r3, [r7, #22]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0cd      	beq.n	80062b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d129      	bne.n	8006386 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2319      	movs	r3, #25
 800635e:	2201      	movs	r2, #1
 8006360:	4921      	ldr	r1, [pc, #132]	; (80063e8 <HAL_I2C_IsDeviceReady+0x254>)
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fb12 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e036      	b.n	80063e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e02c      	b.n	80063e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006394:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800639e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	2319      	movs	r3, #25
 80063a6:	2201      	movs	r2, #1
 80063a8:	490f      	ldr	r1, [pc, #60]	; (80063e8 <HAL_I2C_IsDeviceReady+0x254>)
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 faee 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e012      	b.n	80063e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	3301      	adds	r3, #1
 80063be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	f4ff af32 	bcc.w	800622e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	00100002 	.word	0x00100002
 80063ec:	ffff0000 	.word	0xffff0000

080063f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	460b      	mov	r3, r1
 80063fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d006      	beq.n	800641a <I2C_MasterRequestWrite+0x2a>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d003      	beq.n	800641a <I2C_MasterRequestWrite+0x2a>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006418:	d108      	bne.n	800642c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e00b      	b.n	8006444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	2b12      	cmp	r3, #18
 8006432:	d107      	bne.n	8006444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fa9b 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00d      	beq.n	8006478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646a:	d103      	bne.n	8006474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e035      	b.n	80064e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006480:	d108      	bne.n	8006494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006482:	897b      	ldrh	r3, [r7, #10]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006490:	611a      	str	r2, [r3, #16]
 8006492:	e01b      	b.n	80064cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006494:	897b      	ldrh	r3, [r7, #10]
 8006496:	11db      	asrs	r3, r3, #7
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f003 0306 	and.w	r3, r3, #6
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f063 030f 	orn	r3, r3, #15
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	490e      	ldr	r1, [pc, #56]	; (80064ec <I2C_MasterRequestWrite+0xfc>)
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fac1 	bl	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e010      	b.n	80064e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064c2:	897b      	ldrh	r3, [r7, #10]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4907      	ldr	r1, [pc, #28]	; (80064f0 <I2C_MasterRequestWrite+0x100>)
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fab1 	bl	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	00010008 	.word	0x00010008
 80064f0:	00010002 	.word	0x00010002

080064f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	607a      	str	r2, [r7, #4]
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	460b      	mov	r3, r1
 8006502:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006518:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d006      	beq.n	800652e <I2C_MasterRequestRead+0x3a>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d003      	beq.n	800652e <I2C_MasterRequestRead+0x3a>
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800652c:	d108      	bne.n	8006540 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e00b      	b.n	8006558 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	2b11      	cmp	r3, #17
 8006546:	d107      	bne.n	8006558 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fa11 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00d      	beq.n	800658c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657e:	d103      	bne.n	8006588 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e079      	b.n	8006680 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006594:	d108      	bne.n	80065a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006596:	897b      	ldrh	r3, [r7, #10]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	611a      	str	r2, [r3, #16]
 80065a6:	e05f      	b.n	8006668 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065a8:	897b      	ldrh	r3, [r7, #10]
 80065aa:	11db      	asrs	r3, r3, #7
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f003 0306 	and.w	r3, r3, #6
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f063 030f 	orn	r3, r3, #15
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4930      	ldr	r1, [pc, #192]	; (8006688 <I2C_MasterRequestRead+0x194>)
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fa37 	bl	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e054      	b.n	8006680 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065d6:	897b      	ldrh	r3, [r7, #10]
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4929      	ldr	r1, [pc, #164]	; (800668c <I2C_MasterRequestRead+0x198>)
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fa27 	bl	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e044      	b.n	8006680 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f6:	2300      	movs	r3, #0
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f9af 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00d      	beq.n	8006650 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006642:	d103      	bne.n	800664c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e017      	b.n	8006680 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006650:	897b      	ldrh	r3, [r7, #10]
 8006652:	11db      	asrs	r3, r3, #7
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 0306 	and.w	r3, r3, #6
 800665a:	b2db      	uxtb	r3, r3
 800665c:	f063 030e 	orn	r3, r3, #14
 8006660:	b2da      	uxtb	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4907      	ldr	r1, [pc, #28]	; (800668c <I2C_MasterRequestRead+0x198>)
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f9e3 	bl	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	00010008 	.word	0x00010008
 800668c:	00010002 	.word	0x00010002

08006690 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	4608      	mov	r0, r1
 800669a:	4611      	mov	r1, r2
 800669c:	461a      	mov	r2, r3
 800669e:	4603      	mov	r3, r0
 80066a0:	817b      	strh	r3, [r7, #10]
 80066a2:	460b      	mov	r3, r1
 80066a4:	813b      	strh	r3, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f960 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00d      	beq.n	80066ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e0:	d103      	bne.n	80066ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e05f      	b.n	80067ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ee:	897b      	ldrh	r3, [r7, #10]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	6a3a      	ldr	r2, [r7, #32]
 8006702:	492d      	ldr	r1, [pc, #180]	; (80067b8 <I2C_RequestMemoryWrite+0x128>)
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f998 	bl	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e04c      	b.n	80067ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800672a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672c:	6a39      	ldr	r1, [r7, #32]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 fa02 	bl	8006b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	2b04      	cmp	r3, #4
 8006740:	d107      	bne.n	8006752 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006750:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e02b      	b.n	80067ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d105      	bne.n	8006768 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800675c:	893b      	ldrh	r3, [r7, #8]
 800675e:	b2da      	uxtb	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	611a      	str	r2, [r3, #16]
 8006766:	e021      	b.n	80067ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006768:	893b      	ldrh	r3, [r7, #8]
 800676a:	0a1b      	lsrs	r3, r3, #8
 800676c:	b29b      	uxth	r3, r3
 800676e:	b2da      	uxtb	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006778:	6a39      	ldr	r1, [r7, #32]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f9dc 	bl	8006b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	2b04      	cmp	r3, #4
 800678c:	d107      	bne.n	800679e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800679c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e005      	b.n	80067ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067a2:	893b      	ldrh	r3, [r7, #8]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	00010002 	.word	0x00010002

080067bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	4608      	mov	r0, r1
 80067c6:	4611      	mov	r1, r2
 80067c8:	461a      	mov	r2, r3
 80067ca:	4603      	mov	r3, r0
 80067cc:	817b      	strh	r3, [r7, #10]
 80067ce:	460b      	mov	r3, r1
 80067d0:	813b      	strh	r3, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f8c2 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681c:	d103      	bne.n	8006826 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e0aa      	b.n	8006980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800682a:	897b      	ldrh	r3, [r7, #10]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006838:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	4952      	ldr	r1, [pc, #328]	; (8006988 <I2C_RequestMemoryRead+0x1cc>)
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f8fa 	bl	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e097      	b.n	8006980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006868:	6a39      	ldr	r1, [r7, #32]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f964 	bl	8006b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00d      	beq.n	8006892 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	2b04      	cmp	r3, #4
 800687c:	d107      	bne.n	800688e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e076      	b.n	8006980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d105      	bne.n	80068a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006898:	893b      	ldrh	r3, [r7, #8]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	611a      	str	r2, [r3, #16]
 80068a2:	e021      	b.n	80068e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068a4:	893b      	ldrh	r3, [r7, #8]
 80068a6:	0a1b      	lsrs	r3, r3, #8
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b4:	6a39      	ldr	r1, [r7, #32]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f93e 	bl	8006b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d107      	bne.n	80068da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e050      	b.n	8006980 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068de:	893b      	ldrh	r3, [r7, #8]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	6a39      	ldr	r1, [r7, #32]
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f923 	bl	8006b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00d      	beq.n	8006914 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d107      	bne.n	8006910 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e035      	b.n	8006980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006922:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	2200      	movs	r2, #0
 800692c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f82b 	bl	800698c <I2C_WaitOnFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00d      	beq.n	8006958 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694a:	d103      	bne.n	8006954 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e013      	b.n	8006980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006958:	897b      	ldrh	r3, [r7, #10]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f043 0301 	orr.w	r3, r3, #1
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	6a3a      	ldr	r2, [r7, #32]
 800696c:	4906      	ldr	r1, [pc, #24]	; (8006988 <I2C_RequestMemoryRead+0x1cc>)
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f863 	bl	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	00010002 	.word	0x00010002

0800698c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800699c:	e025      	b.n	80069ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d021      	beq.n	80069ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a6:	f7fd f867 	bl	8003a78 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d302      	bcc.n	80069bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d116      	bne.n	80069ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f043 0220 	orr.w	r2, r3, #32
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e023      	b.n	8006a32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d10d      	bne.n	8006a10 <I2C_WaitOnFlagUntilTimeout+0x84>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	43da      	mvns	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4013      	ands	r3, r2
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	e00c      	b.n	8006a2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	43da      	mvns	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bf0c      	ite	eq
 8006a22:	2301      	moveq	r3, #1
 8006a24:	2300      	movne	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d0b6      	beq.n	800699e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
 8006a46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a48:	e051      	b.n	8006aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a58:	d123      	bne.n	8006aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f043 0204 	orr.w	r2, r3, #4
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e046      	b.n	8006b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d021      	beq.n	8006aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fc ffe5 	bl	8003a78 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d116      	bne.n	8006aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e020      	b.n	8006b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	0c1b      	lsrs	r3, r3, #16
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d10c      	bne.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	43da      	mvns	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bf14      	ite	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	2300      	moveq	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	e00b      	b.n	8006b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	43da      	mvns	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bf14      	ite	ne
 8006b24:	2301      	movne	r3, #1
 8006b26:	2300      	moveq	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d18d      	bne.n	8006a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b44:	e02d      	b.n	8006ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f8ce 	bl	8006ce8 <I2C_IsAcknowledgeFailed>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e02d      	b.n	8006bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d021      	beq.n	8006ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5e:	f7fc ff8b 	bl	8003a78 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d302      	bcc.n	8006b74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d116      	bne.n	8006ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f043 0220 	orr.w	r2, r3, #32
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e007      	b.n	8006bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bac:	2b80      	cmp	r3, #128	; 0x80
 8006bae:	d1ca      	bne.n	8006b46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc6:	e02d      	b.n	8006c24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f88d 	bl	8006ce8 <I2C_IsAcknowledgeFailed>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e02d      	b.n	8006c34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d021      	beq.n	8006c24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be0:	f7fc ff4a 	bl	8003a78 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d302      	bcc.n	8006bf6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d116      	bne.n	8006c24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	f043 0220 	orr.w	r2, r3, #32
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e007      	b.n	8006c34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d1ca      	bne.n	8006bc8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c48:	e042      	b.n	8006cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	2b10      	cmp	r3, #16
 8006c56:	d119      	bne.n	8006c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0210 	mvn.w	r2, #16
 8006c60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e029      	b.n	8006ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8c:	f7fc fef4 	bl	8003a78 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d302      	bcc.n	8006ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d116      	bne.n	8006cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e007      	b.n	8006ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	d1b5      	bne.n	8006c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfe:	d11b      	bne.n	8006d38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	f043 0204 	orr.w	r2, r3, #4
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e267      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d075      	beq.n	8006e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d66:	4b88      	ldr	r3, [pc, #544]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 030c 	and.w	r3, r3, #12
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d00c      	beq.n	8006d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d72:	4b85      	ldr	r3, [pc, #532]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d112      	bne.n	8006da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d7e:	4b82      	ldr	r3, [pc, #520]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d8a:	d10b      	bne.n	8006da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d8c:	4b7e      	ldr	r3, [pc, #504]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d05b      	beq.n	8006e50 <HAL_RCC_OscConfig+0x108>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d157      	bne.n	8006e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e242      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dac:	d106      	bne.n	8006dbc <HAL_RCC_OscConfig+0x74>
 8006dae:	4b76      	ldr	r3, [pc, #472]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a75      	ldr	r2, [pc, #468]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	e01d      	b.n	8006df8 <HAL_RCC_OscConfig+0xb0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc4:	d10c      	bne.n	8006de0 <HAL_RCC_OscConfig+0x98>
 8006dc6:	4b70      	ldr	r3, [pc, #448]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a6f      	ldr	r2, [pc, #444]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	4b6d      	ldr	r3, [pc, #436]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a6c      	ldr	r2, [pc, #432]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e00b      	b.n	8006df8 <HAL_RCC_OscConfig+0xb0>
 8006de0:	4b69      	ldr	r3, [pc, #420]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a68      	ldr	r2, [pc, #416]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	4b66      	ldr	r3, [pc, #408]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a65      	ldr	r2, [pc, #404]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d013      	beq.n	8006e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e00:	f7fc fe3a 	bl	8003a78 <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e08:	f7fc fe36 	bl	8003a78 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b64      	cmp	r3, #100	; 0x64
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e207      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1a:	4b5b      	ldr	r3, [pc, #364]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f0      	beq.n	8006e08 <HAL_RCC_OscConfig+0xc0>
 8006e26:	e014      	b.n	8006e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e28:	f7fc fe26 	bl	8003a78 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e30:	f7fc fe22 	bl	8003a78 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b64      	cmp	r3, #100	; 0x64
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e1f3      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e42:	4b51      	ldr	r3, [pc, #324]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0xe8>
 8006e4e:	e000      	b.n	8006e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d063      	beq.n	8006f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e5e:	4b4a      	ldr	r3, [pc, #296]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 030c 	and.w	r3, r3, #12
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e6a:	4b47      	ldr	r3, [pc, #284]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d11c      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e76:	4b44      	ldr	r3, [pc, #272]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d116      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e82:	4b41      	ldr	r3, [pc, #260]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <HAL_RCC_OscConfig+0x152>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d001      	beq.n	8006e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e1c7      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9a:	4b3b      	ldr	r3, [pc, #236]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4937      	ldr	r1, [pc, #220]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eae:	e03a      	b.n	8006f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d020      	beq.n	8006efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eb8:	4b34      	ldr	r3, [pc, #208]	; (8006f8c <HAL_RCC_OscConfig+0x244>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebe:	f7fc fddb 	bl	8003a78 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec6:	f7fc fdd7 	bl	8003a78 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e1a8      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed8:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f0      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee4:	4b28      	ldr	r3, [pc, #160]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	4925      	ldr	r1, [pc, #148]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	600b      	str	r3, [r1, #0]
 8006ef8:	e015      	b.n	8006f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006efa:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <HAL_RCC_OscConfig+0x244>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f00:	f7fc fdba 	bl	8003a78 <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f08:	f7fc fdb6 	bl	8003a78 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e187      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f1a:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f0      	bne.n	8006f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0308 	and.w	r3, r3, #8
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d036      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d016      	beq.n	8006f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f3a:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <HAL_RCC_OscConfig+0x248>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f40:	f7fc fd9a 	bl	8003a78 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f48:	f7fc fd96 	bl	8003a78 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e167      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <HAL_RCC_OscConfig+0x240>)
 8006f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCC_OscConfig+0x200>
 8006f66:	e01b      	b.n	8006fa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <HAL_RCC_OscConfig+0x248>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6e:	f7fc fd83 	bl	8003a78 <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f74:	e00e      	b.n	8006f94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f76:	f7fc fd7f 	bl	8003a78 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d907      	bls.n	8006f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e150      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	42470000 	.word	0x42470000
 8006f90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f94:	4b88      	ldr	r3, [pc, #544]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8006f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ea      	bne.n	8006f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8097 	beq.w	80070dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fb2:	4b81      	ldr	r3, [pc, #516]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10f      	bne.n	8006fde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]
 8006fc2:	4b7d      	ldr	r3, [pc, #500]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	4a7c      	ldr	r2, [pc, #496]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8006fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fce:	4b7a      	ldr	r3, [pc, #488]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	60bb      	str	r3, [r7, #8]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fde:	4b77      	ldr	r3, [pc, #476]	; (80071bc <HAL_RCC_OscConfig+0x474>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d118      	bne.n	800701c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fea:	4b74      	ldr	r3, [pc, #464]	; (80071bc <HAL_RCC_OscConfig+0x474>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a73      	ldr	r2, [pc, #460]	; (80071bc <HAL_RCC_OscConfig+0x474>)
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ff6:	f7fc fd3f 	bl	8003a78 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffe:	f7fc fd3b 	bl	8003a78 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e10c      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007010:	4b6a      	ldr	r3, [pc, #424]	; (80071bc <HAL_RCC_OscConfig+0x474>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0f0      	beq.n	8006ffe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d106      	bne.n	8007032 <HAL_RCC_OscConfig+0x2ea>
 8007024:	4b64      	ldr	r3, [pc, #400]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	4a63      	ldr	r2, [pc, #396]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	6713      	str	r3, [r2, #112]	; 0x70
 8007030:	e01c      	b.n	800706c <HAL_RCC_OscConfig+0x324>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b05      	cmp	r3, #5
 8007038:	d10c      	bne.n	8007054 <HAL_RCC_OscConfig+0x30c>
 800703a:	4b5f      	ldr	r3, [pc, #380]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 800703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703e:	4a5e      	ldr	r2, [pc, #376]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8007040:	f043 0304 	orr.w	r3, r3, #4
 8007044:	6713      	str	r3, [r2, #112]	; 0x70
 8007046:	4b5c      	ldr	r3, [pc, #368]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	4a5b      	ldr	r2, [pc, #364]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 800704c:	f043 0301 	orr.w	r3, r3, #1
 8007050:	6713      	str	r3, [r2, #112]	; 0x70
 8007052:	e00b      	b.n	800706c <HAL_RCC_OscConfig+0x324>
 8007054:	4b58      	ldr	r3, [pc, #352]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007058:	4a57      	ldr	r2, [pc, #348]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	6713      	str	r3, [r2, #112]	; 0x70
 8007060:	4b55      	ldr	r3, [pc, #340]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	4a54      	ldr	r2, [pc, #336]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8007066:	f023 0304 	bic.w	r3, r3, #4
 800706a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007074:	f7fc fd00 	bl	8003a78 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800707a:	e00a      	b.n	8007092 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800707c:	f7fc fcfc 	bl	8003a78 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f241 3288 	movw	r2, #5000	; 0x1388
 800708a:	4293      	cmp	r3, r2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e0cb      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007092:	4b49      	ldr	r3, [pc, #292]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0ee      	beq.n	800707c <HAL_RCC_OscConfig+0x334>
 800709e:	e014      	b.n	80070ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a0:	f7fc fcea 	bl	8003a78 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070a6:	e00a      	b.n	80070be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a8:	f7fc fce6 	bl	8003a78 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e0b5      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070be:	4b3e      	ldr	r3, [pc, #248]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1ee      	bne.n	80070a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d105      	bne.n	80070dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d0:	4b39      	ldr	r3, [pc, #228]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	4a38      	ldr	r2, [pc, #224]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 80070d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 80a1 	beq.w	8007228 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070e6:	4b34      	ldr	r3, [pc, #208]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 030c 	and.w	r3, r3, #12
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d05c      	beq.n	80071ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d141      	bne.n	800717e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070fa:	4b31      	ldr	r3, [pc, #196]	; (80071c0 <HAL_RCC_OscConfig+0x478>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007100:	f7fc fcba 	bl	8003a78 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007108:	f7fc fcb6 	bl	8003a78 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e087      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800711a:	4b27      	ldr	r3, [pc, #156]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1f0      	bne.n	8007108 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69da      	ldr	r2, [r3, #28]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	019b      	lsls	r3, r3, #6
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	3b01      	subs	r3, #1
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	061b      	lsls	r3, r3, #24
 800714a:	491b      	ldr	r1, [pc, #108]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 800714c:	4313      	orrs	r3, r2
 800714e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007150:	4b1b      	ldr	r3, [pc, #108]	; (80071c0 <HAL_RCC_OscConfig+0x478>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007156:	f7fc fc8f 	bl	8003a78 <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800715c:	e008      	b.n	8007170 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715e:	f7fc fc8b 	bl	8003a78 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e05c      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007170:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f0      	beq.n	800715e <HAL_RCC_OscConfig+0x416>
 800717c:	e054      	b.n	8007228 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <HAL_RCC_OscConfig+0x478>)
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007184:	f7fc fc78 	bl	8003a78 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800718c:	f7fc fc74 	bl	8003a78 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e045      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <HAL_RCC_OscConfig+0x470>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0x444>
 80071aa:	e03d      	b.n	8007228 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d107      	bne.n	80071c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e038      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
 80071b8:	40023800 	.word	0x40023800
 80071bc:	40007000 	.word	0x40007000
 80071c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071c4:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <HAL_RCC_OscConfig+0x4ec>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d028      	beq.n	8007224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071dc:	429a      	cmp	r2, r3
 80071de:	d121      	bne.n	8007224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d11a      	bne.n	8007224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071f4:	4013      	ands	r3, r2
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d111      	bne.n	8007224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	085b      	lsrs	r3, r3, #1
 800720c:	3b01      	subs	r3, #1
 800720e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007210:	429a      	cmp	r2, r3
 8007212:	d107      	bne.n	8007224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007220:	429a      	cmp	r2, r3
 8007222:	d001      	beq.n	8007228 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800

08007238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0cc      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800724c:	4b68      	ldr	r3, [pc, #416]	; (80073f0 <HAL_RCC_ClockConfig+0x1b8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d90c      	bls.n	8007274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725a:	4b65      	ldr	r3, [pc, #404]	; (80073f0 <HAL_RCC_ClockConfig+0x1b8>)
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007262:	4b63      	ldr	r3, [pc, #396]	; (80073f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d001      	beq.n	8007274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e0b8      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d020      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800728c:	4b59      	ldr	r3, [pc, #356]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	4a58      	ldr	r2, [pc, #352]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072a4:	4b53      	ldr	r3, [pc, #332]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	4a52      	ldr	r2, [pc, #328]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80072aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b0:	4b50      	ldr	r3, [pc, #320]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	494d      	ldr	r1, [pc, #308]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d044      	beq.n	8007358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d107      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d6:	4b47      	ldr	r3, [pc, #284]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d119      	bne.n	8007316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e07f      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d003      	beq.n	80072f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d107      	bne.n	8007306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072f6:	4b3f      	ldr	r3, [pc, #252]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d109      	bne.n	8007316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e06f      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007306:	4b3b      	ldr	r3, [pc, #236]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e067      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007316:	4b37      	ldr	r3, [pc, #220]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f023 0203 	bic.w	r2, r3, #3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	4934      	ldr	r1, [pc, #208]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007324:	4313      	orrs	r3, r2
 8007326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007328:	f7fc fba6 	bl	8003a78 <HAL_GetTick>
 800732c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732e:	e00a      	b.n	8007346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007330:	f7fc fba2 	bl	8003a78 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	f241 3288 	movw	r2, #5000	; 0x1388
 800733e:	4293      	cmp	r3, r2
 8007340:	d901      	bls.n	8007346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e04f      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007346:	4b2b      	ldr	r3, [pc, #172]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f003 020c 	and.w	r2, r3, #12
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	429a      	cmp	r2, r3
 8007356:	d1eb      	bne.n	8007330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <HAL_RCC_ClockConfig+0x1b8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d20c      	bcs.n	8007380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007366:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800736e:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d001      	beq.n	8007380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e032      	b.n	80073e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800738c:	4b19      	ldr	r3, [pc, #100]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	4916      	ldr	r1, [pc, #88]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 800739a:	4313      	orrs	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073aa:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	490e      	ldr	r1, [pc, #56]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073be:	f000 f821 	bl	8007404 <HAL_RCC_GetSysClockFreq>
 80073c2:	4602      	mov	r2, r0
 80073c4:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	091b      	lsrs	r3, r3, #4
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	490a      	ldr	r1, [pc, #40]	; (80073f8 <HAL_RCC_ClockConfig+0x1c0>)
 80073d0:	5ccb      	ldrb	r3, [r1, r3]
 80073d2:	fa22 f303 	lsr.w	r3, r2, r3
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <HAL_RCC_ClockConfig+0x1c4>)
 80073d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <HAL_RCC_ClockConfig+0x1c8>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fc fb06 	bl	80039f0 <HAL_InitTick>

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	40023c00 	.word	0x40023c00
 80073f4:	40023800 	.word	0x40023800
 80073f8:	0800d2d4 	.word	0x0800d2d4
 80073fc:	20000018 	.word	0x20000018
 8007400:	2000001c 	.word	0x2000001c

08007404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007408:	b094      	sub	sp, #80	; 0x50
 800740a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	647b      	str	r3, [r7, #68]	; 0x44
 8007410:	2300      	movs	r3, #0
 8007412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007414:	2300      	movs	r3, #0
 8007416:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800741c:	4b79      	ldr	r3, [pc, #484]	; (8007604 <HAL_RCC_GetSysClockFreq+0x200>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 030c 	and.w	r3, r3, #12
 8007424:	2b08      	cmp	r3, #8
 8007426:	d00d      	beq.n	8007444 <HAL_RCC_GetSysClockFreq+0x40>
 8007428:	2b08      	cmp	r3, #8
 800742a:	f200 80e1 	bhi.w	80075f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_RCC_GetSysClockFreq+0x34>
 8007432:	2b04      	cmp	r3, #4
 8007434:	d003      	beq.n	800743e <HAL_RCC_GetSysClockFreq+0x3a>
 8007436:	e0db      	b.n	80075f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007438:	4b73      	ldr	r3, [pc, #460]	; (8007608 <HAL_RCC_GetSysClockFreq+0x204>)
 800743a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800743c:	e0db      	b.n	80075f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800743e:	4b73      	ldr	r3, [pc, #460]	; (800760c <HAL_RCC_GetSysClockFreq+0x208>)
 8007440:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007442:	e0d8      	b.n	80075f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007444:	4b6f      	ldr	r3, [pc, #444]	; (8007604 <HAL_RCC_GetSysClockFreq+0x200>)
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800744c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800744e:	4b6d      	ldr	r3, [pc, #436]	; (8007604 <HAL_RCC_GetSysClockFreq+0x200>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d063      	beq.n	8007522 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800745a:	4b6a      	ldr	r3, [pc, #424]	; (8007604 <HAL_RCC_GetSysClockFreq+0x200>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	099b      	lsrs	r3, r3, #6
 8007460:	2200      	movs	r2, #0
 8007462:	63bb      	str	r3, [r7, #56]	; 0x38
 8007464:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
 800746e:	2300      	movs	r3, #0
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
 8007472:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007476:	4622      	mov	r2, r4
 8007478:	462b      	mov	r3, r5
 800747a:	f04f 0000 	mov.w	r0, #0
 800747e:	f04f 0100 	mov.w	r1, #0
 8007482:	0159      	lsls	r1, r3, #5
 8007484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007488:	0150      	lsls	r0, r2, #5
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4621      	mov	r1, r4
 8007490:	1a51      	subs	r1, r2, r1
 8007492:	6139      	str	r1, [r7, #16]
 8007494:	4629      	mov	r1, r5
 8007496:	eb63 0301 	sbc.w	r3, r3, r1
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074a8:	4659      	mov	r1, fp
 80074aa:	018b      	lsls	r3, r1, #6
 80074ac:	4651      	mov	r1, sl
 80074ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074b2:	4651      	mov	r1, sl
 80074b4:	018a      	lsls	r2, r1, #6
 80074b6:	4651      	mov	r1, sl
 80074b8:	ebb2 0801 	subs.w	r8, r2, r1
 80074bc:	4659      	mov	r1, fp
 80074be:	eb63 0901 	sbc.w	r9, r3, r1
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074d6:	4690      	mov	r8, r2
 80074d8:	4699      	mov	r9, r3
 80074da:	4623      	mov	r3, r4
 80074dc:	eb18 0303 	adds.w	r3, r8, r3
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	462b      	mov	r3, r5
 80074e4:	eb49 0303 	adc.w	r3, r9, r3
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074f6:	4629      	mov	r1, r5
 80074f8:	024b      	lsls	r3, r1, #9
 80074fa:	4621      	mov	r1, r4
 80074fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007500:	4621      	mov	r1, r4
 8007502:	024a      	lsls	r2, r1, #9
 8007504:	4610      	mov	r0, r2
 8007506:	4619      	mov	r1, r3
 8007508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800750a:	2200      	movs	r2, #0
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
 800750e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007514:	f7f9 fbc0 	bl	8000c98 <__aeabi_uldivmod>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4613      	mov	r3, r2
 800751e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007520:	e058      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007522:	4b38      	ldr	r3, [pc, #224]	; (8007604 <HAL_RCC_GetSysClockFreq+0x200>)
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	099b      	lsrs	r3, r3, #6
 8007528:	2200      	movs	r2, #0
 800752a:	4618      	mov	r0, r3
 800752c:	4611      	mov	r1, r2
 800752e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007532:	623b      	str	r3, [r7, #32]
 8007534:	2300      	movs	r3, #0
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
 8007538:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800753c:	4642      	mov	r2, r8
 800753e:	464b      	mov	r3, r9
 8007540:	f04f 0000 	mov.w	r0, #0
 8007544:	f04f 0100 	mov.w	r1, #0
 8007548:	0159      	lsls	r1, r3, #5
 800754a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800754e:	0150      	lsls	r0, r2, #5
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4641      	mov	r1, r8
 8007556:	ebb2 0a01 	subs.w	sl, r2, r1
 800755a:	4649      	mov	r1, r9
 800755c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800756c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007570:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007574:	ebb2 040a 	subs.w	r4, r2, sl
 8007578:	eb63 050b 	sbc.w	r5, r3, fp
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	00eb      	lsls	r3, r5, #3
 8007586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800758a:	00e2      	lsls	r2, r4, #3
 800758c:	4614      	mov	r4, r2
 800758e:	461d      	mov	r5, r3
 8007590:	4643      	mov	r3, r8
 8007592:	18e3      	adds	r3, r4, r3
 8007594:	603b      	str	r3, [r7, #0]
 8007596:	464b      	mov	r3, r9
 8007598:	eb45 0303 	adc.w	r3, r5, r3
 800759c:	607b      	str	r3, [r7, #4]
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075aa:	4629      	mov	r1, r5
 80075ac:	028b      	lsls	r3, r1, #10
 80075ae:	4621      	mov	r1, r4
 80075b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075b4:	4621      	mov	r1, r4
 80075b6:	028a      	lsls	r2, r1, #10
 80075b8:	4610      	mov	r0, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075be:	2200      	movs	r2, #0
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	61fa      	str	r2, [r7, #28]
 80075c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075c8:	f7f9 fb66 	bl	8000c98 <__aeabi_uldivmod>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4613      	mov	r3, r2
 80075d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075d4:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <HAL_RCC_GetSysClockFreq+0x200>)
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	0c1b      	lsrs	r3, r3, #16
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	3301      	adds	r3, #1
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80075e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075ee:	e002      	b.n	80075f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075f0:	4b05      	ldr	r3, [pc, #20]	; (8007608 <HAL_RCC_GetSysClockFreq+0x204>)
 80075f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3750      	adds	r7, #80	; 0x50
 80075fc:	46bd      	mov	sp, r7
 80075fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007602:	bf00      	nop
 8007604:	40023800 	.word	0x40023800
 8007608:	00f42400 	.word	0x00f42400
 800760c:	007a1200 	.word	0x007a1200

08007610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007614:	4b03      	ldr	r3, [pc, #12]	; (8007624 <HAL_RCC_GetHCLKFreq+0x14>)
 8007616:	681b      	ldr	r3, [r3, #0]
}
 8007618:	4618      	mov	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000018 	.word	0x20000018

08007628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800762c:	f7ff fff0 	bl	8007610 <HAL_RCC_GetHCLKFreq>
 8007630:	4602      	mov	r2, r0
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	0a9b      	lsrs	r3, r3, #10
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	4903      	ldr	r1, [pc, #12]	; (800764c <HAL_RCC_GetPCLK1Freq+0x24>)
 800763e:	5ccb      	ldrb	r3, [r1, r3]
 8007640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007644:	4618      	mov	r0, r3
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40023800 	.word	0x40023800
 800764c:	0800d2e4 	.word	0x0800d2e4

08007650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007654:	f7ff ffdc 	bl	8007610 <HAL_RCC_GetHCLKFreq>
 8007658:	4602      	mov	r2, r0
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	0b5b      	lsrs	r3, r3, #13
 8007660:	f003 0307 	and.w	r3, r3, #7
 8007664:	4903      	ldr	r1, [pc, #12]	; (8007674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007666:	5ccb      	ldrb	r3, [r1, r3]
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800766c:	4618      	mov	r0, r3
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40023800 	.word	0x40023800
 8007674:	0800d2e4 	.word	0x0800d2e4

08007678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e041      	b.n	800770e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fc f862 	bl	8003768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f000 fcae 	bl	8008018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b01      	cmp	r3, #1
 800772a:	d001      	beq.n	8007730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e044      	b.n	80077ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1e      	ldr	r2, [pc, #120]	; (80077c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d018      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x6c>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775a:	d013      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x6c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1a      	ldr	r2, [pc, #104]	; (80077cc <HAL_TIM_Base_Start_IT+0xb4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00e      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x6c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d009      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x6c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a17      	ldr	r2, [pc, #92]	; (80077d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d004      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x6c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a16      	ldr	r2, [pc, #88]	; (80077d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d111      	bne.n	80077a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b06      	cmp	r3, #6
 8007794:	d010      	beq.n	80077b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a6:	e007      	b.n	80077b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40014000 	.word	0x40014000

080077dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e041      	b.n	8007872 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fb ff8a 	bl	800371c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f000 fbfc 	bl	8008018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d109      	bne.n	80078a0 <HAL_TIM_PWM_Start+0x24>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	bf14      	ite	ne
 8007898:	2301      	movne	r3, #1
 800789a:	2300      	moveq	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	e022      	b.n	80078e6 <HAL_TIM_PWM_Start+0x6a>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d109      	bne.n	80078ba <HAL_TIM_PWM_Start+0x3e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	bf14      	ite	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	2300      	moveq	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	e015      	b.n	80078e6 <HAL_TIM_PWM_Start+0x6a>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d109      	bne.n	80078d4 <HAL_TIM_PWM_Start+0x58>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	bf14      	ite	ne
 80078cc:	2301      	movne	r3, #1
 80078ce:	2300      	moveq	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	e008      	b.n	80078e6 <HAL_TIM_PWM_Start+0x6a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	bf14      	ite	ne
 80078e0:	2301      	movne	r3, #1
 80078e2:	2300      	moveq	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e068      	b.n	80079c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <HAL_TIM_PWM_Start+0x82>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078fc:	e013      	b.n	8007926 <HAL_TIM_PWM_Start+0xaa>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b04      	cmp	r3, #4
 8007902:	d104      	bne.n	800790e <HAL_TIM_PWM_Start+0x92>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800790c:	e00b      	b.n	8007926 <HAL_TIM_PWM_Start+0xaa>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d104      	bne.n	800791e <HAL_TIM_PWM_Start+0xa2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800791c:	e003      	b.n	8007926 <HAL_TIM_PWM_Start+0xaa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2202      	movs	r2, #2
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2201      	movs	r2, #1
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fe18 	bl	8008564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a23      	ldr	r2, [pc, #140]	; (80079c8 <HAL_TIM_PWM_Start+0x14c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d107      	bne.n	800794e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800794c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1d      	ldr	r2, [pc, #116]	; (80079c8 <HAL_TIM_PWM_Start+0x14c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d018      	beq.n	800798a <HAL_TIM_PWM_Start+0x10e>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007960:	d013      	beq.n	800798a <HAL_TIM_PWM_Start+0x10e>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a19      	ldr	r2, [pc, #100]	; (80079cc <HAL_TIM_PWM_Start+0x150>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00e      	beq.n	800798a <HAL_TIM_PWM_Start+0x10e>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a17      	ldr	r2, [pc, #92]	; (80079d0 <HAL_TIM_PWM_Start+0x154>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d009      	beq.n	800798a <HAL_TIM_PWM_Start+0x10e>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a16      	ldr	r2, [pc, #88]	; (80079d4 <HAL_TIM_PWM_Start+0x158>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d004      	beq.n	800798a <HAL_TIM_PWM_Start+0x10e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <HAL_TIM_PWM_Start+0x15c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d111      	bne.n	80079ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b06      	cmp	r3, #6
 800799a:	d010      	beq.n	80079be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ac:	e007      	b.n	80079be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0201 	orr.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	40010000 	.word	0x40010000
 80079cc:	40000400 	.word	0x40000400
 80079d0:	40000800 	.word	0x40000800
 80079d4:	40000c00 	.word	0x40000c00
 80079d8:	40014000 	.word	0x40014000

080079dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2200      	movs	r2, #0
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fdb8 	bl	8008564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a29      	ldr	r2, [pc, #164]	; (8007aa0 <HAL_TIM_PWM_Stop+0xc4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d117      	bne.n	8007a2e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6a1a      	ldr	r2, [r3, #32]
 8007a04:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a08:	4013      	ands	r3, r2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10f      	bne.n	8007a2e <HAL_TIM_PWM_Stop+0x52>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6a1a      	ldr	r2, [r3, #32]
 8007a14:	f240 4344 	movw	r3, #1092	; 0x444
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d107      	bne.n	8007a2e <HAL_TIM_PWM_Stop+0x52>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <HAL_TIM_PWM_Stop+0x82>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6a1a      	ldr	r2, [r3, #32]
 8007a44:	f240 4344 	movw	r3, #1092	; 0x444
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d107      	bne.n	8007a5e <HAL_TIM_PWM_Stop+0x82>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_PWM_Stop+0x92>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a6c:	e013      	b.n	8007a96 <HAL_TIM_PWM_Stop+0xba>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d104      	bne.n	8007a7e <HAL_TIM_PWM_Stop+0xa2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a7c:	e00b      	b.n	8007a96 <HAL_TIM_PWM_Stop+0xba>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_PWM_Stop+0xb2>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a8c:	e003      	b.n	8007a96 <HAL_TIM_PWM_Stop+0xba>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40010000 	.word	0x40010000

08007aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d122      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d11b      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0202 	mvn.w	r2, #2
 8007ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa77 	bl	8007fda <HAL_TIM_IC_CaptureCallback>
 8007aec:	e005      	b.n	8007afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa69 	bl	8007fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa7a 	bl	8007fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d122      	bne.n	8007b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d11b      	bne.n	8007b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0204 	mvn.w	r2, #4
 8007b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa4d 	bl	8007fda <HAL_TIM_IC_CaptureCallback>
 8007b40:	e005      	b.n	8007b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa3f 	bl	8007fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fa50 	bl	8007fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d122      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0308 	and.w	r3, r3, #8
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d11b      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0208 	mvn.w	r2, #8
 8007b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa23 	bl	8007fda <HAL_TIM_IC_CaptureCallback>
 8007b94:	e005      	b.n	8007ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa15 	bl	8007fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa26 	bl	8007fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d122      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d11b      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0210 	mvn.w	r2, #16
 8007bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9f9 	bl	8007fda <HAL_TIM_IC_CaptureCallback>
 8007be8:	e005      	b.n	8007bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9eb 	bl	8007fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f9fc 	bl	8007fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10e      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d107      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0201 	mvn.w	r2, #1
 8007c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fa f97c 	bl	8001f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d10e      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d107      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fd26 	bl	80086a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d10e      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d107      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9c1 	bl	8008002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0320 	and.w	r3, r3, #32
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d10e      	bne.n	8007cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d107      	bne.n	8007cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0220 	mvn.w	r2, #32
 8007ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fcf0 	bl	800868c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d101      	bne.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cce:	2302      	movs	r3, #2
 8007cd0:	e0ae      	b.n	8007e30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b0c      	cmp	r3, #12
 8007cde:	f200 809f 	bhi.w	8007e20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ce2:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007d1d 	.word	0x08007d1d
 8007cec:	08007e21 	.word	0x08007e21
 8007cf0:	08007e21 	.word	0x08007e21
 8007cf4:	08007e21 	.word	0x08007e21
 8007cf8:	08007d5d 	.word	0x08007d5d
 8007cfc:	08007e21 	.word	0x08007e21
 8007d00:	08007e21 	.word	0x08007e21
 8007d04:	08007e21 	.word	0x08007e21
 8007d08:	08007d9f 	.word	0x08007d9f
 8007d0c:	08007e21 	.word	0x08007e21
 8007d10:	08007e21 	.word	0x08007e21
 8007d14:	08007e21 	.word	0x08007e21
 8007d18:	08007ddf 	.word	0x08007ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 f9f8 	bl	8008118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0208 	orr.w	r2, r2, #8
 8007d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0204 	bic.w	r2, r2, #4
 8007d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6999      	ldr	r1, [r3, #24]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	691a      	ldr	r2, [r3, #16]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	619a      	str	r2, [r3, #24]
      break;
 8007d5a:	e064      	b.n	8007e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fa3e 	bl	80081e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699a      	ldr	r2, [r3, #24]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6999      	ldr	r1, [r3, #24]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	021a      	lsls	r2, r3, #8
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	619a      	str	r2, [r3, #24]
      break;
 8007d9c:	e043      	b.n	8007e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 fa89 	bl	80082bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0208 	orr.w	r2, r2, #8
 8007db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0204 	bic.w	r2, r2, #4
 8007dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69d9      	ldr	r1, [r3, #28]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	61da      	str	r2, [r3, #28]
      break;
 8007ddc:	e023      	b.n	8007e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 fad3 	bl	8008390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69da      	ldr	r2, [r3, #28]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69da      	ldr	r2, [r3, #28]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69d9      	ldr	r1, [r3, #28]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	021a      	lsls	r2, r3, #8
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	61da      	str	r2, [r3, #28]
      break;
 8007e1e:	e002      	b.n	8007e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	75fb      	strb	r3, [r7, #23]
      break;
 8007e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d101      	bne.n	8007e54 <HAL_TIM_ConfigClockSource+0x1c>
 8007e50:	2302      	movs	r3, #2
 8007e52:	e0b4      	b.n	8007fbe <HAL_TIM_ConfigClockSource+0x186>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8c:	d03e      	beq.n	8007f0c <HAL_TIM_ConfigClockSource+0xd4>
 8007e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e92:	f200 8087 	bhi.w	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9a:	f000 8086 	beq.w	8007faa <HAL_TIM_ConfigClockSource+0x172>
 8007e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea2:	d87f      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ea4:	2b70      	cmp	r3, #112	; 0x70
 8007ea6:	d01a      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0xa6>
 8007ea8:	2b70      	cmp	r3, #112	; 0x70
 8007eaa:	d87b      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007eac:	2b60      	cmp	r3, #96	; 0x60
 8007eae:	d050      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0x11a>
 8007eb0:	2b60      	cmp	r3, #96	; 0x60
 8007eb2:	d877      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007eb4:	2b50      	cmp	r3, #80	; 0x50
 8007eb6:	d03c      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0xfa>
 8007eb8:	2b50      	cmp	r3, #80	; 0x50
 8007eba:	d873      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d058      	beq.n	8007f72 <HAL_TIM_ConfigClockSource+0x13a>
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d86f      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ec4:	2b30      	cmp	r3, #48	; 0x30
 8007ec6:	d064      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x15a>
 8007ec8:	2b30      	cmp	r3, #48	; 0x30
 8007eca:	d86b      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d060      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x15a>
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d867      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d05c      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x15a>
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d05a      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x15a>
 8007edc:	e062      	b.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6899      	ldr	r1, [r3, #8]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f000 fb19 	bl	8008524 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	609a      	str	r2, [r3, #8]
      break;
 8007f0a:	e04f      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	6899      	ldr	r1, [r3, #8]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f000 fb02 	bl	8008524 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f2e:	609a      	str	r2, [r3, #8]
      break;
 8007f30:	e03c      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6859      	ldr	r1, [r3, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f000 fa76 	bl	8008430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2150      	movs	r1, #80	; 0x50
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 facf 	bl	80084ee <TIM_ITRx_SetConfig>
      break;
 8007f50:	e02c      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6859      	ldr	r1, [r3, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f000 fa95 	bl	800848e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2160      	movs	r1, #96	; 0x60
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fabf 	bl	80084ee <TIM_ITRx_SetConfig>
      break;
 8007f70:	e01c      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6859      	ldr	r1, [r3, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f000 fa56 	bl	8008430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2140      	movs	r1, #64	; 0x40
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 faaf 	bl	80084ee <TIM_ITRx_SetConfig>
      break;
 8007f90:	e00c      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	f000 faa6 	bl	80084ee <TIM_ITRx_SetConfig>
      break;
 8007fa2:	e003      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa8:	e000      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
	...

08008018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a34      	ldr	r2, [pc, #208]	; (80080fc <TIM_Base_SetConfig+0xe4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00f      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008036:	d00b      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a31      	ldr	r2, [pc, #196]	; (8008100 <TIM_Base_SetConfig+0xe8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d007      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a30      	ldr	r2, [pc, #192]	; (8008104 <TIM_Base_SetConfig+0xec>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a2f      	ldr	r2, [pc, #188]	; (8008108 <TIM_Base_SetConfig+0xf0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d108      	bne.n	8008062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a25      	ldr	r2, [pc, #148]	; (80080fc <TIM_Base_SetConfig+0xe4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01b      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008070:	d017      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a22      	ldr	r2, [pc, #136]	; (8008100 <TIM_Base_SetConfig+0xe8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a21      	ldr	r2, [pc, #132]	; (8008104 <TIM_Base_SetConfig+0xec>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00f      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a20      	ldr	r2, [pc, #128]	; (8008108 <TIM_Base_SetConfig+0xf0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00b      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1f      	ldr	r2, [pc, #124]	; (800810c <TIM_Base_SetConfig+0xf4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d007      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a1e      	ldr	r2, [pc, #120]	; (8008110 <TIM_Base_SetConfig+0xf8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d003      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <TIM_Base_SetConfig+0xfc>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d108      	bne.n	80080b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a08      	ldr	r2, [pc, #32]	; (80080fc <TIM_Base_SetConfig+0xe4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d103      	bne.n	80080e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	615a      	str	r2, [r3, #20]
}
 80080ee:	bf00      	nop
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40010000 	.word	0x40010000
 8008100:	40000400 	.word	0x40000400
 8008104:	40000800 	.word	0x40000800
 8008108:	40000c00 	.word	0x40000c00
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800

08008118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f023 0201 	bic.w	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f023 0302 	bic.w	r3, r3, #2
 8008160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a1c      	ldr	r2, [pc, #112]	; (80081e0 <TIM_OC1_SetConfig+0xc8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d10c      	bne.n	800818e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f023 0308 	bic.w	r3, r3, #8
 800817a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f023 0304 	bic.w	r3, r3, #4
 800818c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a13      	ldr	r2, [pc, #76]	; (80081e0 <TIM_OC1_SetConfig+0xc8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d111      	bne.n	80081ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800819c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	621a      	str	r2, [r3, #32]
}
 80081d4:	bf00      	nop
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	40010000 	.word	0x40010000

080081e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	f023 0210 	bic.w	r2, r3, #16
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800821a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f023 0320 	bic.w	r3, r3, #32
 800822e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	4313      	orrs	r3, r2
 800823a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a1e      	ldr	r2, [pc, #120]	; (80082b8 <TIM_OC2_SetConfig+0xd4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d10d      	bne.n	8008260 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	4313      	orrs	r3, r2
 8008256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a15      	ldr	r2, [pc, #84]	; (80082b8 <TIM_OC2_SetConfig+0xd4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d113      	bne.n	8008290 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800826e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	621a      	str	r2, [r3, #32]
}
 80082aa:	bf00      	nop
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	40010000 	.word	0x40010000

080082bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	021b      	lsls	r3, r3, #8
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1d      	ldr	r2, [pc, #116]	; (800838c <TIM_OC3_SetConfig+0xd0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d10d      	bne.n	8008336 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	021b      	lsls	r3, r3, #8
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a14      	ldr	r2, [pc, #80]	; (800838c <TIM_OC3_SetConfig+0xd0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d113      	bne.n	8008366 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800834c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40010000 	.word	0x40010000

08008390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	021b      	lsls	r3, r3, #8
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	031b      	lsls	r3, r3, #12
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a10      	ldr	r2, [pc, #64]	; (800842c <TIM_OC4_SetConfig+0x9c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d109      	bne.n	8008404 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	019b      	lsls	r3, r3, #6
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	4313      	orrs	r3, r2
 8008402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40010000 	.word	0x40010000

08008430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	f023 0201 	bic.w	r2, r3, #1
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800845a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f023 030a 	bic.w	r3, r3, #10
 800846c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	621a      	str	r2, [r3, #32]
}
 8008482:	bf00      	nop
 8008484:	371c      	adds	r7, #28
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800848e:	b480      	push	{r7}
 8008490:	b087      	sub	sp, #28
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	f023 0210 	bic.w	r2, r3, #16
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	031b      	lsls	r3, r3, #12
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	621a      	str	r2, [r3, #32]
}
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b085      	sub	sp, #20
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	f043 0307 	orr.w	r3, r3, #7
 8008510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	609a      	str	r2, [r3, #8]
}
 8008518:	bf00      	nop
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800853e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	021a      	lsls	r2, r3, #8
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	431a      	orrs	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4313      	orrs	r3, r2
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	609a      	str	r2, [r3, #8]
}
 8008558:	bf00      	nop
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f003 031f 	and.w	r3, r3, #31
 8008576:	2201      	movs	r2, #1
 8008578:	fa02 f303 	lsl.w	r3, r2, r3
 800857c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a1a      	ldr	r2, [r3, #32]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	43db      	mvns	r3, r3
 8008586:	401a      	ands	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a1a      	ldr	r2, [r3, #32]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f003 031f 	and.w	r3, r3, #31
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	fa01 f303 	lsl.w	r3, r1, r3
 800859c:	431a      	orrs	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	621a      	str	r2, [r3, #32]
}
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e050      	b.n	800866a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a1c      	ldr	r2, [pc, #112]	; (8008678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d018      	beq.n	800863e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008614:	d013      	beq.n	800863e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a18      	ldr	r2, [pc, #96]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00e      	beq.n	800863e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a16      	ldr	r2, [pc, #88]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d009      	beq.n	800863e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a15      	ldr	r2, [pc, #84]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d004      	beq.n	800863e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a13      	ldr	r2, [pc, #76]	; (8008688 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d10c      	bne.n	8008658 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4313      	orrs	r3, r2
 800864e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40010000 	.word	0x40010000
 800867c:	40000400 	.word	0x40000400
 8008680:	40000800 	.word	0x40000800
 8008684:	40000c00 	.word	0x40000c00
 8008688:	40014000 	.word	0x40014000

0800868c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e03f      	b.n	8008746 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fb f8ec 	bl	80038b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2224      	movs	r2, #36	; 0x24
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fd7b 	bl	80091f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800870c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	695a      	ldr	r2, [r3, #20]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800871c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800872c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b08a      	sub	sp, #40	; 0x28
 8008752:	af02      	add	r7, sp, #8
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	4613      	mov	r3, r2
 800875c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b20      	cmp	r3, #32
 800876c:	d17c      	bne.n	8008868 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <HAL_UART_Transmit+0x2c>
 8008774:	88fb      	ldrh	r3, [r7, #6]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e075      	b.n	800886a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008784:	2b01      	cmp	r3, #1
 8008786:	d101      	bne.n	800878c <HAL_UART_Transmit+0x3e>
 8008788:	2302      	movs	r3, #2
 800878a:	e06e      	b.n	800886a <HAL_UART_Transmit+0x11c>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2221      	movs	r2, #33	; 0x21
 800879e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087a2:	f7fb f969 	bl	8003a78 <HAL_GetTick>
 80087a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	88fa      	ldrh	r2, [r7, #6]
 80087ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	88fa      	ldrh	r2, [r7, #6]
 80087b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087bc:	d108      	bne.n	80087d0 <HAL_UART_Transmit+0x82>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	61bb      	str	r3, [r7, #24]
 80087ce:	e003      	b.n	80087d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80087e0:	e02a      	b.n	8008838 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2200      	movs	r2, #0
 80087ea:	2180      	movs	r1, #128	; 0x80
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 faf9 	bl	8008de4 <UART_WaitOnFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e036      	b.n	800886a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10b      	bne.n	800881a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008810:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	3302      	adds	r3, #2
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	e007      	b.n	800882a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	781a      	ldrb	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	3301      	adds	r3, #1
 8008828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1cf      	bne.n	80087e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2200      	movs	r2, #0
 800884a:	2140      	movs	r1, #64	; 0x40
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 fac9 	bl	8008de4 <UART_WaitOnFlagUntilTimeout>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e006      	b.n	800886a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	e000      	b.n	800886a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008868:	2302      	movs	r3, #2
  }
}
 800886a:	4618      	mov	r0, r3
 800886c:	3720      	adds	r7, #32
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b0ba      	sub	sp, #232	; 0xe8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800889a:	2300      	movs	r3, #0
 800889c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80088b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10f      	bne.n	80088da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <HAL_UART_IRQHandler+0x66>
 80088c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fbd3 	bl	800907e <UART_Receive_IT>
      return;
 80088d8:	e256      	b.n	8008d88 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 80de 	beq.w	8008aa0 <HAL_UART_IRQHandler+0x22c>
 80088e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80d1 	beq.w	8008aa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <HAL_UART_IRQHandler+0xae>
 800890a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800890e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	f043 0201 	orr.w	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00b      	beq.n	8008946 <HAL_UART_IRQHandler+0xd2>
 800892e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	f043 0202 	orr.w	r2, r3, #2
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00b      	beq.n	800896a <HAL_UART_IRQHandler+0xf6>
 8008952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d005      	beq.n	800896a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	f043 0204 	orr.w	r2, r3, #4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800896a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896e:	f003 0308 	and.w	r3, r3, #8
 8008972:	2b00      	cmp	r3, #0
 8008974:	d011      	beq.n	800899a <HAL_UART_IRQHandler+0x126>
 8008976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	f043 0208 	orr.w	r2, r3, #8
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 81ed 	beq.w	8008d7e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a8:	f003 0320 	and.w	r3, r3, #32
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <HAL_UART_IRQHandler+0x14e>
 80089b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b4:	f003 0320 	and.w	r3, r3, #32
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fb5e 	bl	800907e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089cc:	2b40      	cmp	r3, #64	; 0x40
 80089ce:	bf0c      	ite	eq
 80089d0:	2301      	moveq	r3, #1
 80089d2:	2300      	movne	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d103      	bne.n	80089ee <HAL_UART_IRQHandler+0x17a>
 80089e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d04f      	beq.n	8008a8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa66 	bl	8008ec0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d141      	bne.n	8008a86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3314      	adds	r3, #20
 8008a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3314      	adds	r3, #20
 8008a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1d9      	bne.n	8008a02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d013      	beq.n	8008a7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	4a7d      	ldr	r2, [pc, #500]	; (8008c50 <HAL_UART_IRQHandler+0x3dc>)
 8008a5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fb ffcc 	bl	8004a00 <HAL_DMA_Abort_IT>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d016      	beq.n	8008a9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a7c:	e00e      	b.n	8008a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f99a 	bl	8008db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a84:	e00a      	b.n	8008a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f996 	bl	8008db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a8c:	e006      	b.n	8008a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f992 	bl	8008db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a9a:	e170      	b.n	8008d7e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a9c:	bf00      	nop
    return;
 8008a9e:	e16e      	b.n	8008d7e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	f040 814a 	bne.w	8008d3e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aae:	f003 0310 	and.w	r3, r3, #16
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 8143 	beq.w	8008d3e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008abc:	f003 0310 	and.w	r3, r3, #16
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 813c 	beq.w	8008d3e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60bb      	str	r3, [r7, #8]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	60bb      	str	r3, [r7, #8]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	60bb      	str	r3, [r7, #8]
 8008ada:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b40      	cmp	r3, #64	; 0x40
 8008ae8:	f040 80b4 	bne.w	8008c54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008af8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8140 	beq.w	8008d82 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	f080 8139 	bcs.w	8008d82 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b22:	f000 8088 	beq.w	8008c36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	330c      	adds	r3, #12
 8008b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1d9      	bne.n	8008b26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3314      	adds	r3, #20
 8008b78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3314      	adds	r3, #20
 8008b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e1      	bne.n	8008b72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3314      	adds	r3, #20
 8008bb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3314      	adds	r3, #20
 8008bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008bd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008bd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e3      	bne.n	8008bae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c06:	f023 0310 	bic.w	r3, r3, #16
 8008c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	330c      	adds	r3, #12
 8008c14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c18:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e3      	bne.n	8008bf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fb fe75 	bl	8004920 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f8c0 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c4c:	e099      	b.n	8008d82 <HAL_UART_IRQHandler+0x50e>
 8008c4e:	bf00      	nop
 8008c50:	08008f87 	.word	0x08008f87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 808b 	beq.w	8008d86 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 8086 	beq.w	8008d86 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	330c      	adds	r3, #12
 8008c80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	330c      	adds	r3, #12
 8008c9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c9e:	647a      	str	r2, [r7, #68]	; 0x44
 8008ca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e3      	bne.n	8008c7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3314      	adds	r3, #20
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	f023 0301 	bic.w	r3, r3, #1
 8008cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8008cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e3      	bne.n	8008cb2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0310 	bic.w	r3, r3, #16
 8008d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	330c      	adds	r3, #12
 8008d18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d1c:	61fa      	str	r2, [r7, #28]
 8008d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	69b9      	ldr	r1, [r7, #24]
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	617b      	str	r3, [r7, #20]
   return(result);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e3      	bne.n	8008cf8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f848 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d3c:	e023      	b.n	8008d86 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d009      	beq.n	8008d5e <HAL_UART_IRQHandler+0x4ea>
 8008d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f929 	bl	8008fae <UART_Transmit_IT>
    return;
 8008d5c:	e014      	b.n	8008d88 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00e      	beq.n	8008d88 <HAL_UART_IRQHandler+0x514>
 8008d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d008      	beq.n	8008d88 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f969 	bl	800904e <UART_EndTransmit_IT>
    return;
 8008d7c:	e004      	b.n	8008d88 <HAL_UART_IRQHandler+0x514>
    return;
 8008d7e:	bf00      	nop
 8008d80:	e002      	b.n	8008d88 <HAL_UART_IRQHandler+0x514>
      return;
 8008d82:	bf00      	nop
 8008d84:	e000      	b.n	8008d88 <HAL_UART_IRQHandler+0x514>
      return;
 8008d86:	bf00      	nop
  }
}
 8008d88:	37e8      	adds	r7, #232	; 0xe8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop

08008d90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b090      	sub	sp, #64	; 0x40
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df4:	e050      	b.n	8008e98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d04c      	beq.n	8008e98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d007      	beq.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e04:	f7fa fe38 	bl	8003a78 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d241      	bcs.n	8008e98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	330c      	adds	r3, #12
 8008e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	330c      	adds	r3, #12
 8008e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e34:	637a      	str	r2, [r7, #52]	; 0x34
 8008e36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e5      	bne.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3314      	adds	r3, #20
 8008e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	613b      	str	r3, [r7, #16]
   return(result);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f023 0301 	bic.w	r3, r3, #1
 8008e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e68:	623a      	str	r2, [r7, #32]
 8008e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	69f9      	ldr	r1, [r7, #28]
 8008e6e:	6a3a      	ldr	r2, [r7, #32]
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e5      	bne.n	8008e48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e00f      	b.n	8008eb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2301      	moveq	r3, #1
 8008eaa:	2300      	movne	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	461a      	mov	r2, r3
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d09f      	beq.n	8008df6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3740      	adds	r7, #64	; 0x40
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b095      	sub	sp, #84	; 0x54
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	330c      	adds	r3, #12
 8008ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ee8:	643a      	str	r2, [r7, #64]	; 0x40
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e5      	bne.n	8008ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3314      	adds	r3, #20
 8008f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f023 0301 	bic.w	r3, r3, #1
 8008f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3314      	adds	r3, #20
 8008f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e5      	bne.n	8008efc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d119      	bne.n	8008f6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f023 0310 	bic.w	r3, r3, #16
 8008f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	330c      	adds	r3, #12
 8008f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f58:	61ba      	str	r2, [r7, #24]
 8008f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5c:	6979      	ldr	r1, [r7, #20]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	e841 2300 	strex	r3, r2, [r1]
 8008f64:	613b      	str	r3, [r7, #16]
   return(result);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e5      	bne.n	8008f38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f7a:	bf00      	nop
 8008f7c:	3754      	adds	r7, #84	; 0x54
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff ff09 	bl	8008db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fa6:	bf00      	nop
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b085      	sub	sp, #20
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b21      	cmp	r3, #33	; 0x21
 8008fc0:	d13e      	bne.n	8009040 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fca:	d114      	bne.n	8008ff6 <UART_Transmit_IT+0x48>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d110      	bne.n	8008ff6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a1b      	ldr	r3, [r3, #32]
 8008fd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fe8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	1c9a      	adds	r2, r3, #2
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	621a      	str	r2, [r3, #32]
 8008ff4:	e008      	b.n	8009008 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	1c59      	adds	r1, r3, #1
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6211      	str	r1, [r2, #32]
 8009000:	781a      	ldrb	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29b      	uxth	r3, r3
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	4619      	mov	r1, r3
 8009016:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10f      	bne.n	800903c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800902a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800903a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	e000      	b.n	8009042 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009040:	2302      	movs	r3, #2
  }
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009064:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2220      	movs	r2, #32
 800906a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fe8e 	bl	8008d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b08c      	sub	sp, #48	; 0x30
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b22      	cmp	r3, #34	; 0x22
 8009090:	f040 80ab 	bne.w	80091ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800909c:	d117      	bne.n	80090ce <UART_Receive_IT+0x50>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d113      	bne.n	80090ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090bc:	b29a      	uxth	r2, r3
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	1c9a      	adds	r2, r3, #2
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	629a      	str	r2, [r3, #40]	; 0x28
 80090cc:	e026      	b.n	800911c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80090d4:	2300      	movs	r3, #0
 80090d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e0:	d007      	beq.n	80090f2 <UART_Receive_IT+0x74>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <UART_Receive_IT+0x82>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	e008      	b.n	8009112 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800910c:	b2da      	uxtb	r2, r3
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009120:	b29b      	uxth	r3, r3
 8009122:	3b01      	subs	r3, #1
 8009124:	b29b      	uxth	r3, r3
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4619      	mov	r1, r3
 800912a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800912c:	2b00      	cmp	r3, #0
 800912e:	d15a      	bne.n	80091e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 0220 	bic.w	r2, r2, #32
 800913e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800914e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695a      	ldr	r2, [r3, #20]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0201 	bic.w	r2, r2, #1
 800915e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916c:	2b01      	cmp	r3, #1
 800916e:	d135      	bne.n	80091dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	330c      	adds	r3, #12
 800917c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	613b      	str	r3, [r7, #16]
   return(result);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f023 0310 	bic.w	r3, r3, #16
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	330c      	adds	r3, #12
 8009194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009196:	623a      	str	r2, [r7, #32]
 8009198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	69f9      	ldr	r1, [r7, #28]
 800919c:	6a3a      	ldr	r2, [r7, #32]
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e5      	bne.n	8009176 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0310 	and.w	r3, r3, #16
 80091b4:	2b10      	cmp	r3, #16
 80091b6:	d10a      	bne.n	80091ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7ff fdf9 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
 80091da:	e002      	b.n	80091e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff fde1 	bl	8008da4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	e002      	b.n	80091ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e000      	b.n	80091ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80091ea:	2302      	movs	r3, #2
  }
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3730      	adds	r7, #48	; 0x30
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091f8:	b0c0      	sub	sp, #256	; 0x100
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009210:	68d9      	ldr	r1, [r3, #12]
 8009212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	ea40 0301 	orr.w	r3, r0, r1
 800921c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800921e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	431a      	orrs	r2, r3
 800922c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	431a      	orrs	r2, r3
 8009234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	4313      	orrs	r3, r2
 800923c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800924c:	f021 010c 	bic.w	r1, r1, #12
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800925a:	430b      	orrs	r3, r1
 800925c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800925e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800926a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926e:	6999      	ldr	r1, [r3, #24]
 8009270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	ea40 0301 	orr.w	r3, r0, r1
 800927a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800927c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	4b8f      	ldr	r3, [pc, #572]	; (80094c0 <UART_SetConfig+0x2cc>)
 8009284:	429a      	cmp	r2, r3
 8009286:	d005      	beq.n	8009294 <UART_SetConfig+0xa0>
 8009288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4b8d      	ldr	r3, [pc, #564]	; (80094c4 <UART_SetConfig+0x2d0>)
 8009290:	429a      	cmp	r2, r3
 8009292:	d104      	bne.n	800929e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009294:	f7fe f9dc 	bl	8007650 <HAL_RCC_GetPCLK2Freq>
 8009298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800929c:	e003      	b.n	80092a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800929e:	f7fe f9c3 	bl	8007628 <HAL_RCC_GetPCLK1Freq>
 80092a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092b0:	f040 810c 	bne.w	80094cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80092c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80092c6:	4622      	mov	r2, r4
 80092c8:	462b      	mov	r3, r5
 80092ca:	1891      	adds	r1, r2, r2
 80092cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80092ce:	415b      	adcs	r3, r3
 80092d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80092d6:	4621      	mov	r1, r4
 80092d8:	eb12 0801 	adds.w	r8, r2, r1
 80092dc:	4629      	mov	r1, r5
 80092de:	eb43 0901 	adc.w	r9, r3, r1
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092f6:	4690      	mov	r8, r2
 80092f8:	4699      	mov	r9, r3
 80092fa:	4623      	mov	r3, r4
 80092fc:	eb18 0303 	adds.w	r3, r8, r3
 8009300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009304:	462b      	mov	r3, r5
 8009306:	eb49 0303 	adc.w	r3, r9, r3
 800930a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800930e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800931a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800931e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009322:	460b      	mov	r3, r1
 8009324:	18db      	adds	r3, r3, r3
 8009326:	653b      	str	r3, [r7, #80]	; 0x50
 8009328:	4613      	mov	r3, r2
 800932a:	eb42 0303 	adc.w	r3, r2, r3
 800932e:	657b      	str	r3, [r7, #84]	; 0x54
 8009330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009338:	f7f7 fcae 	bl	8000c98 <__aeabi_uldivmod>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4b61      	ldr	r3, [pc, #388]	; (80094c8 <UART_SetConfig+0x2d4>)
 8009342:	fba3 2302 	umull	r2, r3, r3, r2
 8009346:	095b      	lsrs	r3, r3, #5
 8009348:	011c      	lsls	r4, r3, #4
 800934a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800934e:	2200      	movs	r2, #0
 8009350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800935c:	4642      	mov	r2, r8
 800935e:	464b      	mov	r3, r9
 8009360:	1891      	adds	r1, r2, r2
 8009362:	64b9      	str	r1, [r7, #72]	; 0x48
 8009364:	415b      	adcs	r3, r3
 8009366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800936c:	4641      	mov	r1, r8
 800936e:	eb12 0a01 	adds.w	sl, r2, r1
 8009372:	4649      	mov	r1, r9
 8009374:	eb43 0b01 	adc.w	fp, r3, r1
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	f04f 0300 	mov.w	r3, #0
 8009380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800938c:	4692      	mov	sl, r2
 800938e:	469b      	mov	fp, r3
 8009390:	4643      	mov	r3, r8
 8009392:	eb1a 0303 	adds.w	r3, sl, r3
 8009396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800939a:	464b      	mov	r3, r9
 800939c:	eb4b 0303 	adc.w	r3, fp, r3
 80093a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093b8:	460b      	mov	r3, r1
 80093ba:	18db      	adds	r3, r3, r3
 80093bc:	643b      	str	r3, [r7, #64]	; 0x40
 80093be:	4613      	mov	r3, r2
 80093c0:	eb42 0303 	adc.w	r3, r2, r3
 80093c4:	647b      	str	r3, [r7, #68]	; 0x44
 80093c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80093ce:	f7f7 fc63 	bl	8000c98 <__aeabi_uldivmod>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4611      	mov	r1, r2
 80093d8:	4b3b      	ldr	r3, [pc, #236]	; (80094c8 <UART_SetConfig+0x2d4>)
 80093da:	fba3 2301 	umull	r2, r3, r3, r1
 80093de:	095b      	lsrs	r3, r3, #5
 80093e0:	2264      	movs	r2, #100	; 0x64
 80093e2:	fb02 f303 	mul.w	r3, r2, r3
 80093e6:	1acb      	subs	r3, r1, r3
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80093ee:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <UART_SetConfig+0x2d4>)
 80093f0:	fba3 2302 	umull	r2, r3, r3, r2
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093fc:	441c      	add	r4, r3
 80093fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009402:	2200      	movs	r2, #0
 8009404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800940c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009410:	4642      	mov	r2, r8
 8009412:	464b      	mov	r3, r9
 8009414:	1891      	adds	r1, r2, r2
 8009416:	63b9      	str	r1, [r7, #56]	; 0x38
 8009418:	415b      	adcs	r3, r3
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800941c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009420:	4641      	mov	r1, r8
 8009422:	1851      	adds	r1, r2, r1
 8009424:	6339      	str	r1, [r7, #48]	; 0x30
 8009426:	4649      	mov	r1, r9
 8009428:	414b      	adcs	r3, r1
 800942a:	637b      	str	r3, [r7, #52]	; 0x34
 800942c:	f04f 0200 	mov.w	r2, #0
 8009430:	f04f 0300 	mov.w	r3, #0
 8009434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009438:	4659      	mov	r1, fp
 800943a:	00cb      	lsls	r3, r1, #3
 800943c:	4651      	mov	r1, sl
 800943e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009442:	4651      	mov	r1, sl
 8009444:	00ca      	lsls	r2, r1, #3
 8009446:	4610      	mov	r0, r2
 8009448:	4619      	mov	r1, r3
 800944a:	4603      	mov	r3, r0
 800944c:	4642      	mov	r2, r8
 800944e:	189b      	adds	r3, r3, r2
 8009450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009454:	464b      	mov	r3, r9
 8009456:	460a      	mov	r2, r1
 8009458:	eb42 0303 	adc.w	r3, r2, r3
 800945c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800946c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009474:	460b      	mov	r3, r1
 8009476:	18db      	adds	r3, r3, r3
 8009478:	62bb      	str	r3, [r7, #40]	; 0x28
 800947a:	4613      	mov	r3, r2
 800947c:	eb42 0303 	adc.w	r3, r2, r3
 8009480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800948a:	f7f7 fc05 	bl	8000c98 <__aeabi_uldivmod>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <UART_SetConfig+0x2d4>)
 8009494:	fba3 1302 	umull	r1, r3, r3, r2
 8009498:	095b      	lsrs	r3, r3, #5
 800949a:	2164      	movs	r1, #100	; 0x64
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	3332      	adds	r3, #50	; 0x32
 80094a6:	4a08      	ldr	r2, [pc, #32]	; (80094c8 <UART_SetConfig+0x2d4>)
 80094a8:	fba2 2303 	umull	r2, r3, r2, r3
 80094ac:	095b      	lsrs	r3, r3, #5
 80094ae:	f003 0207 	and.w	r2, r3, #7
 80094b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4422      	add	r2, r4
 80094ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094bc:	e105      	b.n	80096ca <UART_SetConfig+0x4d6>
 80094be:	bf00      	nop
 80094c0:	40011000 	.word	0x40011000
 80094c4:	40011400 	.word	0x40011400
 80094c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80094da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80094de:	4642      	mov	r2, r8
 80094e0:	464b      	mov	r3, r9
 80094e2:	1891      	adds	r1, r2, r2
 80094e4:	6239      	str	r1, [r7, #32]
 80094e6:	415b      	adcs	r3, r3
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094ee:	4641      	mov	r1, r8
 80094f0:	1854      	adds	r4, r2, r1
 80094f2:	4649      	mov	r1, r9
 80094f4:	eb43 0501 	adc.w	r5, r3, r1
 80094f8:	f04f 0200 	mov.w	r2, #0
 80094fc:	f04f 0300 	mov.w	r3, #0
 8009500:	00eb      	lsls	r3, r5, #3
 8009502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009506:	00e2      	lsls	r2, r4, #3
 8009508:	4614      	mov	r4, r2
 800950a:	461d      	mov	r5, r3
 800950c:	4643      	mov	r3, r8
 800950e:	18e3      	adds	r3, r4, r3
 8009510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009514:	464b      	mov	r3, r9
 8009516:	eb45 0303 	adc.w	r3, r5, r3
 800951a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800951e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800952a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800953a:	4629      	mov	r1, r5
 800953c:	008b      	lsls	r3, r1, #2
 800953e:	4621      	mov	r1, r4
 8009540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009544:	4621      	mov	r1, r4
 8009546:	008a      	lsls	r2, r1, #2
 8009548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800954c:	f7f7 fba4 	bl	8000c98 <__aeabi_uldivmod>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4b60      	ldr	r3, [pc, #384]	; (80096d8 <UART_SetConfig+0x4e4>)
 8009556:	fba3 2302 	umull	r2, r3, r3, r2
 800955a:	095b      	lsrs	r3, r3, #5
 800955c:	011c      	lsls	r4, r3, #4
 800955e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009562:	2200      	movs	r2, #0
 8009564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800956c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	1891      	adds	r1, r2, r2
 8009576:	61b9      	str	r1, [r7, #24]
 8009578:	415b      	adcs	r3, r3
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009580:	4641      	mov	r1, r8
 8009582:	1851      	adds	r1, r2, r1
 8009584:	6139      	str	r1, [r7, #16]
 8009586:	4649      	mov	r1, r9
 8009588:	414b      	adcs	r3, r1
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	f04f 0200 	mov.w	r2, #0
 8009590:	f04f 0300 	mov.w	r3, #0
 8009594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009598:	4659      	mov	r1, fp
 800959a:	00cb      	lsls	r3, r1, #3
 800959c:	4651      	mov	r1, sl
 800959e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095a2:	4651      	mov	r1, sl
 80095a4:	00ca      	lsls	r2, r1, #3
 80095a6:	4610      	mov	r0, r2
 80095a8:	4619      	mov	r1, r3
 80095aa:	4603      	mov	r3, r0
 80095ac:	4642      	mov	r2, r8
 80095ae:	189b      	adds	r3, r3, r2
 80095b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095b4:	464b      	mov	r3, r9
 80095b6:	460a      	mov	r2, r1
 80095b8:	eb42 0303 	adc.w	r3, r2, r3
 80095bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80095ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	f04f 0300 	mov.w	r3, #0
 80095d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80095d8:	4649      	mov	r1, r9
 80095da:	008b      	lsls	r3, r1, #2
 80095dc:	4641      	mov	r1, r8
 80095de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095e2:	4641      	mov	r1, r8
 80095e4:	008a      	lsls	r2, r1, #2
 80095e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80095ea:	f7f7 fb55 	bl	8000c98 <__aeabi_uldivmod>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4b39      	ldr	r3, [pc, #228]	; (80096d8 <UART_SetConfig+0x4e4>)
 80095f4:	fba3 1302 	umull	r1, r3, r3, r2
 80095f8:	095b      	lsrs	r3, r3, #5
 80095fa:	2164      	movs	r1, #100	; 0x64
 80095fc:	fb01 f303 	mul.w	r3, r1, r3
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	3332      	adds	r3, #50	; 0x32
 8009606:	4a34      	ldr	r2, [pc, #208]	; (80096d8 <UART_SetConfig+0x4e4>)
 8009608:	fba2 2303 	umull	r2, r3, r2, r3
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009612:	441c      	add	r4, r3
 8009614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009618:	2200      	movs	r2, #0
 800961a:	673b      	str	r3, [r7, #112]	; 0x70
 800961c:	677a      	str	r2, [r7, #116]	; 0x74
 800961e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009622:	4642      	mov	r2, r8
 8009624:	464b      	mov	r3, r9
 8009626:	1891      	adds	r1, r2, r2
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	415b      	adcs	r3, r3
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009632:	4641      	mov	r1, r8
 8009634:	1851      	adds	r1, r2, r1
 8009636:	6039      	str	r1, [r7, #0]
 8009638:	4649      	mov	r1, r9
 800963a:	414b      	adcs	r3, r1
 800963c:	607b      	str	r3, [r7, #4]
 800963e:	f04f 0200 	mov.w	r2, #0
 8009642:	f04f 0300 	mov.w	r3, #0
 8009646:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800964a:	4659      	mov	r1, fp
 800964c:	00cb      	lsls	r3, r1, #3
 800964e:	4651      	mov	r1, sl
 8009650:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009654:	4651      	mov	r1, sl
 8009656:	00ca      	lsls	r2, r1, #3
 8009658:	4610      	mov	r0, r2
 800965a:	4619      	mov	r1, r3
 800965c:	4603      	mov	r3, r0
 800965e:	4642      	mov	r2, r8
 8009660:	189b      	adds	r3, r3, r2
 8009662:	66bb      	str	r3, [r7, #104]	; 0x68
 8009664:	464b      	mov	r3, r9
 8009666:	460a      	mov	r2, r1
 8009668:	eb42 0303 	adc.w	r3, r2, r3
 800966c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800966e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	663b      	str	r3, [r7, #96]	; 0x60
 8009678:	667a      	str	r2, [r7, #100]	; 0x64
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	f04f 0300 	mov.w	r3, #0
 8009682:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009686:	4649      	mov	r1, r9
 8009688:	008b      	lsls	r3, r1, #2
 800968a:	4641      	mov	r1, r8
 800968c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009690:	4641      	mov	r1, r8
 8009692:	008a      	lsls	r2, r1, #2
 8009694:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009698:	f7f7 fafe 	bl	8000c98 <__aeabi_uldivmod>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <UART_SetConfig+0x4e4>)
 80096a2:	fba3 1302 	umull	r1, r3, r3, r2
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	2164      	movs	r1, #100	; 0x64
 80096aa:	fb01 f303 	mul.w	r3, r1, r3
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	011b      	lsls	r3, r3, #4
 80096b2:	3332      	adds	r3, #50	; 0x32
 80096b4:	4a08      	ldr	r2, [pc, #32]	; (80096d8 <UART_SetConfig+0x4e4>)
 80096b6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ba:	095b      	lsrs	r3, r3, #5
 80096bc:	f003 020f 	and.w	r2, r3, #15
 80096c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4422      	add	r2, r4
 80096c8:	609a      	str	r2, [r3, #8]
}
 80096ca:	bf00      	nop
 80096cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80096d0:	46bd      	mov	sp, r7
 80096d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096d6:	bf00      	nop
 80096d8:	51eb851f 	.word	0x51eb851f

080096dc <__errno>:
 80096dc:	4b01      	ldr	r3, [pc, #4]	; (80096e4 <__errno+0x8>)
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	20000024 	.word	0x20000024

080096e8 <__libc_init_array>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	4d0d      	ldr	r5, [pc, #52]	; (8009720 <__libc_init_array+0x38>)
 80096ec:	4c0d      	ldr	r4, [pc, #52]	; (8009724 <__libc_init_array+0x3c>)
 80096ee:	1b64      	subs	r4, r4, r5
 80096f0:	10a4      	asrs	r4, r4, #2
 80096f2:	2600      	movs	r6, #0
 80096f4:	42a6      	cmp	r6, r4
 80096f6:	d109      	bne.n	800970c <__libc_init_array+0x24>
 80096f8:	4d0b      	ldr	r5, [pc, #44]	; (8009728 <__libc_init_array+0x40>)
 80096fa:	4c0c      	ldr	r4, [pc, #48]	; (800972c <__libc_init_array+0x44>)
 80096fc:	f003 f910 	bl	800c920 <_init>
 8009700:	1b64      	subs	r4, r4, r5
 8009702:	10a4      	asrs	r4, r4, #2
 8009704:	2600      	movs	r6, #0
 8009706:	42a6      	cmp	r6, r4
 8009708:	d105      	bne.n	8009716 <__libc_init_array+0x2e>
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009710:	4798      	blx	r3
 8009712:	3601      	adds	r6, #1
 8009714:	e7ee      	b.n	80096f4 <__libc_init_array+0xc>
 8009716:	f855 3b04 	ldr.w	r3, [r5], #4
 800971a:	4798      	blx	r3
 800971c:	3601      	adds	r6, #1
 800971e:	e7f2      	b.n	8009706 <__libc_init_array+0x1e>
 8009720:	0800d6d4 	.word	0x0800d6d4
 8009724:	0800d6d4 	.word	0x0800d6d4
 8009728:	0800d6d4 	.word	0x0800d6d4
 800972c:	0800d6d8 	.word	0x0800d6d8

08009730 <malloc>:
 8009730:	4b02      	ldr	r3, [pc, #8]	; (800973c <malloc+0xc>)
 8009732:	4601      	mov	r1, r0
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	f000 b88d 	b.w	8009854 <_malloc_r>
 800973a:	bf00      	nop
 800973c:	20000024 	.word	0x20000024

08009740 <free>:
 8009740:	4b02      	ldr	r3, [pc, #8]	; (800974c <free+0xc>)
 8009742:	4601      	mov	r1, r0
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	f000 b819 	b.w	800977c <_free_r>
 800974a:	bf00      	nop
 800974c:	20000024 	.word	0x20000024

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <memset>:
 800976c:	4402      	add	r2, r0
 800976e:	4603      	mov	r3, r0
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <memset+0xa>
 8009774:	4770      	bx	lr
 8009776:	f803 1b01 	strb.w	r1, [r3], #1
 800977a:	e7f9      	b.n	8009770 <memset+0x4>

0800977c <_free_r>:
 800977c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977e:	2900      	cmp	r1, #0
 8009780:	d044      	beq.n	800980c <_free_r+0x90>
 8009782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009786:	9001      	str	r0, [sp, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f1a1 0404 	sub.w	r4, r1, #4
 800978e:	bfb8      	it	lt
 8009790:	18e4      	addlt	r4, r4, r3
 8009792:	f001 fbeb 	bl	800af6c <__malloc_lock>
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <_free_r+0x94>)
 8009798:	9801      	ldr	r0, [sp, #4]
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	b933      	cbnz	r3, 80097ac <_free_r+0x30>
 800979e:	6063      	str	r3, [r4, #4]
 80097a0:	6014      	str	r4, [r2, #0]
 80097a2:	b003      	add	sp, #12
 80097a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a8:	f001 bbe6 	b.w	800af78 <__malloc_unlock>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d908      	bls.n	80097c2 <_free_r+0x46>
 80097b0:	6825      	ldr	r5, [r4, #0]
 80097b2:	1961      	adds	r1, r4, r5
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf01      	itttt	eq
 80097b8:	6819      	ldreq	r1, [r3, #0]
 80097ba:	685b      	ldreq	r3, [r3, #4]
 80097bc:	1949      	addeq	r1, r1, r5
 80097be:	6021      	streq	r1, [r4, #0]
 80097c0:	e7ed      	b.n	800979e <_free_r+0x22>
 80097c2:	461a      	mov	r2, r3
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	b10b      	cbz	r3, 80097cc <_free_r+0x50>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d9fa      	bls.n	80097c2 <_free_r+0x46>
 80097cc:	6811      	ldr	r1, [r2, #0]
 80097ce:	1855      	adds	r5, r2, r1
 80097d0:	42a5      	cmp	r5, r4
 80097d2:	d10b      	bne.n	80097ec <_free_r+0x70>
 80097d4:	6824      	ldr	r4, [r4, #0]
 80097d6:	4421      	add	r1, r4
 80097d8:	1854      	adds	r4, r2, r1
 80097da:	42a3      	cmp	r3, r4
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	d1e0      	bne.n	80097a2 <_free_r+0x26>
 80097e0:	681c      	ldr	r4, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	6053      	str	r3, [r2, #4]
 80097e6:	4421      	add	r1, r4
 80097e8:	6011      	str	r1, [r2, #0]
 80097ea:	e7da      	b.n	80097a2 <_free_r+0x26>
 80097ec:	d902      	bls.n	80097f4 <_free_r+0x78>
 80097ee:	230c      	movs	r3, #12
 80097f0:	6003      	str	r3, [r0, #0]
 80097f2:	e7d6      	b.n	80097a2 <_free_r+0x26>
 80097f4:	6825      	ldr	r5, [r4, #0]
 80097f6:	1961      	adds	r1, r4, r5
 80097f8:	428b      	cmp	r3, r1
 80097fa:	bf04      	itt	eq
 80097fc:	6819      	ldreq	r1, [r3, #0]
 80097fe:	685b      	ldreq	r3, [r3, #4]
 8009800:	6063      	str	r3, [r4, #4]
 8009802:	bf04      	itt	eq
 8009804:	1949      	addeq	r1, r1, r5
 8009806:	6021      	streq	r1, [r4, #0]
 8009808:	6054      	str	r4, [r2, #4]
 800980a:	e7ca      	b.n	80097a2 <_free_r+0x26>
 800980c:	b003      	add	sp, #12
 800980e:	bd30      	pop	{r4, r5, pc}
 8009810:	20000928 	.word	0x20000928

08009814 <sbrk_aligned>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	4e0e      	ldr	r6, [pc, #56]	; (8009850 <sbrk_aligned+0x3c>)
 8009818:	460c      	mov	r4, r1
 800981a:	6831      	ldr	r1, [r6, #0]
 800981c:	4605      	mov	r5, r0
 800981e:	b911      	cbnz	r1, 8009826 <sbrk_aligned+0x12>
 8009820:	f000 fcf6 	bl	800a210 <_sbrk_r>
 8009824:	6030      	str	r0, [r6, #0]
 8009826:	4621      	mov	r1, r4
 8009828:	4628      	mov	r0, r5
 800982a:	f000 fcf1 	bl	800a210 <_sbrk_r>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	d00a      	beq.n	8009848 <sbrk_aligned+0x34>
 8009832:	1cc4      	adds	r4, r0, #3
 8009834:	f024 0403 	bic.w	r4, r4, #3
 8009838:	42a0      	cmp	r0, r4
 800983a:	d007      	beq.n	800984c <sbrk_aligned+0x38>
 800983c:	1a21      	subs	r1, r4, r0
 800983e:	4628      	mov	r0, r5
 8009840:	f000 fce6 	bl	800a210 <_sbrk_r>
 8009844:	3001      	adds	r0, #1
 8009846:	d101      	bne.n	800984c <sbrk_aligned+0x38>
 8009848:	f04f 34ff 	mov.w	r4, #4294967295
 800984c:	4620      	mov	r0, r4
 800984e:	bd70      	pop	{r4, r5, r6, pc}
 8009850:	2000092c 	.word	0x2000092c

08009854 <_malloc_r>:
 8009854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009858:	1ccd      	adds	r5, r1, #3
 800985a:	f025 0503 	bic.w	r5, r5, #3
 800985e:	3508      	adds	r5, #8
 8009860:	2d0c      	cmp	r5, #12
 8009862:	bf38      	it	cc
 8009864:	250c      	movcc	r5, #12
 8009866:	2d00      	cmp	r5, #0
 8009868:	4607      	mov	r7, r0
 800986a:	db01      	blt.n	8009870 <_malloc_r+0x1c>
 800986c:	42a9      	cmp	r1, r5
 800986e:	d905      	bls.n	800987c <_malloc_r+0x28>
 8009870:	230c      	movs	r3, #12
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	2600      	movs	r6, #0
 8009876:	4630      	mov	r0, r6
 8009878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800987c:	4e2e      	ldr	r6, [pc, #184]	; (8009938 <_malloc_r+0xe4>)
 800987e:	f001 fb75 	bl	800af6c <__malloc_lock>
 8009882:	6833      	ldr	r3, [r6, #0]
 8009884:	461c      	mov	r4, r3
 8009886:	bb34      	cbnz	r4, 80098d6 <_malloc_r+0x82>
 8009888:	4629      	mov	r1, r5
 800988a:	4638      	mov	r0, r7
 800988c:	f7ff ffc2 	bl	8009814 <sbrk_aligned>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	4604      	mov	r4, r0
 8009894:	d14d      	bne.n	8009932 <_malloc_r+0xde>
 8009896:	6834      	ldr	r4, [r6, #0]
 8009898:	4626      	mov	r6, r4
 800989a:	2e00      	cmp	r6, #0
 800989c:	d140      	bne.n	8009920 <_malloc_r+0xcc>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	4631      	mov	r1, r6
 80098a2:	4638      	mov	r0, r7
 80098a4:	eb04 0803 	add.w	r8, r4, r3
 80098a8:	f000 fcb2 	bl	800a210 <_sbrk_r>
 80098ac:	4580      	cmp	r8, r0
 80098ae:	d13a      	bne.n	8009926 <_malloc_r+0xd2>
 80098b0:	6821      	ldr	r1, [r4, #0]
 80098b2:	3503      	adds	r5, #3
 80098b4:	1a6d      	subs	r5, r5, r1
 80098b6:	f025 0503 	bic.w	r5, r5, #3
 80098ba:	3508      	adds	r5, #8
 80098bc:	2d0c      	cmp	r5, #12
 80098be:	bf38      	it	cc
 80098c0:	250c      	movcc	r5, #12
 80098c2:	4629      	mov	r1, r5
 80098c4:	4638      	mov	r0, r7
 80098c6:	f7ff ffa5 	bl	8009814 <sbrk_aligned>
 80098ca:	3001      	adds	r0, #1
 80098cc:	d02b      	beq.n	8009926 <_malloc_r+0xd2>
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	442b      	add	r3, r5
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	e00e      	b.n	80098f4 <_malloc_r+0xa0>
 80098d6:	6822      	ldr	r2, [r4, #0]
 80098d8:	1b52      	subs	r2, r2, r5
 80098da:	d41e      	bmi.n	800991a <_malloc_r+0xc6>
 80098dc:	2a0b      	cmp	r2, #11
 80098de:	d916      	bls.n	800990e <_malloc_r+0xba>
 80098e0:	1961      	adds	r1, r4, r5
 80098e2:	42a3      	cmp	r3, r4
 80098e4:	6025      	str	r5, [r4, #0]
 80098e6:	bf18      	it	ne
 80098e8:	6059      	strne	r1, [r3, #4]
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	bf08      	it	eq
 80098ee:	6031      	streq	r1, [r6, #0]
 80098f0:	5162      	str	r2, [r4, r5]
 80098f2:	604b      	str	r3, [r1, #4]
 80098f4:	4638      	mov	r0, r7
 80098f6:	f104 060b 	add.w	r6, r4, #11
 80098fa:	f001 fb3d 	bl	800af78 <__malloc_unlock>
 80098fe:	f026 0607 	bic.w	r6, r6, #7
 8009902:	1d23      	adds	r3, r4, #4
 8009904:	1af2      	subs	r2, r6, r3
 8009906:	d0b6      	beq.n	8009876 <_malloc_r+0x22>
 8009908:	1b9b      	subs	r3, r3, r6
 800990a:	50a3      	str	r3, [r4, r2]
 800990c:	e7b3      	b.n	8009876 <_malloc_r+0x22>
 800990e:	6862      	ldr	r2, [r4, #4]
 8009910:	42a3      	cmp	r3, r4
 8009912:	bf0c      	ite	eq
 8009914:	6032      	streq	r2, [r6, #0]
 8009916:	605a      	strne	r2, [r3, #4]
 8009918:	e7ec      	b.n	80098f4 <_malloc_r+0xa0>
 800991a:	4623      	mov	r3, r4
 800991c:	6864      	ldr	r4, [r4, #4]
 800991e:	e7b2      	b.n	8009886 <_malloc_r+0x32>
 8009920:	4634      	mov	r4, r6
 8009922:	6876      	ldr	r6, [r6, #4]
 8009924:	e7b9      	b.n	800989a <_malloc_r+0x46>
 8009926:	230c      	movs	r3, #12
 8009928:	603b      	str	r3, [r7, #0]
 800992a:	4638      	mov	r0, r7
 800992c:	f001 fb24 	bl	800af78 <__malloc_unlock>
 8009930:	e7a1      	b.n	8009876 <_malloc_r+0x22>
 8009932:	6025      	str	r5, [r4, #0]
 8009934:	e7de      	b.n	80098f4 <_malloc_r+0xa0>
 8009936:	bf00      	nop
 8009938:	20000928 	.word	0x20000928

0800993c <__cvt>:
 800993c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009940:	ec55 4b10 	vmov	r4, r5, d0
 8009944:	2d00      	cmp	r5, #0
 8009946:	460e      	mov	r6, r1
 8009948:	4619      	mov	r1, r3
 800994a:	462b      	mov	r3, r5
 800994c:	bfbb      	ittet	lt
 800994e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009952:	461d      	movlt	r5, r3
 8009954:	2300      	movge	r3, #0
 8009956:	232d      	movlt	r3, #45	; 0x2d
 8009958:	700b      	strb	r3, [r1, #0]
 800995a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800995c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009960:	4691      	mov	r9, r2
 8009962:	f023 0820 	bic.w	r8, r3, #32
 8009966:	bfbc      	itt	lt
 8009968:	4622      	movlt	r2, r4
 800996a:	4614      	movlt	r4, r2
 800996c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009970:	d005      	beq.n	800997e <__cvt+0x42>
 8009972:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009976:	d100      	bne.n	800997a <__cvt+0x3e>
 8009978:	3601      	adds	r6, #1
 800997a:	2102      	movs	r1, #2
 800997c:	e000      	b.n	8009980 <__cvt+0x44>
 800997e:	2103      	movs	r1, #3
 8009980:	ab03      	add	r3, sp, #12
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	ab02      	add	r3, sp, #8
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	ec45 4b10 	vmov	d0, r4, r5
 800998c:	4653      	mov	r3, sl
 800998e:	4632      	mov	r2, r6
 8009990:	f000 fcfa 	bl	800a388 <_dtoa_r>
 8009994:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009998:	4607      	mov	r7, r0
 800999a:	d102      	bne.n	80099a2 <__cvt+0x66>
 800999c:	f019 0f01 	tst.w	r9, #1
 80099a0:	d022      	beq.n	80099e8 <__cvt+0xac>
 80099a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099a6:	eb07 0906 	add.w	r9, r7, r6
 80099aa:	d110      	bne.n	80099ce <__cvt+0x92>
 80099ac:	783b      	ldrb	r3, [r7, #0]
 80099ae:	2b30      	cmp	r3, #48	; 0x30
 80099b0:	d10a      	bne.n	80099c8 <__cvt+0x8c>
 80099b2:	2200      	movs	r2, #0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f7 f88d 	bl	8000ad8 <__aeabi_dcmpeq>
 80099be:	b918      	cbnz	r0, 80099c8 <__cvt+0x8c>
 80099c0:	f1c6 0601 	rsb	r6, r6, #1
 80099c4:	f8ca 6000 	str.w	r6, [sl]
 80099c8:	f8da 3000 	ldr.w	r3, [sl]
 80099cc:	4499      	add	r9, r3
 80099ce:	2200      	movs	r2, #0
 80099d0:	2300      	movs	r3, #0
 80099d2:	4620      	mov	r0, r4
 80099d4:	4629      	mov	r1, r5
 80099d6:	f7f7 f87f 	bl	8000ad8 <__aeabi_dcmpeq>
 80099da:	b108      	cbz	r0, 80099e0 <__cvt+0xa4>
 80099dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80099e0:	2230      	movs	r2, #48	; 0x30
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	454b      	cmp	r3, r9
 80099e6:	d307      	bcc.n	80099f8 <__cvt+0xbc>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099ec:	1bdb      	subs	r3, r3, r7
 80099ee:	4638      	mov	r0, r7
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	b004      	add	sp, #16
 80099f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f8:	1c59      	adds	r1, r3, #1
 80099fa:	9103      	str	r1, [sp, #12]
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	e7f0      	b.n	80099e2 <__cvt+0xa6>

08009a00 <__exponent>:
 8009a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a02:	4603      	mov	r3, r0
 8009a04:	2900      	cmp	r1, #0
 8009a06:	bfb8      	it	lt
 8009a08:	4249      	neglt	r1, r1
 8009a0a:	f803 2b02 	strb.w	r2, [r3], #2
 8009a0e:	bfb4      	ite	lt
 8009a10:	222d      	movlt	r2, #45	; 0x2d
 8009a12:	222b      	movge	r2, #43	; 0x2b
 8009a14:	2909      	cmp	r1, #9
 8009a16:	7042      	strb	r2, [r0, #1]
 8009a18:	dd2a      	ble.n	8009a70 <__exponent+0x70>
 8009a1a:	f10d 0407 	add.w	r4, sp, #7
 8009a1e:	46a4      	mov	ip, r4
 8009a20:	270a      	movs	r7, #10
 8009a22:	46a6      	mov	lr, r4
 8009a24:	460a      	mov	r2, r1
 8009a26:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a2a:	fb07 1516 	mls	r5, r7, r6, r1
 8009a2e:	3530      	adds	r5, #48	; 0x30
 8009a30:	2a63      	cmp	r2, #99	; 0x63
 8009a32:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	dcf1      	bgt.n	8009a22 <__exponent+0x22>
 8009a3e:	3130      	adds	r1, #48	; 0x30
 8009a40:	f1ae 0502 	sub.w	r5, lr, #2
 8009a44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a48:	1c44      	adds	r4, r0, #1
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4561      	cmp	r1, ip
 8009a4e:	d30a      	bcc.n	8009a66 <__exponent+0x66>
 8009a50:	f10d 0209 	add.w	r2, sp, #9
 8009a54:	eba2 020e 	sub.w	r2, r2, lr
 8009a58:	4565      	cmp	r5, ip
 8009a5a:	bf88      	it	hi
 8009a5c:	2200      	movhi	r2, #0
 8009a5e:	4413      	add	r3, r2
 8009a60:	1a18      	subs	r0, r3, r0
 8009a62:	b003      	add	sp, #12
 8009a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a6e:	e7ed      	b.n	8009a4c <__exponent+0x4c>
 8009a70:	2330      	movs	r3, #48	; 0x30
 8009a72:	3130      	adds	r1, #48	; 0x30
 8009a74:	7083      	strb	r3, [r0, #2]
 8009a76:	70c1      	strb	r1, [r0, #3]
 8009a78:	1d03      	adds	r3, r0, #4
 8009a7a:	e7f1      	b.n	8009a60 <__exponent+0x60>

08009a7c <_printf_float>:
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a80:	ed2d 8b02 	vpush	{d8}
 8009a84:	b08d      	sub	sp, #52	; 0x34
 8009a86:	460c      	mov	r4, r1
 8009a88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a8c:	4616      	mov	r6, r2
 8009a8e:	461f      	mov	r7, r3
 8009a90:	4605      	mov	r5, r0
 8009a92:	f001 fa67 	bl	800af64 <_localeconv_r>
 8009a96:	f8d0 a000 	ldr.w	sl, [r0]
 8009a9a:	4650      	mov	r0, sl
 8009a9c:	f7f6 fba0 	bl	80001e0 <strlen>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8009aac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ab0:	3307      	adds	r3, #7
 8009ab2:	f023 0307 	bic.w	r3, r3, #7
 8009ab6:	f103 0208 	add.w	r2, r3, #8
 8009aba:	f8c8 2000 	str.w	r2, [r8]
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009ac6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009aca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ace:	9307      	str	r3, [sp, #28]
 8009ad0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ad4:	ee08 0a10 	vmov	s16, r0
 8009ad8:	4b9f      	ldr	r3, [pc, #636]	; (8009d58 <_printf_float+0x2dc>)
 8009ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ade:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae2:	f7f7 f82b 	bl	8000b3c <__aeabi_dcmpun>
 8009ae6:	bb88      	cbnz	r0, 8009b4c <_printf_float+0xd0>
 8009ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aec:	4b9a      	ldr	r3, [pc, #616]	; (8009d58 <_printf_float+0x2dc>)
 8009aee:	f04f 32ff 	mov.w	r2, #4294967295
 8009af2:	f7f7 f805 	bl	8000b00 <__aeabi_dcmple>
 8009af6:	bb48      	cbnz	r0, 8009b4c <_printf_float+0xd0>
 8009af8:	2200      	movs	r2, #0
 8009afa:	2300      	movs	r3, #0
 8009afc:	4640      	mov	r0, r8
 8009afe:	4649      	mov	r1, r9
 8009b00:	f7f6 fff4 	bl	8000aec <__aeabi_dcmplt>
 8009b04:	b110      	cbz	r0, 8009b0c <_printf_float+0x90>
 8009b06:	232d      	movs	r3, #45	; 0x2d
 8009b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b0c:	4b93      	ldr	r3, [pc, #588]	; (8009d5c <_printf_float+0x2e0>)
 8009b0e:	4894      	ldr	r0, [pc, #592]	; (8009d60 <_printf_float+0x2e4>)
 8009b10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b14:	bf94      	ite	ls
 8009b16:	4698      	movls	r8, r3
 8009b18:	4680      	movhi	r8, r0
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	6123      	str	r3, [r4, #16]
 8009b1e:	9b05      	ldr	r3, [sp, #20]
 8009b20:	f023 0204 	bic.w	r2, r3, #4
 8009b24:	6022      	str	r2, [r4, #0]
 8009b26:	f04f 0900 	mov.w	r9, #0
 8009b2a:	9700      	str	r7, [sp, #0]
 8009b2c:	4633      	mov	r3, r6
 8009b2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b30:	4621      	mov	r1, r4
 8009b32:	4628      	mov	r0, r5
 8009b34:	f000 f9d8 	bl	8009ee8 <_printf_common>
 8009b38:	3001      	adds	r0, #1
 8009b3a:	f040 8090 	bne.w	8009c5e <_printf_float+0x1e2>
 8009b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b42:	b00d      	add	sp, #52	; 0x34
 8009b44:	ecbd 8b02 	vpop	{d8}
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	4642      	mov	r2, r8
 8009b4e:	464b      	mov	r3, r9
 8009b50:	4640      	mov	r0, r8
 8009b52:	4649      	mov	r1, r9
 8009b54:	f7f6 fff2 	bl	8000b3c <__aeabi_dcmpun>
 8009b58:	b140      	cbz	r0, 8009b6c <_printf_float+0xf0>
 8009b5a:	464b      	mov	r3, r9
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	bfbc      	itt	lt
 8009b60:	232d      	movlt	r3, #45	; 0x2d
 8009b62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b66:	487f      	ldr	r0, [pc, #508]	; (8009d64 <_printf_float+0x2e8>)
 8009b68:	4b7f      	ldr	r3, [pc, #508]	; (8009d68 <_printf_float+0x2ec>)
 8009b6a:	e7d1      	b.n	8009b10 <_printf_float+0x94>
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b72:	9206      	str	r2, [sp, #24]
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	d13f      	bne.n	8009bf8 <_printf_float+0x17c>
 8009b78:	2306      	movs	r3, #6
 8009b7a:	6063      	str	r3, [r4, #4]
 8009b7c:	9b05      	ldr	r3, [sp, #20]
 8009b7e:	6861      	ldr	r1, [r4, #4]
 8009b80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b84:	2300      	movs	r3, #0
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	ab0a      	add	r3, sp, #40	; 0x28
 8009b8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b8e:	ab09      	add	r3, sp, #36	; 0x24
 8009b90:	ec49 8b10 	vmov	d0, r8, r9
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	6022      	str	r2, [r4, #0]
 8009b98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	f7ff fecd 	bl	800993c <__cvt>
 8009ba2:	9b06      	ldr	r3, [sp, #24]
 8009ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ba6:	2b47      	cmp	r3, #71	; 0x47
 8009ba8:	4680      	mov	r8, r0
 8009baa:	d108      	bne.n	8009bbe <_printf_float+0x142>
 8009bac:	1cc8      	adds	r0, r1, #3
 8009bae:	db02      	blt.n	8009bb6 <_printf_float+0x13a>
 8009bb0:	6863      	ldr	r3, [r4, #4]
 8009bb2:	4299      	cmp	r1, r3
 8009bb4:	dd41      	ble.n	8009c3a <_printf_float+0x1be>
 8009bb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009bba:	fa5f fb8b 	uxtb.w	fp, fp
 8009bbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bc2:	d820      	bhi.n	8009c06 <_printf_float+0x18a>
 8009bc4:	3901      	subs	r1, #1
 8009bc6:	465a      	mov	r2, fp
 8009bc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bcc:	9109      	str	r1, [sp, #36]	; 0x24
 8009bce:	f7ff ff17 	bl	8009a00 <__exponent>
 8009bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bd4:	1813      	adds	r3, r2, r0
 8009bd6:	2a01      	cmp	r2, #1
 8009bd8:	4681      	mov	r9, r0
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	dc02      	bgt.n	8009be4 <_printf_float+0x168>
 8009bde:	6822      	ldr	r2, [r4, #0]
 8009be0:	07d2      	lsls	r2, r2, #31
 8009be2:	d501      	bpl.n	8009be8 <_printf_float+0x16c>
 8009be4:	3301      	adds	r3, #1
 8009be6:	6123      	str	r3, [r4, #16]
 8009be8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d09c      	beq.n	8009b2a <_printf_float+0xae>
 8009bf0:	232d      	movs	r3, #45	; 0x2d
 8009bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bf6:	e798      	b.n	8009b2a <_printf_float+0xae>
 8009bf8:	9a06      	ldr	r2, [sp, #24]
 8009bfa:	2a47      	cmp	r2, #71	; 0x47
 8009bfc:	d1be      	bne.n	8009b7c <_printf_float+0x100>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1bc      	bne.n	8009b7c <_printf_float+0x100>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e7b9      	b.n	8009b7a <_printf_float+0xfe>
 8009c06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c0a:	d118      	bne.n	8009c3e <_printf_float+0x1c2>
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	6863      	ldr	r3, [r4, #4]
 8009c10:	dd0b      	ble.n	8009c2a <_printf_float+0x1ae>
 8009c12:	6121      	str	r1, [r4, #16]
 8009c14:	b913      	cbnz	r3, 8009c1c <_printf_float+0x1a0>
 8009c16:	6822      	ldr	r2, [r4, #0]
 8009c18:	07d0      	lsls	r0, r2, #31
 8009c1a:	d502      	bpl.n	8009c22 <_printf_float+0x1a6>
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	440b      	add	r3, r1
 8009c20:	6123      	str	r3, [r4, #16]
 8009c22:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c24:	f04f 0900 	mov.w	r9, #0
 8009c28:	e7de      	b.n	8009be8 <_printf_float+0x16c>
 8009c2a:	b913      	cbnz	r3, 8009c32 <_printf_float+0x1b6>
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	07d2      	lsls	r2, r2, #31
 8009c30:	d501      	bpl.n	8009c36 <_printf_float+0x1ba>
 8009c32:	3302      	adds	r3, #2
 8009c34:	e7f4      	b.n	8009c20 <_printf_float+0x1a4>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e7f2      	b.n	8009c20 <_printf_float+0x1a4>
 8009c3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c40:	4299      	cmp	r1, r3
 8009c42:	db05      	blt.n	8009c50 <_printf_float+0x1d4>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	6121      	str	r1, [r4, #16]
 8009c48:	07d8      	lsls	r0, r3, #31
 8009c4a:	d5ea      	bpl.n	8009c22 <_printf_float+0x1a6>
 8009c4c:	1c4b      	adds	r3, r1, #1
 8009c4e:	e7e7      	b.n	8009c20 <_printf_float+0x1a4>
 8009c50:	2900      	cmp	r1, #0
 8009c52:	bfd4      	ite	le
 8009c54:	f1c1 0202 	rsble	r2, r1, #2
 8009c58:	2201      	movgt	r2, #1
 8009c5a:	4413      	add	r3, r2
 8009c5c:	e7e0      	b.n	8009c20 <_printf_float+0x1a4>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	055a      	lsls	r2, r3, #21
 8009c62:	d407      	bmi.n	8009c74 <_printf_float+0x1f8>
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	4642      	mov	r2, r8
 8009c68:	4631      	mov	r1, r6
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b8      	blx	r7
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d12c      	bne.n	8009ccc <_printf_float+0x250>
 8009c72:	e764      	b.n	8009b3e <_printf_float+0xc2>
 8009c74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c78:	f240 80e0 	bls.w	8009e3c <_printf_float+0x3c0>
 8009c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c80:	2200      	movs	r2, #0
 8009c82:	2300      	movs	r3, #0
 8009c84:	f7f6 ff28 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d034      	beq.n	8009cf6 <_printf_float+0x27a>
 8009c8c:	4a37      	ldr	r2, [pc, #220]	; (8009d6c <_printf_float+0x2f0>)
 8009c8e:	2301      	movs	r3, #1
 8009c90:	4631      	mov	r1, r6
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	f43f af51 	beq.w	8009b3e <_printf_float+0xc2>
 8009c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	db02      	blt.n	8009caa <_printf_float+0x22e>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	07d8      	lsls	r0, r3, #31
 8009ca8:	d510      	bpl.n	8009ccc <_printf_float+0x250>
 8009caa:	ee18 3a10 	vmov	r3, s16
 8009cae:	4652      	mov	r2, sl
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b8      	blx	r7
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	f43f af41 	beq.w	8009b3e <_printf_float+0xc2>
 8009cbc:	f04f 0800 	mov.w	r8, #0
 8009cc0:	f104 091a 	add.w	r9, r4, #26
 8009cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	4543      	cmp	r3, r8
 8009cca:	dc09      	bgt.n	8009ce0 <_printf_float+0x264>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	079b      	lsls	r3, r3, #30
 8009cd0:	f100 8105 	bmi.w	8009ede <_printf_float+0x462>
 8009cd4:	68e0      	ldr	r0, [r4, #12]
 8009cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd8:	4298      	cmp	r0, r3
 8009cda:	bfb8      	it	lt
 8009cdc:	4618      	movlt	r0, r3
 8009cde:	e730      	b.n	8009b42 <_printf_float+0xc6>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	464a      	mov	r2, r9
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af27 	beq.w	8009b3e <_printf_float+0xc2>
 8009cf0:	f108 0801 	add.w	r8, r8, #1
 8009cf4:	e7e6      	b.n	8009cc4 <_printf_float+0x248>
 8009cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	dc39      	bgt.n	8009d70 <_printf_float+0x2f4>
 8009cfc:	4a1b      	ldr	r2, [pc, #108]	; (8009d6c <_printf_float+0x2f0>)
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4631      	mov	r1, r6
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b8      	blx	r7
 8009d06:	3001      	adds	r0, #1
 8009d08:	f43f af19 	beq.w	8009b3e <_printf_float+0xc2>
 8009d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d10:	4313      	orrs	r3, r2
 8009d12:	d102      	bne.n	8009d1a <_printf_float+0x29e>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	07d9      	lsls	r1, r3, #31
 8009d18:	d5d8      	bpl.n	8009ccc <_printf_float+0x250>
 8009d1a:	ee18 3a10 	vmov	r3, s16
 8009d1e:	4652      	mov	r2, sl
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	f43f af09 	beq.w	8009b3e <_printf_float+0xc2>
 8009d2c:	f04f 0900 	mov.w	r9, #0
 8009d30:	f104 0a1a 	add.w	sl, r4, #26
 8009d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d36:	425b      	negs	r3, r3
 8009d38:	454b      	cmp	r3, r9
 8009d3a:	dc01      	bgt.n	8009d40 <_printf_float+0x2c4>
 8009d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3e:	e792      	b.n	8009c66 <_printf_float+0x1ea>
 8009d40:	2301      	movs	r3, #1
 8009d42:	4652      	mov	r2, sl
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b8      	blx	r7
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f43f aef7 	beq.w	8009b3e <_printf_float+0xc2>
 8009d50:	f109 0901 	add.w	r9, r9, #1
 8009d54:	e7ee      	b.n	8009d34 <_printf_float+0x2b8>
 8009d56:	bf00      	nop
 8009d58:	7fefffff 	.word	0x7fefffff
 8009d5c:	0800d2f8 	.word	0x0800d2f8
 8009d60:	0800d2fc 	.word	0x0800d2fc
 8009d64:	0800d304 	.word	0x0800d304
 8009d68:	0800d300 	.word	0x0800d300
 8009d6c:	0800d308 	.word	0x0800d308
 8009d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d74:	429a      	cmp	r2, r3
 8009d76:	bfa8      	it	ge
 8009d78:	461a      	movge	r2, r3
 8009d7a:	2a00      	cmp	r2, #0
 8009d7c:	4691      	mov	r9, r2
 8009d7e:	dc37      	bgt.n	8009df0 <_printf_float+0x374>
 8009d80:	f04f 0b00 	mov.w	fp, #0
 8009d84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d88:	f104 021a 	add.w	r2, r4, #26
 8009d8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d8e:	9305      	str	r3, [sp, #20]
 8009d90:	eba3 0309 	sub.w	r3, r3, r9
 8009d94:	455b      	cmp	r3, fp
 8009d96:	dc33      	bgt.n	8009e00 <_printf_float+0x384>
 8009d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	db3b      	blt.n	8009e18 <_printf_float+0x39c>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	07da      	lsls	r2, r3, #31
 8009da4:	d438      	bmi.n	8009e18 <_printf_float+0x39c>
 8009da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da8:	9a05      	ldr	r2, [sp, #20]
 8009daa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dac:	1a9a      	subs	r2, r3, r2
 8009dae:	eba3 0901 	sub.w	r9, r3, r1
 8009db2:	4591      	cmp	r9, r2
 8009db4:	bfa8      	it	ge
 8009db6:	4691      	movge	r9, r2
 8009db8:	f1b9 0f00 	cmp.w	r9, #0
 8009dbc:	dc35      	bgt.n	8009e2a <_printf_float+0x3ae>
 8009dbe:	f04f 0800 	mov.w	r8, #0
 8009dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dc6:	f104 0a1a 	add.w	sl, r4, #26
 8009dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	eba3 0309 	sub.w	r3, r3, r9
 8009dd4:	4543      	cmp	r3, r8
 8009dd6:	f77f af79 	ble.w	8009ccc <_printf_float+0x250>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	4652      	mov	r2, sl
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b8      	blx	r7
 8009de4:	3001      	adds	r0, #1
 8009de6:	f43f aeaa 	beq.w	8009b3e <_printf_float+0xc2>
 8009dea:	f108 0801 	add.w	r8, r8, #1
 8009dee:	e7ec      	b.n	8009dca <_printf_float+0x34e>
 8009df0:	4613      	mov	r3, r2
 8009df2:	4631      	mov	r1, r6
 8009df4:	4642      	mov	r2, r8
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d1c0      	bne.n	8009d80 <_printf_float+0x304>
 8009dfe:	e69e      	b.n	8009b3e <_printf_float+0xc2>
 8009e00:	2301      	movs	r3, #1
 8009e02:	4631      	mov	r1, r6
 8009e04:	4628      	mov	r0, r5
 8009e06:	9205      	str	r2, [sp, #20]
 8009e08:	47b8      	blx	r7
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	f43f ae97 	beq.w	8009b3e <_printf_float+0xc2>
 8009e10:	9a05      	ldr	r2, [sp, #20]
 8009e12:	f10b 0b01 	add.w	fp, fp, #1
 8009e16:	e7b9      	b.n	8009d8c <_printf_float+0x310>
 8009e18:	ee18 3a10 	vmov	r3, s16
 8009e1c:	4652      	mov	r2, sl
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4628      	mov	r0, r5
 8009e22:	47b8      	blx	r7
 8009e24:	3001      	adds	r0, #1
 8009e26:	d1be      	bne.n	8009da6 <_printf_float+0x32a>
 8009e28:	e689      	b.n	8009b3e <_printf_float+0xc2>
 8009e2a:	9a05      	ldr	r2, [sp, #20]
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	4442      	add	r2, r8
 8009e30:	4631      	mov	r1, r6
 8009e32:	4628      	mov	r0, r5
 8009e34:	47b8      	blx	r7
 8009e36:	3001      	adds	r0, #1
 8009e38:	d1c1      	bne.n	8009dbe <_printf_float+0x342>
 8009e3a:	e680      	b.n	8009b3e <_printf_float+0xc2>
 8009e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e3e:	2a01      	cmp	r2, #1
 8009e40:	dc01      	bgt.n	8009e46 <_printf_float+0x3ca>
 8009e42:	07db      	lsls	r3, r3, #31
 8009e44:	d538      	bpl.n	8009eb8 <_printf_float+0x43c>
 8009e46:	2301      	movs	r3, #1
 8009e48:	4642      	mov	r2, r8
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	f43f ae74 	beq.w	8009b3e <_printf_float+0xc2>
 8009e56:	ee18 3a10 	vmov	r3, s16
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4628      	mov	r0, r5
 8009e60:	47b8      	blx	r7
 8009e62:	3001      	adds	r0, #1
 8009e64:	f43f ae6b 	beq.w	8009b3e <_printf_float+0xc2>
 8009e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f7f6 fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e74:	b9d8      	cbnz	r0, 8009eae <_printf_float+0x432>
 8009e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e78:	f108 0201 	add.w	r2, r8, #1
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	d10e      	bne.n	8009ea6 <_printf_float+0x42a>
 8009e88:	e659      	b.n	8009b3e <_printf_float+0xc2>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4652      	mov	r2, sl
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b8      	blx	r7
 8009e94:	3001      	adds	r0, #1
 8009e96:	f43f ae52 	beq.w	8009b3e <_printf_float+0xc2>
 8009e9a:	f108 0801 	add.w	r8, r8, #1
 8009e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	4543      	cmp	r3, r8
 8009ea4:	dcf1      	bgt.n	8009e8a <_printf_float+0x40e>
 8009ea6:	464b      	mov	r3, r9
 8009ea8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009eac:	e6dc      	b.n	8009c68 <_printf_float+0x1ec>
 8009eae:	f04f 0800 	mov.w	r8, #0
 8009eb2:	f104 0a1a 	add.w	sl, r4, #26
 8009eb6:	e7f2      	b.n	8009e9e <_printf_float+0x422>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4642      	mov	r2, r8
 8009ebc:	e7df      	b.n	8009e7e <_printf_float+0x402>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	464a      	mov	r2, r9
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	47b8      	blx	r7
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f43f ae38 	beq.w	8009b3e <_printf_float+0xc2>
 8009ece:	f108 0801 	add.w	r8, r8, #1
 8009ed2:	68e3      	ldr	r3, [r4, #12]
 8009ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ed6:	1a5b      	subs	r3, r3, r1
 8009ed8:	4543      	cmp	r3, r8
 8009eda:	dcf0      	bgt.n	8009ebe <_printf_float+0x442>
 8009edc:	e6fa      	b.n	8009cd4 <_printf_float+0x258>
 8009ede:	f04f 0800 	mov.w	r8, #0
 8009ee2:	f104 0919 	add.w	r9, r4, #25
 8009ee6:	e7f4      	b.n	8009ed2 <_printf_float+0x456>

08009ee8 <_printf_common>:
 8009ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eec:	4616      	mov	r6, r2
 8009eee:	4699      	mov	r9, r3
 8009ef0:	688a      	ldr	r2, [r1, #8]
 8009ef2:	690b      	ldr	r3, [r1, #16]
 8009ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	bfb8      	it	lt
 8009efc:	4613      	movlt	r3, r2
 8009efe:	6033      	str	r3, [r6, #0]
 8009f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f04:	4607      	mov	r7, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	b10a      	cbz	r2, 8009f0e <_printf_common+0x26>
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	6033      	str	r3, [r6, #0]
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	0699      	lsls	r1, r3, #26
 8009f12:	bf42      	ittt	mi
 8009f14:	6833      	ldrmi	r3, [r6, #0]
 8009f16:	3302      	addmi	r3, #2
 8009f18:	6033      	strmi	r3, [r6, #0]
 8009f1a:	6825      	ldr	r5, [r4, #0]
 8009f1c:	f015 0506 	ands.w	r5, r5, #6
 8009f20:	d106      	bne.n	8009f30 <_printf_common+0x48>
 8009f22:	f104 0a19 	add.w	sl, r4, #25
 8009f26:	68e3      	ldr	r3, [r4, #12]
 8009f28:	6832      	ldr	r2, [r6, #0]
 8009f2a:	1a9b      	subs	r3, r3, r2
 8009f2c:	42ab      	cmp	r3, r5
 8009f2e:	dc26      	bgt.n	8009f7e <_printf_common+0x96>
 8009f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f34:	1e13      	subs	r3, r2, #0
 8009f36:	6822      	ldr	r2, [r4, #0]
 8009f38:	bf18      	it	ne
 8009f3a:	2301      	movne	r3, #1
 8009f3c:	0692      	lsls	r2, r2, #26
 8009f3e:	d42b      	bmi.n	8009f98 <_printf_common+0xb0>
 8009f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f44:	4649      	mov	r1, r9
 8009f46:	4638      	mov	r0, r7
 8009f48:	47c0      	blx	r8
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d01e      	beq.n	8009f8c <_printf_common+0xa4>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	68e5      	ldr	r5, [r4, #12]
 8009f52:	6832      	ldr	r2, [r6, #0]
 8009f54:	f003 0306 	and.w	r3, r3, #6
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	bf08      	it	eq
 8009f5c:	1aad      	subeq	r5, r5, r2
 8009f5e:	68a3      	ldr	r3, [r4, #8]
 8009f60:	6922      	ldr	r2, [r4, #16]
 8009f62:	bf0c      	ite	eq
 8009f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f68:	2500      	movne	r5, #0
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	bfc4      	itt	gt
 8009f6e:	1a9b      	subgt	r3, r3, r2
 8009f70:	18ed      	addgt	r5, r5, r3
 8009f72:	2600      	movs	r6, #0
 8009f74:	341a      	adds	r4, #26
 8009f76:	42b5      	cmp	r5, r6
 8009f78:	d11a      	bne.n	8009fb0 <_printf_common+0xc8>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	e008      	b.n	8009f90 <_printf_common+0xa8>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	4652      	mov	r2, sl
 8009f82:	4649      	mov	r1, r9
 8009f84:	4638      	mov	r0, r7
 8009f86:	47c0      	blx	r8
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d103      	bne.n	8009f94 <_printf_common+0xac>
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f94:	3501      	adds	r5, #1
 8009f96:	e7c6      	b.n	8009f26 <_printf_common+0x3e>
 8009f98:	18e1      	adds	r1, r4, r3
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	2030      	movs	r0, #48	; 0x30
 8009f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fa2:	4422      	add	r2, r4
 8009fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fac:	3302      	adds	r3, #2
 8009fae:	e7c7      	b.n	8009f40 <_printf_common+0x58>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	47c0      	blx	r8
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d0e6      	beq.n	8009f8c <_printf_common+0xa4>
 8009fbe:	3601      	adds	r6, #1
 8009fc0:	e7d9      	b.n	8009f76 <_printf_common+0x8e>
	...

08009fc4 <_printf_i>:
 8009fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	7e0f      	ldrb	r7, [r1, #24]
 8009fca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fcc:	2f78      	cmp	r7, #120	; 0x78
 8009fce:	4691      	mov	r9, r2
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	469a      	mov	sl, r3
 8009fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fda:	d807      	bhi.n	8009fec <_printf_i+0x28>
 8009fdc:	2f62      	cmp	r7, #98	; 0x62
 8009fde:	d80a      	bhi.n	8009ff6 <_printf_i+0x32>
 8009fe0:	2f00      	cmp	r7, #0
 8009fe2:	f000 80d8 	beq.w	800a196 <_printf_i+0x1d2>
 8009fe6:	2f58      	cmp	r7, #88	; 0x58
 8009fe8:	f000 80a3 	beq.w	800a132 <_printf_i+0x16e>
 8009fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ff4:	e03a      	b.n	800a06c <_printf_i+0xa8>
 8009ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ffa:	2b15      	cmp	r3, #21
 8009ffc:	d8f6      	bhi.n	8009fec <_printf_i+0x28>
 8009ffe:	a101      	add	r1, pc, #4	; (adr r1, 800a004 <_printf_i+0x40>)
 800a000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a004:	0800a05d 	.word	0x0800a05d
 800a008:	0800a071 	.word	0x0800a071
 800a00c:	08009fed 	.word	0x08009fed
 800a010:	08009fed 	.word	0x08009fed
 800a014:	08009fed 	.word	0x08009fed
 800a018:	08009fed 	.word	0x08009fed
 800a01c:	0800a071 	.word	0x0800a071
 800a020:	08009fed 	.word	0x08009fed
 800a024:	08009fed 	.word	0x08009fed
 800a028:	08009fed 	.word	0x08009fed
 800a02c:	08009fed 	.word	0x08009fed
 800a030:	0800a17d 	.word	0x0800a17d
 800a034:	0800a0a1 	.word	0x0800a0a1
 800a038:	0800a15f 	.word	0x0800a15f
 800a03c:	08009fed 	.word	0x08009fed
 800a040:	08009fed 	.word	0x08009fed
 800a044:	0800a19f 	.word	0x0800a19f
 800a048:	08009fed 	.word	0x08009fed
 800a04c:	0800a0a1 	.word	0x0800a0a1
 800a050:	08009fed 	.word	0x08009fed
 800a054:	08009fed 	.word	0x08009fed
 800a058:	0800a167 	.word	0x0800a167
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	1d1a      	adds	r2, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	602a      	str	r2, [r5, #0]
 800a064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a06c:	2301      	movs	r3, #1
 800a06e:	e0a3      	b.n	800a1b8 <_printf_i+0x1f4>
 800a070:	6820      	ldr	r0, [r4, #0]
 800a072:	6829      	ldr	r1, [r5, #0]
 800a074:	0606      	lsls	r6, r0, #24
 800a076:	f101 0304 	add.w	r3, r1, #4
 800a07a:	d50a      	bpl.n	800a092 <_printf_i+0xce>
 800a07c:	680e      	ldr	r6, [r1, #0]
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	2e00      	cmp	r6, #0
 800a082:	da03      	bge.n	800a08c <_printf_i+0xc8>
 800a084:	232d      	movs	r3, #45	; 0x2d
 800a086:	4276      	negs	r6, r6
 800a088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a08c:	485e      	ldr	r0, [pc, #376]	; (800a208 <_printf_i+0x244>)
 800a08e:	230a      	movs	r3, #10
 800a090:	e019      	b.n	800a0c6 <_printf_i+0x102>
 800a092:	680e      	ldr	r6, [r1, #0]
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a09a:	bf18      	it	ne
 800a09c:	b236      	sxthne	r6, r6
 800a09e:	e7ef      	b.n	800a080 <_printf_i+0xbc>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	6820      	ldr	r0, [r4, #0]
 800a0a4:	1d19      	adds	r1, r3, #4
 800a0a6:	6029      	str	r1, [r5, #0]
 800a0a8:	0601      	lsls	r1, r0, #24
 800a0aa:	d501      	bpl.n	800a0b0 <_printf_i+0xec>
 800a0ac:	681e      	ldr	r6, [r3, #0]
 800a0ae:	e002      	b.n	800a0b6 <_printf_i+0xf2>
 800a0b0:	0646      	lsls	r6, r0, #25
 800a0b2:	d5fb      	bpl.n	800a0ac <_printf_i+0xe8>
 800a0b4:	881e      	ldrh	r6, [r3, #0]
 800a0b6:	4854      	ldr	r0, [pc, #336]	; (800a208 <_printf_i+0x244>)
 800a0b8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ba:	bf0c      	ite	eq
 800a0bc:	2308      	moveq	r3, #8
 800a0be:	230a      	movne	r3, #10
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0c6:	6865      	ldr	r5, [r4, #4]
 800a0c8:	60a5      	str	r5, [r4, #8]
 800a0ca:	2d00      	cmp	r5, #0
 800a0cc:	bfa2      	ittt	ge
 800a0ce:	6821      	ldrge	r1, [r4, #0]
 800a0d0:	f021 0104 	bicge.w	r1, r1, #4
 800a0d4:	6021      	strge	r1, [r4, #0]
 800a0d6:	b90e      	cbnz	r6, 800a0dc <_printf_i+0x118>
 800a0d8:	2d00      	cmp	r5, #0
 800a0da:	d04d      	beq.n	800a178 <_printf_i+0x1b4>
 800a0dc:	4615      	mov	r5, r2
 800a0de:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0e2:	fb03 6711 	mls	r7, r3, r1, r6
 800a0e6:	5dc7      	ldrb	r7, [r0, r7]
 800a0e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0ec:	4637      	mov	r7, r6
 800a0ee:	42bb      	cmp	r3, r7
 800a0f0:	460e      	mov	r6, r1
 800a0f2:	d9f4      	bls.n	800a0de <_printf_i+0x11a>
 800a0f4:	2b08      	cmp	r3, #8
 800a0f6:	d10b      	bne.n	800a110 <_printf_i+0x14c>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	07de      	lsls	r6, r3, #31
 800a0fc:	d508      	bpl.n	800a110 <_printf_i+0x14c>
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	6861      	ldr	r1, [r4, #4]
 800a102:	4299      	cmp	r1, r3
 800a104:	bfde      	ittt	le
 800a106:	2330      	movle	r3, #48	; 0x30
 800a108:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a10c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a110:	1b52      	subs	r2, r2, r5
 800a112:	6122      	str	r2, [r4, #16]
 800a114:	f8cd a000 	str.w	sl, [sp]
 800a118:	464b      	mov	r3, r9
 800a11a:	aa03      	add	r2, sp, #12
 800a11c:	4621      	mov	r1, r4
 800a11e:	4640      	mov	r0, r8
 800a120:	f7ff fee2 	bl	8009ee8 <_printf_common>
 800a124:	3001      	adds	r0, #1
 800a126:	d14c      	bne.n	800a1c2 <_printf_i+0x1fe>
 800a128:	f04f 30ff 	mov.w	r0, #4294967295
 800a12c:	b004      	add	sp, #16
 800a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a132:	4835      	ldr	r0, [pc, #212]	; (800a208 <_printf_i+0x244>)
 800a134:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a138:	6829      	ldr	r1, [r5, #0]
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a140:	6029      	str	r1, [r5, #0]
 800a142:	061d      	lsls	r5, r3, #24
 800a144:	d514      	bpl.n	800a170 <_printf_i+0x1ac>
 800a146:	07df      	lsls	r7, r3, #31
 800a148:	bf44      	itt	mi
 800a14a:	f043 0320 	orrmi.w	r3, r3, #32
 800a14e:	6023      	strmi	r3, [r4, #0]
 800a150:	b91e      	cbnz	r6, 800a15a <_printf_i+0x196>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	f023 0320 	bic.w	r3, r3, #32
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	2310      	movs	r3, #16
 800a15c:	e7b0      	b.n	800a0c0 <_printf_i+0xfc>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	f043 0320 	orr.w	r3, r3, #32
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	2378      	movs	r3, #120	; 0x78
 800a168:	4828      	ldr	r0, [pc, #160]	; (800a20c <_printf_i+0x248>)
 800a16a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a16e:	e7e3      	b.n	800a138 <_printf_i+0x174>
 800a170:	0659      	lsls	r1, r3, #25
 800a172:	bf48      	it	mi
 800a174:	b2b6      	uxthmi	r6, r6
 800a176:	e7e6      	b.n	800a146 <_printf_i+0x182>
 800a178:	4615      	mov	r5, r2
 800a17a:	e7bb      	b.n	800a0f4 <_printf_i+0x130>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	6826      	ldr	r6, [r4, #0]
 800a180:	6961      	ldr	r1, [r4, #20]
 800a182:	1d18      	adds	r0, r3, #4
 800a184:	6028      	str	r0, [r5, #0]
 800a186:	0635      	lsls	r5, r6, #24
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	d501      	bpl.n	800a190 <_printf_i+0x1cc>
 800a18c:	6019      	str	r1, [r3, #0]
 800a18e:	e002      	b.n	800a196 <_printf_i+0x1d2>
 800a190:	0670      	lsls	r0, r6, #25
 800a192:	d5fb      	bpl.n	800a18c <_printf_i+0x1c8>
 800a194:	8019      	strh	r1, [r3, #0]
 800a196:	2300      	movs	r3, #0
 800a198:	6123      	str	r3, [r4, #16]
 800a19a:	4615      	mov	r5, r2
 800a19c:	e7ba      	b.n	800a114 <_printf_i+0x150>
 800a19e:	682b      	ldr	r3, [r5, #0]
 800a1a0:	1d1a      	adds	r2, r3, #4
 800a1a2:	602a      	str	r2, [r5, #0]
 800a1a4:	681d      	ldr	r5, [r3, #0]
 800a1a6:	6862      	ldr	r2, [r4, #4]
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f7f6 f820 	bl	80001f0 <memchr>
 800a1b0:	b108      	cbz	r0, 800a1b6 <_printf_i+0x1f2>
 800a1b2:	1b40      	subs	r0, r0, r5
 800a1b4:	6060      	str	r0, [r4, #4]
 800a1b6:	6863      	ldr	r3, [r4, #4]
 800a1b8:	6123      	str	r3, [r4, #16]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c0:	e7a8      	b.n	800a114 <_printf_i+0x150>
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	462a      	mov	r2, r5
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	47d0      	blx	sl
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d0ab      	beq.n	800a128 <_printf_i+0x164>
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	079b      	lsls	r3, r3, #30
 800a1d4:	d413      	bmi.n	800a1fe <_printf_i+0x23a>
 800a1d6:	68e0      	ldr	r0, [r4, #12]
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	4298      	cmp	r0, r3
 800a1dc:	bfb8      	it	lt
 800a1de:	4618      	movlt	r0, r3
 800a1e0:	e7a4      	b.n	800a12c <_printf_i+0x168>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	47d0      	blx	sl
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	d09b      	beq.n	800a128 <_printf_i+0x164>
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	68e3      	ldr	r3, [r4, #12]
 800a1f4:	9903      	ldr	r1, [sp, #12]
 800a1f6:	1a5b      	subs	r3, r3, r1
 800a1f8:	42ab      	cmp	r3, r5
 800a1fa:	dcf2      	bgt.n	800a1e2 <_printf_i+0x21e>
 800a1fc:	e7eb      	b.n	800a1d6 <_printf_i+0x212>
 800a1fe:	2500      	movs	r5, #0
 800a200:	f104 0619 	add.w	r6, r4, #25
 800a204:	e7f5      	b.n	800a1f2 <_printf_i+0x22e>
 800a206:	bf00      	nop
 800a208:	0800d30a 	.word	0x0800d30a
 800a20c:	0800d31b 	.word	0x0800d31b

0800a210 <_sbrk_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4d06      	ldr	r5, [pc, #24]	; (800a22c <_sbrk_r+0x1c>)
 800a214:	2300      	movs	r3, #0
 800a216:	4604      	mov	r4, r0
 800a218:	4608      	mov	r0, r1
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	f7f9 f96a 	bl	80034f4 <_sbrk>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_sbrk_r+0x1a>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b103      	cbz	r3, 800a22a <_sbrk_r+0x1a>
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	20000930 	.word	0x20000930

0800a230 <siprintf>:
 800a230:	b40e      	push	{r1, r2, r3}
 800a232:	b500      	push	{lr}
 800a234:	b09c      	sub	sp, #112	; 0x70
 800a236:	ab1d      	add	r3, sp, #116	; 0x74
 800a238:	9002      	str	r0, [sp, #8]
 800a23a:	9006      	str	r0, [sp, #24]
 800a23c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a240:	4809      	ldr	r0, [pc, #36]	; (800a268 <siprintf+0x38>)
 800a242:	9107      	str	r1, [sp, #28]
 800a244:	9104      	str	r1, [sp, #16]
 800a246:	4909      	ldr	r1, [pc, #36]	; (800a26c <siprintf+0x3c>)
 800a248:	f853 2b04 	ldr.w	r2, [r3], #4
 800a24c:	9105      	str	r1, [sp, #20]
 800a24e:	6800      	ldr	r0, [r0, #0]
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	a902      	add	r1, sp, #8
 800a254:	f001 fa8c 	bl	800b770 <_svfiprintf_r>
 800a258:	9b02      	ldr	r3, [sp, #8]
 800a25a:	2200      	movs	r2, #0
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	b01c      	add	sp, #112	; 0x70
 800a260:	f85d eb04 	ldr.w	lr, [sp], #4
 800a264:	b003      	add	sp, #12
 800a266:	4770      	bx	lr
 800a268:	20000024 	.word	0x20000024
 800a26c:	ffff0208 	.word	0xffff0208

0800a270 <quorem>:
 800a270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	6903      	ldr	r3, [r0, #16]
 800a276:	690c      	ldr	r4, [r1, #16]
 800a278:	42a3      	cmp	r3, r4
 800a27a:	4607      	mov	r7, r0
 800a27c:	f2c0 8081 	blt.w	800a382 <quorem+0x112>
 800a280:	3c01      	subs	r4, #1
 800a282:	f101 0814 	add.w	r8, r1, #20
 800a286:	f100 0514 	add.w	r5, r0, #20
 800a28a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a298:	3301      	adds	r3, #1
 800a29a:	429a      	cmp	r2, r3
 800a29c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2a8:	d331      	bcc.n	800a30e <quorem+0x9e>
 800a2aa:	f04f 0e00 	mov.w	lr, #0
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	46ac      	mov	ip, r5
 800a2b2:	46f2      	mov	sl, lr
 800a2b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2b8:	b293      	uxth	r3, r2
 800a2ba:	fb06 e303 	mla	r3, r6, r3, lr
 800a2be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2c8:	f8dc a000 	ldr.w	sl, [ip]
 800a2cc:	0c12      	lsrs	r2, r2, #16
 800a2ce:	fa13 f38a 	uxtah	r3, r3, sl
 800a2d2:	fb06 e202 	mla	r2, r6, r2, lr
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	9b00      	ldr	r3, [sp, #0]
 800a2da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2de:	b292      	uxth	r2, r2
 800a2e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a2e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2ec:	4581      	cmp	r9, r0
 800a2ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2f2:	f84c 3b04 	str.w	r3, [ip], #4
 800a2f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2fa:	d2db      	bcs.n	800a2b4 <quorem+0x44>
 800a2fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a300:	b92b      	cbnz	r3, 800a30e <quorem+0x9e>
 800a302:	9b01      	ldr	r3, [sp, #4]
 800a304:	3b04      	subs	r3, #4
 800a306:	429d      	cmp	r5, r3
 800a308:	461a      	mov	r2, r3
 800a30a:	d32e      	bcc.n	800a36a <quorem+0xfa>
 800a30c:	613c      	str	r4, [r7, #16]
 800a30e:	4638      	mov	r0, r7
 800a310:	f001 f8ba 	bl	800b488 <__mcmp>
 800a314:	2800      	cmp	r0, #0
 800a316:	db24      	blt.n	800a362 <quorem+0xf2>
 800a318:	3601      	adds	r6, #1
 800a31a:	4628      	mov	r0, r5
 800a31c:	f04f 0c00 	mov.w	ip, #0
 800a320:	f858 2b04 	ldr.w	r2, [r8], #4
 800a324:	f8d0 e000 	ldr.w	lr, [r0]
 800a328:	b293      	uxth	r3, r2
 800a32a:	ebac 0303 	sub.w	r3, ip, r3
 800a32e:	0c12      	lsrs	r2, r2, #16
 800a330:	fa13 f38e 	uxtah	r3, r3, lr
 800a334:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a342:	45c1      	cmp	r9, r8
 800a344:	f840 3b04 	str.w	r3, [r0], #4
 800a348:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a34c:	d2e8      	bcs.n	800a320 <quorem+0xb0>
 800a34e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a356:	b922      	cbnz	r2, 800a362 <quorem+0xf2>
 800a358:	3b04      	subs	r3, #4
 800a35a:	429d      	cmp	r5, r3
 800a35c:	461a      	mov	r2, r3
 800a35e:	d30a      	bcc.n	800a376 <quorem+0x106>
 800a360:	613c      	str	r4, [r7, #16]
 800a362:	4630      	mov	r0, r6
 800a364:	b003      	add	sp, #12
 800a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36a:	6812      	ldr	r2, [r2, #0]
 800a36c:	3b04      	subs	r3, #4
 800a36e:	2a00      	cmp	r2, #0
 800a370:	d1cc      	bne.n	800a30c <quorem+0x9c>
 800a372:	3c01      	subs	r4, #1
 800a374:	e7c7      	b.n	800a306 <quorem+0x96>
 800a376:	6812      	ldr	r2, [r2, #0]
 800a378:	3b04      	subs	r3, #4
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	d1f0      	bne.n	800a360 <quorem+0xf0>
 800a37e:	3c01      	subs	r4, #1
 800a380:	e7eb      	b.n	800a35a <quorem+0xea>
 800a382:	2000      	movs	r0, #0
 800a384:	e7ee      	b.n	800a364 <quorem+0xf4>
	...

0800a388 <_dtoa_r>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	ed2d 8b04 	vpush	{d8-d9}
 800a390:	ec57 6b10 	vmov	r6, r7, d0
 800a394:	b093      	sub	sp, #76	; 0x4c
 800a396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a398:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a39c:	9106      	str	r1, [sp, #24]
 800a39e:	ee10 aa10 	vmov	sl, s0
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a3a8:	46bb      	mov	fp, r7
 800a3aa:	b975      	cbnz	r5, 800a3ca <_dtoa_r+0x42>
 800a3ac:	2010      	movs	r0, #16
 800a3ae:	f7ff f9bf 	bl	8009730 <malloc>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a3b6:	b920      	cbnz	r0, 800a3c2 <_dtoa_r+0x3a>
 800a3b8:	4ba7      	ldr	r3, [pc, #668]	; (800a658 <_dtoa_r+0x2d0>)
 800a3ba:	21ea      	movs	r1, #234	; 0xea
 800a3bc:	48a7      	ldr	r0, [pc, #668]	; (800a65c <_dtoa_r+0x2d4>)
 800a3be:	f001 fad7 	bl	800b970 <__assert_func>
 800a3c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3c6:	6005      	str	r5, [r0, #0]
 800a3c8:	60c5      	str	r5, [r0, #12]
 800a3ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3cc:	6819      	ldr	r1, [r3, #0]
 800a3ce:	b151      	cbz	r1, 800a3e6 <_dtoa_r+0x5e>
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	604a      	str	r2, [r1, #4]
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	4093      	lsls	r3, r2
 800a3d8:	608b      	str	r3, [r1, #8]
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fe12 	bl	800b004 <_Bfree>
 800a3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	1e3b      	subs	r3, r7, #0
 800a3e8:	bfaa      	itet	ge
 800a3ea:	2300      	movge	r3, #0
 800a3ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a3f0:	f8c8 3000 	strge.w	r3, [r8]
 800a3f4:	4b9a      	ldr	r3, [pc, #616]	; (800a660 <_dtoa_r+0x2d8>)
 800a3f6:	bfbc      	itt	lt
 800a3f8:	2201      	movlt	r2, #1
 800a3fa:	f8c8 2000 	strlt.w	r2, [r8]
 800a3fe:	ea33 030b 	bics.w	r3, r3, fp
 800a402:	d11b      	bne.n	800a43c <_dtoa_r+0xb4>
 800a404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a406:	f242 730f 	movw	r3, #9999	; 0x270f
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a410:	4333      	orrs	r3, r6
 800a412:	f000 8592 	beq.w	800af3a <_dtoa_r+0xbb2>
 800a416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a418:	b963      	cbnz	r3, 800a434 <_dtoa_r+0xac>
 800a41a:	4b92      	ldr	r3, [pc, #584]	; (800a664 <_dtoa_r+0x2dc>)
 800a41c:	e022      	b.n	800a464 <_dtoa_r+0xdc>
 800a41e:	4b92      	ldr	r3, [pc, #584]	; (800a668 <_dtoa_r+0x2e0>)
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	3308      	adds	r3, #8
 800a424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	9801      	ldr	r0, [sp, #4]
 800a42a:	b013      	add	sp, #76	; 0x4c
 800a42c:	ecbd 8b04 	vpop	{d8-d9}
 800a430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a434:	4b8b      	ldr	r3, [pc, #556]	; (800a664 <_dtoa_r+0x2dc>)
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	3303      	adds	r3, #3
 800a43a:	e7f3      	b.n	800a424 <_dtoa_r+0x9c>
 800a43c:	2200      	movs	r2, #0
 800a43e:	2300      	movs	r3, #0
 800a440:	4650      	mov	r0, sl
 800a442:	4659      	mov	r1, fp
 800a444:	f7f6 fb48 	bl	8000ad8 <__aeabi_dcmpeq>
 800a448:	ec4b ab19 	vmov	d9, sl, fp
 800a44c:	4680      	mov	r8, r0
 800a44e:	b158      	cbz	r0, 800a468 <_dtoa_r+0xe0>
 800a450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a452:	2301      	movs	r3, #1
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 856b 	beq.w	800af34 <_dtoa_r+0xbac>
 800a45e:	4883      	ldr	r0, [pc, #524]	; (800a66c <_dtoa_r+0x2e4>)
 800a460:	6018      	str	r0, [r3, #0]
 800a462:	1e43      	subs	r3, r0, #1
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	e7df      	b.n	800a428 <_dtoa_r+0xa0>
 800a468:	ec4b ab10 	vmov	d0, sl, fp
 800a46c:	aa10      	add	r2, sp, #64	; 0x40
 800a46e:	a911      	add	r1, sp, #68	; 0x44
 800a470:	4620      	mov	r0, r4
 800a472:	f001 f8af 	bl	800b5d4 <__d2b>
 800a476:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a47a:	ee08 0a10 	vmov	s16, r0
 800a47e:	2d00      	cmp	r5, #0
 800a480:	f000 8084 	beq.w	800a58c <_dtoa_r+0x204>
 800a484:	ee19 3a90 	vmov	r3, s19
 800a488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a48c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a490:	4656      	mov	r6, sl
 800a492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a49a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a49e:	4b74      	ldr	r3, [pc, #464]	; (800a670 <_dtoa_r+0x2e8>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	4639      	mov	r1, r7
 800a4a6:	f7f5 fef7 	bl	8000298 <__aeabi_dsub>
 800a4aa:	a365      	add	r3, pc, #404	; (adr r3, 800a640 <_dtoa_r+0x2b8>)
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	f7f6 f8aa 	bl	8000608 <__aeabi_dmul>
 800a4b4:	a364      	add	r3, pc, #400	; (adr r3, 800a648 <_dtoa_r+0x2c0>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f5 feef 	bl	800029c <__adddf3>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	460f      	mov	r7, r1
 800a4c4:	f7f6 f836 	bl	8000534 <__aeabi_i2d>
 800a4c8:	a361      	add	r3, pc, #388	; (adr r3, 800a650 <_dtoa_r+0x2c8>)
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	f7f6 f89b 	bl	8000608 <__aeabi_dmul>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	4639      	mov	r1, r7
 800a4da:	f7f5 fedf 	bl	800029c <__adddf3>
 800a4de:	4606      	mov	r6, r0
 800a4e0:	460f      	mov	r7, r1
 800a4e2:	f7f6 fb41 	bl	8000b68 <__aeabi_d2iz>
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	9000      	str	r0, [sp, #0]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	f7f6 fafc 	bl	8000aec <__aeabi_dcmplt>
 800a4f4:	b150      	cbz	r0, 800a50c <_dtoa_r+0x184>
 800a4f6:	9800      	ldr	r0, [sp, #0]
 800a4f8:	f7f6 f81c 	bl	8000534 <__aeabi_i2d>
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	463b      	mov	r3, r7
 800a500:	f7f6 faea 	bl	8000ad8 <__aeabi_dcmpeq>
 800a504:	b910      	cbnz	r0, 800a50c <_dtoa_r+0x184>
 800a506:	9b00      	ldr	r3, [sp, #0]
 800a508:	3b01      	subs	r3, #1
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	9b00      	ldr	r3, [sp, #0]
 800a50e:	2b16      	cmp	r3, #22
 800a510:	d85a      	bhi.n	800a5c8 <_dtoa_r+0x240>
 800a512:	9a00      	ldr	r2, [sp, #0]
 800a514:	4b57      	ldr	r3, [pc, #348]	; (800a674 <_dtoa_r+0x2ec>)
 800a516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	ec51 0b19 	vmov	r0, r1, d9
 800a522:	f7f6 fae3 	bl	8000aec <__aeabi_dcmplt>
 800a526:	2800      	cmp	r0, #0
 800a528:	d050      	beq.n	800a5cc <_dtoa_r+0x244>
 800a52a:	9b00      	ldr	r3, [sp, #0]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	2300      	movs	r3, #0
 800a532:	930b      	str	r3, [sp, #44]	; 0x2c
 800a534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a536:	1b5d      	subs	r5, r3, r5
 800a538:	1e6b      	subs	r3, r5, #1
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	bf45      	ittet	mi
 800a53e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a542:	9304      	strmi	r3, [sp, #16]
 800a544:	2300      	movpl	r3, #0
 800a546:	2300      	movmi	r3, #0
 800a548:	bf4c      	ite	mi
 800a54a:	9305      	strmi	r3, [sp, #20]
 800a54c:	9304      	strpl	r3, [sp, #16]
 800a54e:	9b00      	ldr	r3, [sp, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	db3d      	blt.n	800a5d0 <_dtoa_r+0x248>
 800a554:	9b05      	ldr	r3, [sp, #20]
 800a556:	9a00      	ldr	r2, [sp, #0]
 800a558:	920a      	str	r2, [sp, #40]	; 0x28
 800a55a:	4413      	add	r3, r2
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	2300      	movs	r3, #0
 800a560:	9307      	str	r3, [sp, #28]
 800a562:	9b06      	ldr	r3, [sp, #24]
 800a564:	2b09      	cmp	r3, #9
 800a566:	f200 8089 	bhi.w	800a67c <_dtoa_r+0x2f4>
 800a56a:	2b05      	cmp	r3, #5
 800a56c:	bfc4      	itt	gt
 800a56e:	3b04      	subgt	r3, #4
 800a570:	9306      	strgt	r3, [sp, #24]
 800a572:	9b06      	ldr	r3, [sp, #24]
 800a574:	f1a3 0302 	sub.w	r3, r3, #2
 800a578:	bfcc      	ite	gt
 800a57a:	2500      	movgt	r5, #0
 800a57c:	2501      	movle	r5, #1
 800a57e:	2b03      	cmp	r3, #3
 800a580:	f200 8087 	bhi.w	800a692 <_dtoa_r+0x30a>
 800a584:	e8df f003 	tbb	[pc, r3]
 800a588:	59383a2d 	.word	0x59383a2d
 800a58c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a590:	441d      	add	r5, r3
 800a592:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a596:	2b20      	cmp	r3, #32
 800a598:	bfc1      	itttt	gt
 800a59a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a59e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a5a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a5a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a5aa:	bfda      	itte	le
 800a5ac:	f1c3 0320 	rsble	r3, r3, #32
 800a5b0:	fa06 f003 	lslle.w	r0, r6, r3
 800a5b4:	4318      	orrgt	r0, r3
 800a5b6:	f7f5 ffad 	bl	8000514 <__aeabi_ui2d>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4606      	mov	r6, r0
 800a5be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a5c2:	3d01      	subs	r5, #1
 800a5c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a5c6:	e76a      	b.n	800a49e <_dtoa_r+0x116>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e7b2      	b.n	800a532 <_dtoa_r+0x1aa>
 800a5cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5ce:	e7b1      	b.n	800a534 <_dtoa_r+0x1ac>
 800a5d0:	9b04      	ldr	r3, [sp, #16]
 800a5d2:	9a00      	ldr	r2, [sp, #0]
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	4253      	negs	r3, r2
 800a5da:	9307      	str	r3, [sp, #28]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e0:	e7bf      	b.n	800a562 <_dtoa_r+0x1da>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9308      	str	r3, [sp, #32]
 800a5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	dc55      	bgt.n	800a698 <_dtoa_r+0x310>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5f6:	e00c      	b.n	800a612 <_dtoa_r+0x28a>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e7f3      	b.n	800a5e4 <_dtoa_r+0x25c>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a600:	9308      	str	r3, [sp, #32]
 800a602:	9b00      	ldr	r3, [sp, #0]
 800a604:	4413      	add	r3, r2
 800a606:	9302      	str	r3, [sp, #8]
 800a608:	3301      	adds	r3, #1
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	bfb8      	it	lt
 800a610:	2301      	movlt	r3, #1
 800a612:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a614:	2200      	movs	r2, #0
 800a616:	6042      	str	r2, [r0, #4]
 800a618:	2204      	movs	r2, #4
 800a61a:	f102 0614 	add.w	r6, r2, #20
 800a61e:	429e      	cmp	r6, r3
 800a620:	6841      	ldr	r1, [r0, #4]
 800a622:	d93d      	bls.n	800a6a0 <_dtoa_r+0x318>
 800a624:	4620      	mov	r0, r4
 800a626:	f000 fcad 	bl	800af84 <_Balloc>
 800a62a:	9001      	str	r0, [sp, #4]
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d13b      	bne.n	800a6a8 <_dtoa_r+0x320>
 800a630:	4b11      	ldr	r3, [pc, #68]	; (800a678 <_dtoa_r+0x2f0>)
 800a632:	4602      	mov	r2, r0
 800a634:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a638:	e6c0      	b.n	800a3bc <_dtoa_r+0x34>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e7df      	b.n	800a5fe <_dtoa_r+0x276>
 800a63e:	bf00      	nop
 800a640:	636f4361 	.word	0x636f4361
 800a644:	3fd287a7 	.word	0x3fd287a7
 800a648:	8b60c8b3 	.word	0x8b60c8b3
 800a64c:	3fc68a28 	.word	0x3fc68a28
 800a650:	509f79fb 	.word	0x509f79fb
 800a654:	3fd34413 	.word	0x3fd34413
 800a658:	0800d339 	.word	0x0800d339
 800a65c:	0800d350 	.word	0x0800d350
 800a660:	7ff00000 	.word	0x7ff00000
 800a664:	0800d335 	.word	0x0800d335
 800a668:	0800d32c 	.word	0x0800d32c
 800a66c:	0800d309 	.word	0x0800d309
 800a670:	3ff80000 	.word	0x3ff80000
 800a674:	0800d440 	.word	0x0800d440
 800a678:	0800d3ab 	.word	0x0800d3ab
 800a67c:	2501      	movs	r5, #1
 800a67e:	2300      	movs	r3, #0
 800a680:	9306      	str	r3, [sp, #24]
 800a682:	9508      	str	r5, [sp, #32]
 800a684:	f04f 33ff 	mov.w	r3, #4294967295
 800a688:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a68c:	2200      	movs	r2, #0
 800a68e:	2312      	movs	r3, #18
 800a690:	e7b0      	b.n	800a5f4 <_dtoa_r+0x26c>
 800a692:	2301      	movs	r3, #1
 800a694:	9308      	str	r3, [sp, #32]
 800a696:	e7f5      	b.n	800a684 <_dtoa_r+0x2fc>
 800a698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a69e:	e7b8      	b.n	800a612 <_dtoa_r+0x28a>
 800a6a0:	3101      	adds	r1, #1
 800a6a2:	6041      	str	r1, [r0, #4]
 800a6a4:	0052      	lsls	r2, r2, #1
 800a6a6:	e7b8      	b.n	800a61a <_dtoa_r+0x292>
 800a6a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6aa:	9a01      	ldr	r2, [sp, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	2b0e      	cmp	r3, #14
 800a6b2:	f200 809d 	bhi.w	800a7f0 <_dtoa_r+0x468>
 800a6b6:	2d00      	cmp	r5, #0
 800a6b8:	f000 809a 	beq.w	800a7f0 <_dtoa_r+0x468>
 800a6bc:	9b00      	ldr	r3, [sp, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dd32      	ble.n	800a728 <_dtoa_r+0x3a0>
 800a6c2:	4ab7      	ldr	r2, [pc, #732]	; (800a9a0 <_dtoa_r+0x618>)
 800a6c4:	f003 030f 	and.w	r3, r3, #15
 800a6c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a6cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6d0:	9b00      	ldr	r3, [sp, #0]
 800a6d2:	05d8      	lsls	r0, r3, #23
 800a6d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a6d8:	d516      	bpl.n	800a708 <_dtoa_r+0x380>
 800a6da:	4bb2      	ldr	r3, [pc, #712]	; (800a9a4 <_dtoa_r+0x61c>)
 800a6dc:	ec51 0b19 	vmov	r0, r1, d9
 800a6e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6e4:	f7f6 f8ba 	bl	800085c <__aeabi_ddiv>
 800a6e8:	f007 070f 	and.w	r7, r7, #15
 800a6ec:	4682      	mov	sl, r0
 800a6ee:	468b      	mov	fp, r1
 800a6f0:	2503      	movs	r5, #3
 800a6f2:	4eac      	ldr	r6, [pc, #688]	; (800a9a4 <_dtoa_r+0x61c>)
 800a6f4:	b957      	cbnz	r7, 800a70c <_dtoa_r+0x384>
 800a6f6:	4642      	mov	r2, r8
 800a6f8:	464b      	mov	r3, r9
 800a6fa:	4650      	mov	r0, sl
 800a6fc:	4659      	mov	r1, fp
 800a6fe:	f7f6 f8ad 	bl	800085c <__aeabi_ddiv>
 800a702:	4682      	mov	sl, r0
 800a704:	468b      	mov	fp, r1
 800a706:	e028      	b.n	800a75a <_dtoa_r+0x3d2>
 800a708:	2502      	movs	r5, #2
 800a70a:	e7f2      	b.n	800a6f2 <_dtoa_r+0x36a>
 800a70c:	07f9      	lsls	r1, r7, #31
 800a70e:	d508      	bpl.n	800a722 <_dtoa_r+0x39a>
 800a710:	4640      	mov	r0, r8
 800a712:	4649      	mov	r1, r9
 800a714:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a718:	f7f5 ff76 	bl	8000608 <__aeabi_dmul>
 800a71c:	3501      	adds	r5, #1
 800a71e:	4680      	mov	r8, r0
 800a720:	4689      	mov	r9, r1
 800a722:	107f      	asrs	r7, r7, #1
 800a724:	3608      	adds	r6, #8
 800a726:	e7e5      	b.n	800a6f4 <_dtoa_r+0x36c>
 800a728:	f000 809b 	beq.w	800a862 <_dtoa_r+0x4da>
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	4f9d      	ldr	r7, [pc, #628]	; (800a9a4 <_dtoa_r+0x61c>)
 800a730:	425e      	negs	r6, r3
 800a732:	4b9b      	ldr	r3, [pc, #620]	; (800a9a0 <_dtoa_r+0x618>)
 800a734:	f006 020f 	and.w	r2, r6, #15
 800a738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	ec51 0b19 	vmov	r0, r1, d9
 800a744:	f7f5 ff60 	bl	8000608 <__aeabi_dmul>
 800a748:	1136      	asrs	r6, r6, #4
 800a74a:	4682      	mov	sl, r0
 800a74c:	468b      	mov	fp, r1
 800a74e:	2300      	movs	r3, #0
 800a750:	2502      	movs	r5, #2
 800a752:	2e00      	cmp	r6, #0
 800a754:	d17a      	bne.n	800a84c <_dtoa_r+0x4c4>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1d3      	bne.n	800a702 <_dtoa_r+0x37a>
 800a75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 8082 	beq.w	800a866 <_dtoa_r+0x4de>
 800a762:	4b91      	ldr	r3, [pc, #580]	; (800a9a8 <_dtoa_r+0x620>)
 800a764:	2200      	movs	r2, #0
 800a766:	4650      	mov	r0, sl
 800a768:	4659      	mov	r1, fp
 800a76a:	f7f6 f9bf 	bl	8000aec <__aeabi_dcmplt>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d079      	beq.n	800a866 <_dtoa_r+0x4de>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d076      	beq.n	800a866 <_dtoa_r+0x4de>
 800a778:	9b02      	ldr	r3, [sp, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dd36      	ble.n	800a7ec <_dtoa_r+0x464>
 800a77e:	9b00      	ldr	r3, [sp, #0]
 800a780:	4650      	mov	r0, sl
 800a782:	4659      	mov	r1, fp
 800a784:	1e5f      	subs	r7, r3, #1
 800a786:	2200      	movs	r2, #0
 800a788:	4b88      	ldr	r3, [pc, #544]	; (800a9ac <_dtoa_r+0x624>)
 800a78a:	f7f5 ff3d 	bl	8000608 <__aeabi_dmul>
 800a78e:	9e02      	ldr	r6, [sp, #8]
 800a790:	4682      	mov	sl, r0
 800a792:	468b      	mov	fp, r1
 800a794:	3501      	adds	r5, #1
 800a796:	4628      	mov	r0, r5
 800a798:	f7f5 fecc 	bl	8000534 <__aeabi_i2d>
 800a79c:	4652      	mov	r2, sl
 800a79e:	465b      	mov	r3, fp
 800a7a0:	f7f5 ff32 	bl	8000608 <__aeabi_dmul>
 800a7a4:	4b82      	ldr	r3, [pc, #520]	; (800a9b0 <_dtoa_r+0x628>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f7f5 fd78 	bl	800029c <__adddf3>
 800a7ac:	46d0      	mov	r8, sl
 800a7ae:	46d9      	mov	r9, fp
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	d158      	bne.n	800a86c <_dtoa_r+0x4e4>
 800a7ba:	4b7e      	ldr	r3, [pc, #504]	; (800a9b4 <_dtoa_r+0x62c>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4640      	mov	r0, r8
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	f7f5 fd69 	bl	8000298 <__aeabi_dsub>
 800a7c6:	4652      	mov	r2, sl
 800a7c8:	465b      	mov	r3, fp
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	4689      	mov	r9, r1
 800a7ce:	f7f6 f9ab 	bl	8000b28 <__aeabi_dcmpgt>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	f040 8295 	bne.w	800ad02 <_dtoa_r+0x97a>
 800a7d8:	4652      	mov	r2, sl
 800a7da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7de:	4640      	mov	r0, r8
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	f7f6 f983 	bl	8000aec <__aeabi_dcmplt>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f040 8289 	bne.w	800acfe <_dtoa_r+0x976>
 800a7ec:	ec5b ab19 	vmov	sl, fp, d9
 800a7f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f2c0 8148 	blt.w	800aa88 <_dtoa_r+0x700>
 800a7f8:	9a00      	ldr	r2, [sp, #0]
 800a7fa:	2a0e      	cmp	r2, #14
 800a7fc:	f300 8144 	bgt.w	800aa88 <_dtoa_r+0x700>
 800a800:	4b67      	ldr	r3, [pc, #412]	; (800a9a0 <_dtoa_r+0x618>)
 800a802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a806:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f280 80d5 	bge.w	800a9bc <_dtoa_r+0x634>
 800a812:	9b03      	ldr	r3, [sp, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f300 80d1 	bgt.w	800a9bc <_dtoa_r+0x634>
 800a81a:	f040 826f 	bne.w	800acfc <_dtoa_r+0x974>
 800a81e:	4b65      	ldr	r3, [pc, #404]	; (800a9b4 <_dtoa_r+0x62c>)
 800a820:	2200      	movs	r2, #0
 800a822:	4640      	mov	r0, r8
 800a824:	4649      	mov	r1, r9
 800a826:	f7f5 feef 	bl	8000608 <__aeabi_dmul>
 800a82a:	4652      	mov	r2, sl
 800a82c:	465b      	mov	r3, fp
 800a82e:	f7f6 f971 	bl	8000b14 <__aeabi_dcmpge>
 800a832:	9e03      	ldr	r6, [sp, #12]
 800a834:	4637      	mov	r7, r6
 800a836:	2800      	cmp	r0, #0
 800a838:	f040 8245 	bne.w	800acc6 <_dtoa_r+0x93e>
 800a83c:	9d01      	ldr	r5, [sp, #4]
 800a83e:	2331      	movs	r3, #49	; 0x31
 800a840:	f805 3b01 	strb.w	r3, [r5], #1
 800a844:	9b00      	ldr	r3, [sp, #0]
 800a846:	3301      	adds	r3, #1
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	e240      	b.n	800acce <_dtoa_r+0x946>
 800a84c:	07f2      	lsls	r2, r6, #31
 800a84e:	d505      	bpl.n	800a85c <_dtoa_r+0x4d4>
 800a850:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a854:	f7f5 fed8 	bl	8000608 <__aeabi_dmul>
 800a858:	3501      	adds	r5, #1
 800a85a:	2301      	movs	r3, #1
 800a85c:	1076      	asrs	r6, r6, #1
 800a85e:	3708      	adds	r7, #8
 800a860:	e777      	b.n	800a752 <_dtoa_r+0x3ca>
 800a862:	2502      	movs	r5, #2
 800a864:	e779      	b.n	800a75a <_dtoa_r+0x3d2>
 800a866:	9f00      	ldr	r7, [sp, #0]
 800a868:	9e03      	ldr	r6, [sp, #12]
 800a86a:	e794      	b.n	800a796 <_dtoa_r+0x40e>
 800a86c:	9901      	ldr	r1, [sp, #4]
 800a86e:	4b4c      	ldr	r3, [pc, #304]	; (800a9a0 <_dtoa_r+0x618>)
 800a870:	4431      	add	r1, r6
 800a872:	910d      	str	r1, [sp, #52]	; 0x34
 800a874:	9908      	ldr	r1, [sp, #32]
 800a876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a87a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a87e:	2900      	cmp	r1, #0
 800a880:	d043      	beq.n	800a90a <_dtoa_r+0x582>
 800a882:	494d      	ldr	r1, [pc, #308]	; (800a9b8 <_dtoa_r+0x630>)
 800a884:	2000      	movs	r0, #0
 800a886:	f7f5 ffe9 	bl	800085c <__aeabi_ddiv>
 800a88a:	4652      	mov	r2, sl
 800a88c:	465b      	mov	r3, fp
 800a88e:	f7f5 fd03 	bl	8000298 <__aeabi_dsub>
 800a892:	9d01      	ldr	r5, [sp, #4]
 800a894:	4682      	mov	sl, r0
 800a896:	468b      	mov	fp, r1
 800a898:	4649      	mov	r1, r9
 800a89a:	4640      	mov	r0, r8
 800a89c:	f7f6 f964 	bl	8000b68 <__aeabi_d2iz>
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	f7f5 fe47 	bl	8000534 <__aeabi_i2d>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	4649      	mov	r1, r9
 800a8ae:	f7f5 fcf3 	bl	8000298 <__aeabi_dsub>
 800a8b2:	3630      	adds	r6, #48	; 0x30
 800a8b4:	f805 6b01 	strb.w	r6, [r5], #1
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	465b      	mov	r3, fp
 800a8bc:	4680      	mov	r8, r0
 800a8be:	4689      	mov	r9, r1
 800a8c0:	f7f6 f914 	bl	8000aec <__aeabi_dcmplt>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d163      	bne.n	800a990 <_dtoa_r+0x608>
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	4936      	ldr	r1, [pc, #216]	; (800a9a8 <_dtoa_r+0x620>)
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	f7f5 fce2 	bl	8000298 <__aeabi_dsub>
 800a8d4:	4652      	mov	r2, sl
 800a8d6:	465b      	mov	r3, fp
 800a8d8:	f7f6 f908 	bl	8000aec <__aeabi_dcmplt>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	f040 80b5 	bne.w	800aa4c <_dtoa_r+0x6c4>
 800a8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8e4:	429d      	cmp	r5, r3
 800a8e6:	d081      	beq.n	800a7ec <_dtoa_r+0x464>
 800a8e8:	4b30      	ldr	r3, [pc, #192]	; (800a9ac <_dtoa_r+0x624>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	4650      	mov	r0, sl
 800a8ee:	4659      	mov	r1, fp
 800a8f0:	f7f5 fe8a 	bl	8000608 <__aeabi_dmul>
 800a8f4:	4b2d      	ldr	r3, [pc, #180]	; (800a9ac <_dtoa_r+0x624>)
 800a8f6:	4682      	mov	sl, r0
 800a8f8:	468b      	mov	fp, r1
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	2200      	movs	r2, #0
 800a900:	f7f5 fe82 	bl	8000608 <__aeabi_dmul>
 800a904:	4680      	mov	r8, r0
 800a906:	4689      	mov	r9, r1
 800a908:	e7c6      	b.n	800a898 <_dtoa_r+0x510>
 800a90a:	4650      	mov	r0, sl
 800a90c:	4659      	mov	r1, fp
 800a90e:	f7f5 fe7b 	bl	8000608 <__aeabi_dmul>
 800a912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a914:	9d01      	ldr	r5, [sp, #4]
 800a916:	930f      	str	r3, [sp, #60]	; 0x3c
 800a918:	4682      	mov	sl, r0
 800a91a:	468b      	mov	fp, r1
 800a91c:	4649      	mov	r1, r9
 800a91e:	4640      	mov	r0, r8
 800a920:	f7f6 f922 	bl	8000b68 <__aeabi_d2iz>
 800a924:	4606      	mov	r6, r0
 800a926:	f7f5 fe05 	bl	8000534 <__aeabi_i2d>
 800a92a:	3630      	adds	r6, #48	; 0x30
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4640      	mov	r0, r8
 800a932:	4649      	mov	r1, r9
 800a934:	f7f5 fcb0 	bl	8000298 <__aeabi_dsub>
 800a938:	f805 6b01 	strb.w	r6, [r5], #1
 800a93c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a93e:	429d      	cmp	r5, r3
 800a940:	4680      	mov	r8, r0
 800a942:	4689      	mov	r9, r1
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	d124      	bne.n	800a994 <_dtoa_r+0x60c>
 800a94a:	4b1b      	ldr	r3, [pc, #108]	; (800a9b8 <_dtoa_r+0x630>)
 800a94c:	4650      	mov	r0, sl
 800a94e:	4659      	mov	r1, fp
 800a950:	f7f5 fca4 	bl	800029c <__adddf3>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4640      	mov	r0, r8
 800a95a:	4649      	mov	r1, r9
 800a95c:	f7f6 f8e4 	bl	8000b28 <__aeabi_dcmpgt>
 800a960:	2800      	cmp	r0, #0
 800a962:	d173      	bne.n	800aa4c <_dtoa_r+0x6c4>
 800a964:	4652      	mov	r2, sl
 800a966:	465b      	mov	r3, fp
 800a968:	4913      	ldr	r1, [pc, #76]	; (800a9b8 <_dtoa_r+0x630>)
 800a96a:	2000      	movs	r0, #0
 800a96c:	f7f5 fc94 	bl	8000298 <__aeabi_dsub>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4640      	mov	r0, r8
 800a976:	4649      	mov	r1, r9
 800a978:	f7f6 f8b8 	bl	8000aec <__aeabi_dcmplt>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	f43f af35 	beq.w	800a7ec <_dtoa_r+0x464>
 800a982:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a984:	1e6b      	subs	r3, r5, #1
 800a986:	930f      	str	r3, [sp, #60]	; 0x3c
 800a988:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a98c:	2b30      	cmp	r3, #48	; 0x30
 800a98e:	d0f8      	beq.n	800a982 <_dtoa_r+0x5fa>
 800a990:	9700      	str	r7, [sp, #0]
 800a992:	e049      	b.n	800aa28 <_dtoa_r+0x6a0>
 800a994:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <_dtoa_r+0x624>)
 800a996:	f7f5 fe37 	bl	8000608 <__aeabi_dmul>
 800a99a:	4680      	mov	r8, r0
 800a99c:	4689      	mov	r9, r1
 800a99e:	e7bd      	b.n	800a91c <_dtoa_r+0x594>
 800a9a0:	0800d440 	.word	0x0800d440
 800a9a4:	0800d418 	.word	0x0800d418
 800a9a8:	3ff00000 	.word	0x3ff00000
 800a9ac:	40240000 	.word	0x40240000
 800a9b0:	401c0000 	.word	0x401c0000
 800a9b4:	40140000 	.word	0x40140000
 800a9b8:	3fe00000 	.word	0x3fe00000
 800a9bc:	9d01      	ldr	r5, [sp, #4]
 800a9be:	4656      	mov	r6, sl
 800a9c0:	465f      	mov	r7, fp
 800a9c2:	4642      	mov	r2, r8
 800a9c4:	464b      	mov	r3, r9
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	f7f5 ff47 	bl	800085c <__aeabi_ddiv>
 800a9ce:	f7f6 f8cb 	bl	8000b68 <__aeabi_d2iz>
 800a9d2:	4682      	mov	sl, r0
 800a9d4:	f7f5 fdae 	bl	8000534 <__aeabi_i2d>
 800a9d8:	4642      	mov	r2, r8
 800a9da:	464b      	mov	r3, r9
 800a9dc:	f7f5 fe14 	bl	8000608 <__aeabi_dmul>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a9ec:	f7f5 fc54 	bl	8000298 <__aeabi_dsub>
 800a9f0:	f805 6b01 	strb.w	r6, [r5], #1
 800a9f4:	9e01      	ldr	r6, [sp, #4]
 800a9f6:	9f03      	ldr	r7, [sp, #12]
 800a9f8:	1bae      	subs	r6, r5, r6
 800a9fa:	42b7      	cmp	r7, r6
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	d135      	bne.n	800aa6e <_dtoa_r+0x6e6>
 800aa02:	f7f5 fc4b 	bl	800029c <__adddf3>
 800aa06:	4642      	mov	r2, r8
 800aa08:	464b      	mov	r3, r9
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	460f      	mov	r7, r1
 800aa0e:	f7f6 f88b 	bl	8000b28 <__aeabi_dcmpgt>
 800aa12:	b9d0      	cbnz	r0, 800aa4a <_dtoa_r+0x6c2>
 800aa14:	4642      	mov	r2, r8
 800aa16:	464b      	mov	r3, r9
 800aa18:	4630      	mov	r0, r6
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	f7f6 f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa20:	b110      	cbz	r0, 800aa28 <_dtoa_r+0x6a0>
 800aa22:	f01a 0f01 	tst.w	sl, #1
 800aa26:	d110      	bne.n	800aa4a <_dtoa_r+0x6c2>
 800aa28:	4620      	mov	r0, r4
 800aa2a:	ee18 1a10 	vmov	r1, s16
 800aa2e:	f000 fae9 	bl	800b004 <_Bfree>
 800aa32:	2300      	movs	r3, #0
 800aa34:	9800      	ldr	r0, [sp, #0]
 800aa36:	702b      	strb	r3, [r5, #0]
 800aa38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	6018      	str	r0, [r3, #0]
 800aa3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f43f acf1 	beq.w	800a428 <_dtoa_r+0xa0>
 800aa46:	601d      	str	r5, [r3, #0]
 800aa48:	e4ee      	b.n	800a428 <_dtoa_r+0xa0>
 800aa4a:	9f00      	ldr	r7, [sp, #0]
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	461d      	mov	r5, r3
 800aa50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa54:	2a39      	cmp	r2, #57	; 0x39
 800aa56:	d106      	bne.n	800aa66 <_dtoa_r+0x6de>
 800aa58:	9a01      	ldr	r2, [sp, #4]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d1f7      	bne.n	800aa4e <_dtoa_r+0x6c6>
 800aa5e:	9901      	ldr	r1, [sp, #4]
 800aa60:	2230      	movs	r2, #48	; 0x30
 800aa62:	3701      	adds	r7, #1
 800aa64:	700a      	strb	r2, [r1, #0]
 800aa66:	781a      	ldrb	r2, [r3, #0]
 800aa68:	3201      	adds	r2, #1
 800aa6a:	701a      	strb	r2, [r3, #0]
 800aa6c:	e790      	b.n	800a990 <_dtoa_r+0x608>
 800aa6e:	4ba6      	ldr	r3, [pc, #664]	; (800ad08 <_dtoa_r+0x980>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	f7f5 fdc9 	bl	8000608 <__aeabi_dmul>
 800aa76:	2200      	movs	r2, #0
 800aa78:	2300      	movs	r3, #0
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	f7f6 f82b 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d09d      	beq.n	800a9c2 <_dtoa_r+0x63a>
 800aa86:	e7cf      	b.n	800aa28 <_dtoa_r+0x6a0>
 800aa88:	9a08      	ldr	r2, [sp, #32]
 800aa8a:	2a00      	cmp	r2, #0
 800aa8c:	f000 80d7 	beq.w	800ac3e <_dtoa_r+0x8b6>
 800aa90:	9a06      	ldr	r2, [sp, #24]
 800aa92:	2a01      	cmp	r2, #1
 800aa94:	f300 80ba 	bgt.w	800ac0c <_dtoa_r+0x884>
 800aa98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa9a:	2a00      	cmp	r2, #0
 800aa9c:	f000 80b2 	beq.w	800ac04 <_dtoa_r+0x87c>
 800aaa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aaa4:	9e07      	ldr	r6, [sp, #28]
 800aaa6:	9d04      	ldr	r5, [sp, #16]
 800aaa8:	9a04      	ldr	r2, [sp, #16]
 800aaaa:	441a      	add	r2, r3
 800aaac:	9204      	str	r2, [sp, #16]
 800aaae:	9a05      	ldr	r2, [sp, #20]
 800aab0:	2101      	movs	r1, #1
 800aab2:	441a      	add	r2, r3
 800aab4:	4620      	mov	r0, r4
 800aab6:	9205      	str	r2, [sp, #20]
 800aab8:	f000 fb5c 	bl	800b174 <__i2b>
 800aabc:	4607      	mov	r7, r0
 800aabe:	2d00      	cmp	r5, #0
 800aac0:	dd0c      	ble.n	800aadc <_dtoa_r+0x754>
 800aac2:	9b05      	ldr	r3, [sp, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	dd09      	ble.n	800aadc <_dtoa_r+0x754>
 800aac8:	42ab      	cmp	r3, r5
 800aaca:	9a04      	ldr	r2, [sp, #16]
 800aacc:	bfa8      	it	ge
 800aace:	462b      	movge	r3, r5
 800aad0:	1ad2      	subs	r2, r2, r3
 800aad2:	9204      	str	r2, [sp, #16]
 800aad4:	9a05      	ldr	r2, [sp, #20]
 800aad6:	1aed      	subs	r5, r5, r3
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	9305      	str	r3, [sp, #20]
 800aadc:	9b07      	ldr	r3, [sp, #28]
 800aade:	b31b      	cbz	r3, 800ab28 <_dtoa_r+0x7a0>
 800aae0:	9b08      	ldr	r3, [sp, #32]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 80af 	beq.w	800ac46 <_dtoa_r+0x8be>
 800aae8:	2e00      	cmp	r6, #0
 800aaea:	dd13      	ble.n	800ab14 <_dtoa_r+0x78c>
 800aaec:	4639      	mov	r1, r7
 800aaee:	4632      	mov	r2, r6
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f000 fbff 	bl	800b2f4 <__pow5mult>
 800aaf6:	ee18 2a10 	vmov	r2, s16
 800aafa:	4601      	mov	r1, r0
 800aafc:	4607      	mov	r7, r0
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 fb4e 	bl	800b1a0 <__multiply>
 800ab04:	ee18 1a10 	vmov	r1, s16
 800ab08:	4680      	mov	r8, r0
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 fa7a 	bl	800b004 <_Bfree>
 800ab10:	ee08 8a10 	vmov	s16, r8
 800ab14:	9b07      	ldr	r3, [sp, #28]
 800ab16:	1b9a      	subs	r2, r3, r6
 800ab18:	d006      	beq.n	800ab28 <_dtoa_r+0x7a0>
 800ab1a:	ee18 1a10 	vmov	r1, s16
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f000 fbe8 	bl	800b2f4 <__pow5mult>
 800ab24:	ee08 0a10 	vmov	s16, r0
 800ab28:	2101      	movs	r1, #1
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fb22 	bl	800b174 <__i2b>
 800ab30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	4606      	mov	r6, r0
 800ab36:	f340 8088 	ble.w	800ac4a <_dtoa_r+0x8c2>
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	4601      	mov	r1, r0
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 fbd8 	bl	800b2f4 <__pow5mult>
 800ab44:	9b06      	ldr	r3, [sp, #24]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	4606      	mov	r6, r0
 800ab4a:	f340 8081 	ble.w	800ac50 <_dtoa_r+0x8c8>
 800ab4e:	f04f 0800 	mov.w	r8, #0
 800ab52:	6933      	ldr	r3, [r6, #16]
 800ab54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab58:	6918      	ldr	r0, [r3, #16]
 800ab5a:	f000 fabb 	bl	800b0d4 <__hi0bits>
 800ab5e:	f1c0 0020 	rsb	r0, r0, #32
 800ab62:	9b05      	ldr	r3, [sp, #20]
 800ab64:	4418      	add	r0, r3
 800ab66:	f010 001f 	ands.w	r0, r0, #31
 800ab6a:	f000 8092 	beq.w	800ac92 <_dtoa_r+0x90a>
 800ab6e:	f1c0 0320 	rsb	r3, r0, #32
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	f340 808a 	ble.w	800ac8c <_dtoa_r+0x904>
 800ab78:	f1c0 001c 	rsb	r0, r0, #28
 800ab7c:	9b04      	ldr	r3, [sp, #16]
 800ab7e:	4403      	add	r3, r0
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	9b05      	ldr	r3, [sp, #20]
 800ab84:	4403      	add	r3, r0
 800ab86:	4405      	add	r5, r0
 800ab88:	9305      	str	r3, [sp, #20]
 800ab8a:	9b04      	ldr	r3, [sp, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	dd07      	ble.n	800aba0 <_dtoa_r+0x818>
 800ab90:	ee18 1a10 	vmov	r1, s16
 800ab94:	461a      	mov	r2, r3
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fc06 	bl	800b3a8 <__lshift>
 800ab9c:	ee08 0a10 	vmov	s16, r0
 800aba0:	9b05      	ldr	r3, [sp, #20]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dd05      	ble.n	800abb2 <_dtoa_r+0x82a>
 800aba6:	4631      	mov	r1, r6
 800aba8:	461a      	mov	r2, r3
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 fbfc 	bl	800b3a8 <__lshift>
 800abb0:	4606      	mov	r6, r0
 800abb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d06e      	beq.n	800ac96 <_dtoa_r+0x90e>
 800abb8:	ee18 0a10 	vmov	r0, s16
 800abbc:	4631      	mov	r1, r6
 800abbe:	f000 fc63 	bl	800b488 <__mcmp>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	da67      	bge.n	800ac96 <_dtoa_r+0x90e>
 800abc6:	9b00      	ldr	r3, [sp, #0]
 800abc8:	3b01      	subs	r3, #1
 800abca:	ee18 1a10 	vmov	r1, s16
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	220a      	movs	r2, #10
 800abd2:	2300      	movs	r3, #0
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 fa37 	bl	800b048 <__multadd>
 800abda:	9b08      	ldr	r3, [sp, #32]
 800abdc:	ee08 0a10 	vmov	s16, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 81b1 	beq.w	800af48 <_dtoa_r+0xbc0>
 800abe6:	2300      	movs	r3, #0
 800abe8:	4639      	mov	r1, r7
 800abea:	220a      	movs	r2, #10
 800abec:	4620      	mov	r0, r4
 800abee:	f000 fa2b 	bl	800b048 <__multadd>
 800abf2:	9b02      	ldr	r3, [sp, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	4607      	mov	r7, r0
 800abf8:	f300 808e 	bgt.w	800ad18 <_dtoa_r+0x990>
 800abfc:	9b06      	ldr	r3, [sp, #24]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	dc51      	bgt.n	800aca6 <_dtoa_r+0x91e>
 800ac02:	e089      	b.n	800ad18 <_dtoa_r+0x990>
 800ac04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac0a:	e74b      	b.n	800aaa4 <_dtoa_r+0x71c>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	1e5e      	subs	r6, r3, #1
 800ac10:	9b07      	ldr	r3, [sp, #28]
 800ac12:	42b3      	cmp	r3, r6
 800ac14:	bfbf      	itttt	lt
 800ac16:	9b07      	ldrlt	r3, [sp, #28]
 800ac18:	9607      	strlt	r6, [sp, #28]
 800ac1a:	1af2      	sublt	r2, r6, r3
 800ac1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac1e:	bfb6      	itet	lt
 800ac20:	189b      	addlt	r3, r3, r2
 800ac22:	1b9e      	subge	r6, r3, r6
 800ac24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	bfb8      	it	lt
 800ac2a:	2600      	movlt	r6, #0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	bfb7      	itett	lt
 800ac30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ac34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac38:	1a9d      	sublt	r5, r3, r2
 800ac3a:	2300      	movlt	r3, #0
 800ac3c:	e734      	b.n	800aaa8 <_dtoa_r+0x720>
 800ac3e:	9e07      	ldr	r6, [sp, #28]
 800ac40:	9d04      	ldr	r5, [sp, #16]
 800ac42:	9f08      	ldr	r7, [sp, #32]
 800ac44:	e73b      	b.n	800aabe <_dtoa_r+0x736>
 800ac46:	9a07      	ldr	r2, [sp, #28]
 800ac48:	e767      	b.n	800ab1a <_dtoa_r+0x792>
 800ac4a:	9b06      	ldr	r3, [sp, #24]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	dc18      	bgt.n	800ac82 <_dtoa_r+0x8fa>
 800ac50:	f1ba 0f00 	cmp.w	sl, #0
 800ac54:	d115      	bne.n	800ac82 <_dtoa_r+0x8fa>
 800ac56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac5a:	b993      	cbnz	r3, 800ac82 <_dtoa_r+0x8fa>
 800ac5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac60:	0d1b      	lsrs	r3, r3, #20
 800ac62:	051b      	lsls	r3, r3, #20
 800ac64:	b183      	cbz	r3, 800ac88 <_dtoa_r+0x900>
 800ac66:	9b04      	ldr	r3, [sp, #16]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	9304      	str	r3, [sp, #16]
 800ac6c:	9b05      	ldr	r3, [sp, #20]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	9305      	str	r3, [sp, #20]
 800ac72:	f04f 0801 	mov.w	r8, #1
 800ac76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f47f af6a 	bne.w	800ab52 <_dtoa_r+0x7ca>
 800ac7e:	2001      	movs	r0, #1
 800ac80:	e76f      	b.n	800ab62 <_dtoa_r+0x7da>
 800ac82:	f04f 0800 	mov.w	r8, #0
 800ac86:	e7f6      	b.n	800ac76 <_dtoa_r+0x8ee>
 800ac88:	4698      	mov	r8, r3
 800ac8a:	e7f4      	b.n	800ac76 <_dtoa_r+0x8ee>
 800ac8c:	f43f af7d 	beq.w	800ab8a <_dtoa_r+0x802>
 800ac90:	4618      	mov	r0, r3
 800ac92:	301c      	adds	r0, #28
 800ac94:	e772      	b.n	800ab7c <_dtoa_r+0x7f4>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dc37      	bgt.n	800ad0c <_dtoa_r+0x984>
 800ac9c:	9b06      	ldr	r3, [sp, #24]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	dd34      	ble.n	800ad0c <_dtoa_r+0x984>
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	9302      	str	r3, [sp, #8]
 800aca6:	9b02      	ldr	r3, [sp, #8]
 800aca8:	b96b      	cbnz	r3, 800acc6 <_dtoa_r+0x93e>
 800acaa:	4631      	mov	r1, r6
 800acac:	2205      	movs	r2, #5
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 f9ca 	bl	800b048 <__multadd>
 800acb4:	4601      	mov	r1, r0
 800acb6:	4606      	mov	r6, r0
 800acb8:	ee18 0a10 	vmov	r0, s16
 800acbc:	f000 fbe4 	bl	800b488 <__mcmp>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	f73f adbb 	bgt.w	800a83c <_dtoa_r+0x4b4>
 800acc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc8:	9d01      	ldr	r5, [sp, #4]
 800acca:	43db      	mvns	r3, r3
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	f04f 0800 	mov.w	r8, #0
 800acd2:	4631      	mov	r1, r6
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 f995 	bl	800b004 <_Bfree>
 800acda:	2f00      	cmp	r7, #0
 800acdc:	f43f aea4 	beq.w	800aa28 <_dtoa_r+0x6a0>
 800ace0:	f1b8 0f00 	cmp.w	r8, #0
 800ace4:	d005      	beq.n	800acf2 <_dtoa_r+0x96a>
 800ace6:	45b8      	cmp	r8, r7
 800ace8:	d003      	beq.n	800acf2 <_dtoa_r+0x96a>
 800acea:	4641      	mov	r1, r8
 800acec:	4620      	mov	r0, r4
 800acee:	f000 f989 	bl	800b004 <_Bfree>
 800acf2:	4639      	mov	r1, r7
 800acf4:	4620      	mov	r0, r4
 800acf6:	f000 f985 	bl	800b004 <_Bfree>
 800acfa:	e695      	b.n	800aa28 <_dtoa_r+0x6a0>
 800acfc:	2600      	movs	r6, #0
 800acfe:	4637      	mov	r7, r6
 800ad00:	e7e1      	b.n	800acc6 <_dtoa_r+0x93e>
 800ad02:	9700      	str	r7, [sp, #0]
 800ad04:	4637      	mov	r7, r6
 800ad06:	e599      	b.n	800a83c <_dtoa_r+0x4b4>
 800ad08:	40240000 	.word	0x40240000
 800ad0c:	9b08      	ldr	r3, [sp, #32]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 80ca 	beq.w	800aea8 <_dtoa_r+0xb20>
 800ad14:	9b03      	ldr	r3, [sp, #12]
 800ad16:	9302      	str	r3, [sp, #8]
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	dd05      	ble.n	800ad28 <_dtoa_r+0x9a0>
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	462a      	mov	r2, r5
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 fb41 	bl	800b3a8 <__lshift>
 800ad26:	4607      	mov	r7, r0
 800ad28:	f1b8 0f00 	cmp.w	r8, #0
 800ad2c:	d05b      	beq.n	800ade6 <_dtoa_r+0xa5e>
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	4620      	mov	r0, r4
 800ad32:	f000 f927 	bl	800af84 <_Balloc>
 800ad36:	4605      	mov	r5, r0
 800ad38:	b928      	cbnz	r0, 800ad46 <_dtoa_r+0x9be>
 800ad3a:	4b87      	ldr	r3, [pc, #540]	; (800af58 <_dtoa_r+0xbd0>)
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad42:	f7ff bb3b 	b.w	800a3bc <_dtoa_r+0x34>
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	3202      	adds	r2, #2
 800ad4a:	0092      	lsls	r2, r2, #2
 800ad4c:	f107 010c 	add.w	r1, r7, #12
 800ad50:	300c      	adds	r0, #12
 800ad52:	f7fe fcfd 	bl	8009750 <memcpy>
 800ad56:	2201      	movs	r2, #1
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 fb24 	bl	800b3a8 <__lshift>
 800ad60:	9b01      	ldr	r3, [sp, #4]
 800ad62:	f103 0901 	add.w	r9, r3, #1
 800ad66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	9305      	str	r3, [sp, #20]
 800ad6e:	f00a 0301 	and.w	r3, sl, #1
 800ad72:	46b8      	mov	r8, r7
 800ad74:	9304      	str	r3, [sp, #16]
 800ad76:	4607      	mov	r7, r0
 800ad78:	4631      	mov	r1, r6
 800ad7a:	ee18 0a10 	vmov	r0, s16
 800ad7e:	f7ff fa77 	bl	800a270 <quorem>
 800ad82:	4641      	mov	r1, r8
 800ad84:	9002      	str	r0, [sp, #8]
 800ad86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad8a:	ee18 0a10 	vmov	r0, s16
 800ad8e:	f000 fb7b 	bl	800b488 <__mcmp>
 800ad92:	463a      	mov	r2, r7
 800ad94:	9003      	str	r0, [sp, #12]
 800ad96:	4631      	mov	r1, r6
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 fb91 	bl	800b4c0 <__mdiff>
 800ad9e:	68c2      	ldr	r2, [r0, #12]
 800ada0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ada4:	4605      	mov	r5, r0
 800ada6:	bb02      	cbnz	r2, 800adea <_dtoa_r+0xa62>
 800ada8:	4601      	mov	r1, r0
 800adaa:	ee18 0a10 	vmov	r0, s16
 800adae:	f000 fb6b 	bl	800b488 <__mcmp>
 800adb2:	4602      	mov	r2, r0
 800adb4:	4629      	mov	r1, r5
 800adb6:	4620      	mov	r0, r4
 800adb8:	9207      	str	r2, [sp, #28]
 800adba:	f000 f923 	bl	800b004 <_Bfree>
 800adbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800adc2:	ea43 0102 	orr.w	r1, r3, r2
 800adc6:	9b04      	ldr	r3, [sp, #16]
 800adc8:	430b      	orrs	r3, r1
 800adca:	464d      	mov	r5, r9
 800adcc:	d10f      	bne.n	800adee <_dtoa_r+0xa66>
 800adce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800add2:	d02a      	beq.n	800ae2a <_dtoa_r+0xaa2>
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	dd02      	ble.n	800ade0 <_dtoa_r+0xa58>
 800adda:	9b02      	ldr	r3, [sp, #8]
 800addc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ade0:	f88b a000 	strb.w	sl, [fp]
 800ade4:	e775      	b.n	800acd2 <_dtoa_r+0x94a>
 800ade6:	4638      	mov	r0, r7
 800ade8:	e7ba      	b.n	800ad60 <_dtoa_r+0x9d8>
 800adea:	2201      	movs	r2, #1
 800adec:	e7e2      	b.n	800adb4 <_dtoa_r+0xa2c>
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	db04      	blt.n	800adfe <_dtoa_r+0xa76>
 800adf4:	9906      	ldr	r1, [sp, #24]
 800adf6:	430b      	orrs	r3, r1
 800adf8:	9904      	ldr	r1, [sp, #16]
 800adfa:	430b      	orrs	r3, r1
 800adfc:	d122      	bne.n	800ae44 <_dtoa_r+0xabc>
 800adfe:	2a00      	cmp	r2, #0
 800ae00:	ddee      	ble.n	800ade0 <_dtoa_r+0xa58>
 800ae02:	ee18 1a10 	vmov	r1, s16
 800ae06:	2201      	movs	r2, #1
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f000 facd 	bl	800b3a8 <__lshift>
 800ae0e:	4631      	mov	r1, r6
 800ae10:	ee08 0a10 	vmov	s16, r0
 800ae14:	f000 fb38 	bl	800b488 <__mcmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	dc03      	bgt.n	800ae24 <_dtoa_r+0xa9c>
 800ae1c:	d1e0      	bne.n	800ade0 <_dtoa_r+0xa58>
 800ae1e:	f01a 0f01 	tst.w	sl, #1
 800ae22:	d0dd      	beq.n	800ade0 <_dtoa_r+0xa58>
 800ae24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae28:	d1d7      	bne.n	800adda <_dtoa_r+0xa52>
 800ae2a:	2339      	movs	r3, #57	; 0x39
 800ae2c:	f88b 3000 	strb.w	r3, [fp]
 800ae30:	462b      	mov	r3, r5
 800ae32:	461d      	mov	r5, r3
 800ae34:	3b01      	subs	r3, #1
 800ae36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae3a:	2a39      	cmp	r2, #57	; 0x39
 800ae3c:	d071      	beq.n	800af22 <_dtoa_r+0xb9a>
 800ae3e:	3201      	adds	r2, #1
 800ae40:	701a      	strb	r2, [r3, #0]
 800ae42:	e746      	b.n	800acd2 <_dtoa_r+0x94a>
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	dd07      	ble.n	800ae58 <_dtoa_r+0xad0>
 800ae48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae4c:	d0ed      	beq.n	800ae2a <_dtoa_r+0xaa2>
 800ae4e:	f10a 0301 	add.w	r3, sl, #1
 800ae52:	f88b 3000 	strb.w	r3, [fp]
 800ae56:	e73c      	b.n	800acd2 <_dtoa_r+0x94a>
 800ae58:	9b05      	ldr	r3, [sp, #20]
 800ae5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae5e:	4599      	cmp	r9, r3
 800ae60:	d047      	beq.n	800aef2 <_dtoa_r+0xb6a>
 800ae62:	ee18 1a10 	vmov	r1, s16
 800ae66:	2300      	movs	r3, #0
 800ae68:	220a      	movs	r2, #10
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f8ec 	bl	800b048 <__multadd>
 800ae70:	45b8      	cmp	r8, r7
 800ae72:	ee08 0a10 	vmov	s16, r0
 800ae76:	f04f 0300 	mov.w	r3, #0
 800ae7a:	f04f 020a 	mov.w	r2, #10
 800ae7e:	4641      	mov	r1, r8
 800ae80:	4620      	mov	r0, r4
 800ae82:	d106      	bne.n	800ae92 <_dtoa_r+0xb0a>
 800ae84:	f000 f8e0 	bl	800b048 <__multadd>
 800ae88:	4680      	mov	r8, r0
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	f109 0901 	add.w	r9, r9, #1
 800ae90:	e772      	b.n	800ad78 <_dtoa_r+0x9f0>
 800ae92:	f000 f8d9 	bl	800b048 <__multadd>
 800ae96:	4639      	mov	r1, r7
 800ae98:	4680      	mov	r8, r0
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	220a      	movs	r2, #10
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f000 f8d2 	bl	800b048 <__multadd>
 800aea4:	4607      	mov	r7, r0
 800aea6:	e7f1      	b.n	800ae8c <_dtoa_r+0xb04>
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	9302      	str	r3, [sp, #8]
 800aeac:	9d01      	ldr	r5, [sp, #4]
 800aeae:	ee18 0a10 	vmov	r0, s16
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	f7ff f9dc 	bl	800a270 <quorem>
 800aeb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aebc:	9b01      	ldr	r3, [sp, #4]
 800aebe:	f805 ab01 	strb.w	sl, [r5], #1
 800aec2:	1aea      	subs	r2, r5, r3
 800aec4:	9b02      	ldr	r3, [sp, #8]
 800aec6:	4293      	cmp	r3, r2
 800aec8:	dd09      	ble.n	800aede <_dtoa_r+0xb56>
 800aeca:	ee18 1a10 	vmov	r1, s16
 800aece:	2300      	movs	r3, #0
 800aed0:	220a      	movs	r2, #10
 800aed2:	4620      	mov	r0, r4
 800aed4:	f000 f8b8 	bl	800b048 <__multadd>
 800aed8:	ee08 0a10 	vmov	s16, r0
 800aedc:	e7e7      	b.n	800aeae <_dtoa_r+0xb26>
 800aede:	9b02      	ldr	r3, [sp, #8]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	bfc8      	it	gt
 800aee4:	461d      	movgt	r5, r3
 800aee6:	9b01      	ldr	r3, [sp, #4]
 800aee8:	bfd8      	it	le
 800aeea:	2501      	movle	r5, #1
 800aeec:	441d      	add	r5, r3
 800aeee:	f04f 0800 	mov.w	r8, #0
 800aef2:	ee18 1a10 	vmov	r1, s16
 800aef6:	2201      	movs	r2, #1
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 fa55 	bl	800b3a8 <__lshift>
 800aefe:	4631      	mov	r1, r6
 800af00:	ee08 0a10 	vmov	s16, r0
 800af04:	f000 fac0 	bl	800b488 <__mcmp>
 800af08:	2800      	cmp	r0, #0
 800af0a:	dc91      	bgt.n	800ae30 <_dtoa_r+0xaa8>
 800af0c:	d102      	bne.n	800af14 <_dtoa_r+0xb8c>
 800af0e:	f01a 0f01 	tst.w	sl, #1
 800af12:	d18d      	bne.n	800ae30 <_dtoa_r+0xaa8>
 800af14:	462b      	mov	r3, r5
 800af16:	461d      	mov	r5, r3
 800af18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af1c:	2a30      	cmp	r2, #48	; 0x30
 800af1e:	d0fa      	beq.n	800af16 <_dtoa_r+0xb8e>
 800af20:	e6d7      	b.n	800acd2 <_dtoa_r+0x94a>
 800af22:	9a01      	ldr	r2, [sp, #4]
 800af24:	429a      	cmp	r2, r3
 800af26:	d184      	bne.n	800ae32 <_dtoa_r+0xaaa>
 800af28:	9b00      	ldr	r3, [sp, #0]
 800af2a:	3301      	adds	r3, #1
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	2331      	movs	r3, #49	; 0x31
 800af30:	7013      	strb	r3, [r2, #0]
 800af32:	e6ce      	b.n	800acd2 <_dtoa_r+0x94a>
 800af34:	4b09      	ldr	r3, [pc, #36]	; (800af5c <_dtoa_r+0xbd4>)
 800af36:	f7ff ba95 	b.w	800a464 <_dtoa_r+0xdc>
 800af3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f47f aa6e 	bne.w	800a41e <_dtoa_r+0x96>
 800af42:	4b07      	ldr	r3, [pc, #28]	; (800af60 <_dtoa_r+0xbd8>)
 800af44:	f7ff ba8e 	b.w	800a464 <_dtoa_r+0xdc>
 800af48:	9b02      	ldr	r3, [sp, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dcae      	bgt.n	800aeac <_dtoa_r+0xb24>
 800af4e:	9b06      	ldr	r3, [sp, #24]
 800af50:	2b02      	cmp	r3, #2
 800af52:	f73f aea8 	bgt.w	800aca6 <_dtoa_r+0x91e>
 800af56:	e7a9      	b.n	800aeac <_dtoa_r+0xb24>
 800af58:	0800d3ab 	.word	0x0800d3ab
 800af5c:	0800d308 	.word	0x0800d308
 800af60:	0800d32c 	.word	0x0800d32c

0800af64 <_localeconv_r>:
 800af64:	4800      	ldr	r0, [pc, #0]	; (800af68 <_localeconv_r+0x4>)
 800af66:	4770      	bx	lr
 800af68:	20000178 	.word	0x20000178

0800af6c <__malloc_lock>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__malloc_lock+0x8>)
 800af6e:	f000 bd30 	b.w	800b9d2 <__retarget_lock_acquire_recursive>
 800af72:	bf00      	nop
 800af74:	20000934 	.word	0x20000934

0800af78 <__malloc_unlock>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__malloc_unlock+0x8>)
 800af7a:	f000 bd2b 	b.w	800b9d4 <__retarget_lock_release_recursive>
 800af7e:	bf00      	nop
 800af80:	20000934 	.word	0x20000934

0800af84 <_Balloc>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	b976      	cbnz	r6, 800afac <_Balloc+0x28>
 800af8e:	2010      	movs	r0, #16
 800af90:	f7fe fbce 	bl	8009730 <malloc>
 800af94:	4602      	mov	r2, r0
 800af96:	6260      	str	r0, [r4, #36]	; 0x24
 800af98:	b920      	cbnz	r0, 800afa4 <_Balloc+0x20>
 800af9a:	4b18      	ldr	r3, [pc, #96]	; (800affc <_Balloc+0x78>)
 800af9c:	4818      	ldr	r0, [pc, #96]	; (800b000 <_Balloc+0x7c>)
 800af9e:	2166      	movs	r1, #102	; 0x66
 800afa0:	f000 fce6 	bl	800b970 <__assert_func>
 800afa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afa8:	6006      	str	r6, [r0, #0]
 800afaa:	60c6      	str	r6, [r0, #12]
 800afac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afae:	68f3      	ldr	r3, [r6, #12]
 800afb0:	b183      	cbz	r3, 800afd4 <_Balloc+0x50>
 800afb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afba:	b9b8      	cbnz	r0, 800afec <_Balloc+0x68>
 800afbc:	2101      	movs	r1, #1
 800afbe:	fa01 f605 	lsl.w	r6, r1, r5
 800afc2:	1d72      	adds	r2, r6, #5
 800afc4:	0092      	lsls	r2, r2, #2
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 fb60 	bl	800b68c <_calloc_r>
 800afcc:	b160      	cbz	r0, 800afe8 <_Balloc+0x64>
 800afce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afd2:	e00e      	b.n	800aff2 <_Balloc+0x6e>
 800afd4:	2221      	movs	r2, #33	; 0x21
 800afd6:	2104      	movs	r1, #4
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fb57 	bl	800b68c <_calloc_r>
 800afde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe0:	60f0      	str	r0, [r6, #12]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e4      	bne.n	800afb2 <_Balloc+0x2e>
 800afe8:	2000      	movs	r0, #0
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	6802      	ldr	r2, [r0, #0]
 800afee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aff2:	2300      	movs	r3, #0
 800aff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aff8:	e7f7      	b.n	800afea <_Balloc+0x66>
 800affa:	bf00      	nop
 800affc:	0800d339 	.word	0x0800d339
 800b000:	0800d3bc 	.word	0x0800d3bc

0800b004 <_Bfree>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	b976      	cbnz	r6, 800b02c <_Bfree+0x28>
 800b00e:	2010      	movs	r0, #16
 800b010:	f7fe fb8e 	bl	8009730 <malloc>
 800b014:	4602      	mov	r2, r0
 800b016:	6268      	str	r0, [r5, #36]	; 0x24
 800b018:	b920      	cbnz	r0, 800b024 <_Bfree+0x20>
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <_Bfree+0x3c>)
 800b01c:	4809      	ldr	r0, [pc, #36]	; (800b044 <_Bfree+0x40>)
 800b01e:	218a      	movs	r1, #138	; 0x8a
 800b020:	f000 fca6 	bl	800b970 <__assert_func>
 800b024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b028:	6006      	str	r6, [r0, #0]
 800b02a:	60c6      	str	r6, [r0, #12]
 800b02c:	b13c      	cbz	r4, 800b03e <_Bfree+0x3a>
 800b02e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b030:	6862      	ldr	r2, [r4, #4]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b038:	6021      	str	r1, [r4, #0]
 800b03a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
 800b040:	0800d339 	.word	0x0800d339
 800b044:	0800d3bc 	.word	0x0800d3bc

0800b048 <__multadd>:
 800b048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04c:	690d      	ldr	r5, [r1, #16]
 800b04e:	4607      	mov	r7, r0
 800b050:	460c      	mov	r4, r1
 800b052:	461e      	mov	r6, r3
 800b054:	f101 0c14 	add.w	ip, r1, #20
 800b058:	2000      	movs	r0, #0
 800b05a:	f8dc 3000 	ldr.w	r3, [ip]
 800b05e:	b299      	uxth	r1, r3
 800b060:	fb02 6101 	mla	r1, r2, r1, r6
 800b064:	0c1e      	lsrs	r6, r3, #16
 800b066:	0c0b      	lsrs	r3, r1, #16
 800b068:	fb02 3306 	mla	r3, r2, r6, r3
 800b06c:	b289      	uxth	r1, r1
 800b06e:	3001      	adds	r0, #1
 800b070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b074:	4285      	cmp	r5, r0
 800b076:	f84c 1b04 	str.w	r1, [ip], #4
 800b07a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b07e:	dcec      	bgt.n	800b05a <__multadd+0x12>
 800b080:	b30e      	cbz	r6, 800b0c6 <__multadd+0x7e>
 800b082:	68a3      	ldr	r3, [r4, #8]
 800b084:	42ab      	cmp	r3, r5
 800b086:	dc19      	bgt.n	800b0bc <__multadd+0x74>
 800b088:	6861      	ldr	r1, [r4, #4]
 800b08a:	4638      	mov	r0, r7
 800b08c:	3101      	adds	r1, #1
 800b08e:	f7ff ff79 	bl	800af84 <_Balloc>
 800b092:	4680      	mov	r8, r0
 800b094:	b928      	cbnz	r0, 800b0a2 <__multadd+0x5a>
 800b096:	4602      	mov	r2, r0
 800b098:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <__multadd+0x84>)
 800b09a:	480d      	ldr	r0, [pc, #52]	; (800b0d0 <__multadd+0x88>)
 800b09c:	21b5      	movs	r1, #181	; 0xb5
 800b09e:	f000 fc67 	bl	800b970 <__assert_func>
 800b0a2:	6922      	ldr	r2, [r4, #16]
 800b0a4:	3202      	adds	r2, #2
 800b0a6:	f104 010c 	add.w	r1, r4, #12
 800b0aa:	0092      	lsls	r2, r2, #2
 800b0ac:	300c      	adds	r0, #12
 800b0ae:	f7fe fb4f 	bl	8009750 <memcpy>
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f7ff ffa5 	bl	800b004 <_Bfree>
 800b0ba:	4644      	mov	r4, r8
 800b0bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0c0:	3501      	adds	r5, #1
 800b0c2:	615e      	str	r6, [r3, #20]
 800b0c4:	6125      	str	r5, [r4, #16]
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0cc:	0800d3ab 	.word	0x0800d3ab
 800b0d0:	0800d3bc 	.word	0x0800d3bc

0800b0d4 <__hi0bits>:
 800b0d4:	0c03      	lsrs	r3, r0, #16
 800b0d6:	041b      	lsls	r3, r3, #16
 800b0d8:	b9d3      	cbnz	r3, 800b110 <__hi0bits+0x3c>
 800b0da:	0400      	lsls	r0, r0, #16
 800b0dc:	2310      	movs	r3, #16
 800b0de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0e2:	bf04      	itt	eq
 800b0e4:	0200      	lsleq	r0, r0, #8
 800b0e6:	3308      	addeq	r3, #8
 800b0e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0ec:	bf04      	itt	eq
 800b0ee:	0100      	lsleq	r0, r0, #4
 800b0f0:	3304      	addeq	r3, #4
 800b0f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0f6:	bf04      	itt	eq
 800b0f8:	0080      	lsleq	r0, r0, #2
 800b0fa:	3302      	addeq	r3, #2
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	db05      	blt.n	800b10c <__hi0bits+0x38>
 800b100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b104:	f103 0301 	add.w	r3, r3, #1
 800b108:	bf08      	it	eq
 800b10a:	2320      	moveq	r3, #32
 800b10c:	4618      	mov	r0, r3
 800b10e:	4770      	bx	lr
 800b110:	2300      	movs	r3, #0
 800b112:	e7e4      	b.n	800b0de <__hi0bits+0xa>

0800b114 <__lo0bits>:
 800b114:	6803      	ldr	r3, [r0, #0]
 800b116:	f013 0207 	ands.w	r2, r3, #7
 800b11a:	4601      	mov	r1, r0
 800b11c:	d00b      	beq.n	800b136 <__lo0bits+0x22>
 800b11e:	07da      	lsls	r2, r3, #31
 800b120:	d423      	bmi.n	800b16a <__lo0bits+0x56>
 800b122:	0798      	lsls	r0, r3, #30
 800b124:	bf49      	itett	mi
 800b126:	085b      	lsrmi	r3, r3, #1
 800b128:	089b      	lsrpl	r3, r3, #2
 800b12a:	2001      	movmi	r0, #1
 800b12c:	600b      	strmi	r3, [r1, #0]
 800b12e:	bf5c      	itt	pl
 800b130:	600b      	strpl	r3, [r1, #0]
 800b132:	2002      	movpl	r0, #2
 800b134:	4770      	bx	lr
 800b136:	b298      	uxth	r0, r3
 800b138:	b9a8      	cbnz	r0, 800b166 <__lo0bits+0x52>
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	2010      	movs	r0, #16
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	b90a      	cbnz	r2, 800b146 <__lo0bits+0x32>
 800b142:	3008      	adds	r0, #8
 800b144:	0a1b      	lsrs	r3, r3, #8
 800b146:	071a      	lsls	r2, r3, #28
 800b148:	bf04      	itt	eq
 800b14a:	091b      	lsreq	r3, r3, #4
 800b14c:	3004      	addeq	r0, #4
 800b14e:	079a      	lsls	r2, r3, #30
 800b150:	bf04      	itt	eq
 800b152:	089b      	lsreq	r3, r3, #2
 800b154:	3002      	addeq	r0, #2
 800b156:	07da      	lsls	r2, r3, #31
 800b158:	d403      	bmi.n	800b162 <__lo0bits+0x4e>
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	f100 0001 	add.w	r0, r0, #1
 800b160:	d005      	beq.n	800b16e <__lo0bits+0x5a>
 800b162:	600b      	str	r3, [r1, #0]
 800b164:	4770      	bx	lr
 800b166:	4610      	mov	r0, r2
 800b168:	e7e9      	b.n	800b13e <__lo0bits+0x2a>
 800b16a:	2000      	movs	r0, #0
 800b16c:	4770      	bx	lr
 800b16e:	2020      	movs	r0, #32
 800b170:	4770      	bx	lr
	...

0800b174 <__i2b>:
 800b174:	b510      	push	{r4, lr}
 800b176:	460c      	mov	r4, r1
 800b178:	2101      	movs	r1, #1
 800b17a:	f7ff ff03 	bl	800af84 <_Balloc>
 800b17e:	4602      	mov	r2, r0
 800b180:	b928      	cbnz	r0, 800b18e <__i2b+0x1a>
 800b182:	4b05      	ldr	r3, [pc, #20]	; (800b198 <__i2b+0x24>)
 800b184:	4805      	ldr	r0, [pc, #20]	; (800b19c <__i2b+0x28>)
 800b186:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b18a:	f000 fbf1 	bl	800b970 <__assert_func>
 800b18e:	2301      	movs	r3, #1
 800b190:	6144      	str	r4, [r0, #20]
 800b192:	6103      	str	r3, [r0, #16]
 800b194:	bd10      	pop	{r4, pc}
 800b196:	bf00      	nop
 800b198:	0800d3ab 	.word	0x0800d3ab
 800b19c:	0800d3bc 	.word	0x0800d3bc

0800b1a0 <__multiply>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	4691      	mov	r9, r2
 800b1a6:	690a      	ldr	r2, [r1, #16]
 800b1a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	bfb8      	it	lt
 800b1b0:	460b      	movlt	r3, r1
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	bfbc      	itt	lt
 800b1b6:	464c      	movlt	r4, r9
 800b1b8:	4699      	movlt	r9, r3
 800b1ba:	6927      	ldr	r7, [r4, #16]
 800b1bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1c0:	68a3      	ldr	r3, [r4, #8]
 800b1c2:	6861      	ldr	r1, [r4, #4]
 800b1c4:	eb07 060a 	add.w	r6, r7, sl
 800b1c8:	42b3      	cmp	r3, r6
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	bfb8      	it	lt
 800b1ce:	3101      	addlt	r1, #1
 800b1d0:	f7ff fed8 	bl	800af84 <_Balloc>
 800b1d4:	b930      	cbnz	r0, 800b1e4 <__multiply+0x44>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	4b44      	ldr	r3, [pc, #272]	; (800b2ec <__multiply+0x14c>)
 800b1da:	4845      	ldr	r0, [pc, #276]	; (800b2f0 <__multiply+0x150>)
 800b1dc:	f240 115d 	movw	r1, #349	; 0x15d
 800b1e0:	f000 fbc6 	bl	800b970 <__assert_func>
 800b1e4:	f100 0514 	add.w	r5, r0, #20
 800b1e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1ec:	462b      	mov	r3, r5
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4543      	cmp	r3, r8
 800b1f2:	d321      	bcc.n	800b238 <__multiply+0x98>
 800b1f4:	f104 0314 	add.w	r3, r4, #20
 800b1f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1fc:	f109 0314 	add.w	r3, r9, #20
 800b200:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b204:	9202      	str	r2, [sp, #8]
 800b206:	1b3a      	subs	r2, r7, r4
 800b208:	3a15      	subs	r2, #21
 800b20a:	f022 0203 	bic.w	r2, r2, #3
 800b20e:	3204      	adds	r2, #4
 800b210:	f104 0115 	add.w	r1, r4, #21
 800b214:	428f      	cmp	r7, r1
 800b216:	bf38      	it	cc
 800b218:	2204      	movcc	r2, #4
 800b21a:	9201      	str	r2, [sp, #4]
 800b21c:	9a02      	ldr	r2, [sp, #8]
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	429a      	cmp	r2, r3
 800b222:	d80c      	bhi.n	800b23e <__multiply+0x9e>
 800b224:	2e00      	cmp	r6, #0
 800b226:	dd03      	ble.n	800b230 <__multiply+0x90>
 800b228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d05a      	beq.n	800b2e6 <__multiply+0x146>
 800b230:	6106      	str	r6, [r0, #16]
 800b232:	b005      	add	sp, #20
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	f843 2b04 	str.w	r2, [r3], #4
 800b23c:	e7d8      	b.n	800b1f0 <__multiply+0x50>
 800b23e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b242:	f1ba 0f00 	cmp.w	sl, #0
 800b246:	d024      	beq.n	800b292 <__multiply+0xf2>
 800b248:	f104 0e14 	add.w	lr, r4, #20
 800b24c:	46a9      	mov	r9, r5
 800b24e:	f04f 0c00 	mov.w	ip, #0
 800b252:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b256:	f8d9 1000 	ldr.w	r1, [r9]
 800b25a:	fa1f fb82 	uxth.w	fp, r2
 800b25e:	b289      	uxth	r1, r1
 800b260:	fb0a 110b 	mla	r1, sl, fp, r1
 800b264:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b268:	f8d9 2000 	ldr.w	r2, [r9]
 800b26c:	4461      	add	r1, ip
 800b26e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b272:	fb0a c20b 	mla	r2, sl, fp, ip
 800b276:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b27a:	b289      	uxth	r1, r1
 800b27c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b280:	4577      	cmp	r7, lr
 800b282:	f849 1b04 	str.w	r1, [r9], #4
 800b286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b28a:	d8e2      	bhi.n	800b252 <__multiply+0xb2>
 800b28c:	9a01      	ldr	r2, [sp, #4]
 800b28e:	f845 c002 	str.w	ip, [r5, r2]
 800b292:	9a03      	ldr	r2, [sp, #12]
 800b294:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b298:	3304      	adds	r3, #4
 800b29a:	f1b9 0f00 	cmp.w	r9, #0
 800b29e:	d020      	beq.n	800b2e2 <__multiply+0x142>
 800b2a0:	6829      	ldr	r1, [r5, #0]
 800b2a2:	f104 0c14 	add.w	ip, r4, #20
 800b2a6:	46ae      	mov	lr, r5
 800b2a8:	f04f 0a00 	mov.w	sl, #0
 800b2ac:	f8bc b000 	ldrh.w	fp, [ip]
 800b2b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2b4:	fb09 220b 	mla	r2, r9, fp, r2
 800b2b8:	4492      	add	sl, r2
 800b2ba:	b289      	uxth	r1, r1
 800b2bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b2c0:	f84e 1b04 	str.w	r1, [lr], #4
 800b2c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b2cc:	0c12      	lsrs	r2, r2, #16
 800b2ce:	fb09 1102 	mla	r1, r9, r2, r1
 800b2d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2d6:	4567      	cmp	r7, ip
 800b2d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2dc:	d8e6      	bhi.n	800b2ac <__multiply+0x10c>
 800b2de:	9a01      	ldr	r2, [sp, #4]
 800b2e0:	50a9      	str	r1, [r5, r2]
 800b2e2:	3504      	adds	r5, #4
 800b2e4:	e79a      	b.n	800b21c <__multiply+0x7c>
 800b2e6:	3e01      	subs	r6, #1
 800b2e8:	e79c      	b.n	800b224 <__multiply+0x84>
 800b2ea:	bf00      	nop
 800b2ec:	0800d3ab 	.word	0x0800d3ab
 800b2f0:	0800d3bc 	.word	0x0800d3bc

0800b2f4 <__pow5mult>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	f012 0203 	ands.w	r2, r2, #3
 800b2fe:	4606      	mov	r6, r0
 800b300:	460f      	mov	r7, r1
 800b302:	d007      	beq.n	800b314 <__pow5mult+0x20>
 800b304:	4c25      	ldr	r4, [pc, #148]	; (800b39c <__pow5mult+0xa8>)
 800b306:	3a01      	subs	r2, #1
 800b308:	2300      	movs	r3, #0
 800b30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b30e:	f7ff fe9b 	bl	800b048 <__multadd>
 800b312:	4607      	mov	r7, r0
 800b314:	10ad      	asrs	r5, r5, #2
 800b316:	d03d      	beq.n	800b394 <__pow5mult+0xa0>
 800b318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b31a:	b97c      	cbnz	r4, 800b33c <__pow5mult+0x48>
 800b31c:	2010      	movs	r0, #16
 800b31e:	f7fe fa07 	bl	8009730 <malloc>
 800b322:	4602      	mov	r2, r0
 800b324:	6270      	str	r0, [r6, #36]	; 0x24
 800b326:	b928      	cbnz	r0, 800b334 <__pow5mult+0x40>
 800b328:	4b1d      	ldr	r3, [pc, #116]	; (800b3a0 <__pow5mult+0xac>)
 800b32a:	481e      	ldr	r0, [pc, #120]	; (800b3a4 <__pow5mult+0xb0>)
 800b32c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b330:	f000 fb1e 	bl	800b970 <__assert_func>
 800b334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b338:	6004      	str	r4, [r0, #0]
 800b33a:	60c4      	str	r4, [r0, #12]
 800b33c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b344:	b94c      	cbnz	r4, 800b35a <__pow5mult+0x66>
 800b346:	f240 2171 	movw	r1, #625	; 0x271
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ff12 	bl	800b174 <__i2b>
 800b350:	2300      	movs	r3, #0
 800b352:	f8c8 0008 	str.w	r0, [r8, #8]
 800b356:	4604      	mov	r4, r0
 800b358:	6003      	str	r3, [r0, #0]
 800b35a:	f04f 0900 	mov.w	r9, #0
 800b35e:	07eb      	lsls	r3, r5, #31
 800b360:	d50a      	bpl.n	800b378 <__pow5mult+0x84>
 800b362:	4639      	mov	r1, r7
 800b364:	4622      	mov	r2, r4
 800b366:	4630      	mov	r0, r6
 800b368:	f7ff ff1a 	bl	800b1a0 <__multiply>
 800b36c:	4639      	mov	r1, r7
 800b36e:	4680      	mov	r8, r0
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fe47 	bl	800b004 <_Bfree>
 800b376:	4647      	mov	r7, r8
 800b378:	106d      	asrs	r5, r5, #1
 800b37a:	d00b      	beq.n	800b394 <__pow5mult+0xa0>
 800b37c:	6820      	ldr	r0, [r4, #0]
 800b37e:	b938      	cbnz	r0, 800b390 <__pow5mult+0x9c>
 800b380:	4622      	mov	r2, r4
 800b382:	4621      	mov	r1, r4
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff ff0b 	bl	800b1a0 <__multiply>
 800b38a:	6020      	str	r0, [r4, #0]
 800b38c:	f8c0 9000 	str.w	r9, [r0]
 800b390:	4604      	mov	r4, r0
 800b392:	e7e4      	b.n	800b35e <__pow5mult+0x6a>
 800b394:	4638      	mov	r0, r7
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	bf00      	nop
 800b39c:	0800d508 	.word	0x0800d508
 800b3a0:	0800d339 	.word	0x0800d339
 800b3a4:	0800d3bc 	.word	0x0800d3bc

0800b3a8 <__lshift>:
 800b3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	6849      	ldr	r1, [r1, #4]
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	4607      	mov	r7, r0
 800b3ba:	4691      	mov	r9, r2
 800b3bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3c0:	f108 0601 	add.w	r6, r8, #1
 800b3c4:	42b3      	cmp	r3, r6
 800b3c6:	db0b      	blt.n	800b3e0 <__lshift+0x38>
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff fddb 	bl	800af84 <_Balloc>
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b948      	cbnz	r0, 800b3e6 <__lshift+0x3e>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	4b2a      	ldr	r3, [pc, #168]	; (800b480 <__lshift+0xd8>)
 800b3d6:	482b      	ldr	r0, [pc, #172]	; (800b484 <__lshift+0xdc>)
 800b3d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3dc:	f000 fac8 	bl	800b970 <__assert_func>
 800b3e0:	3101      	adds	r1, #1
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	e7ee      	b.n	800b3c4 <__lshift+0x1c>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f100 0114 	add.w	r1, r0, #20
 800b3ec:	f100 0210 	add.w	r2, r0, #16
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	4553      	cmp	r3, sl
 800b3f4:	db37      	blt.n	800b466 <__lshift+0xbe>
 800b3f6:	6920      	ldr	r0, [r4, #16]
 800b3f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3fc:	f104 0314 	add.w	r3, r4, #20
 800b400:	f019 091f 	ands.w	r9, r9, #31
 800b404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b40c:	d02f      	beq.n	800b46e <__lshift+0xc6>
 800b40e:	f1c9 0e20 	rsb	lr, r9, #32
 800b412:	468a      	mov	sl, r1
 800b414:	f04f 0c00 	mov.w	ip, #0
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	fa02 f209 	lsl.w	r2, r2, r9
 800b41e:	ea42 020c 	orr.w	r2, r2, ip
 800b422:	f84a 2b04 	str.w	r2, [sl], #4
 800b426:	f853 2b04 	ldr.w	r2, [r3], #4
 800b42a:	4298      	cmp	r0, r3
 800b42c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b430:	d8f2      	bhi.n	800b418 <__lshift+0x70>
 800b432:	1b03      	subs	r3, r0, r4
 800b434:	3b15      	subs	r3, #21
 800b436:	f023 0303 	bic.w	r3, r3, #3
 800b43a:	3304      	adds	r3, #4
 800b43c:	f104 0215 	add.w	r2, r4, #21
 800b440:	4290      	cmp	r0, r2
 800b442:	bf38      	it	cc
 800b444:	2304      	movcc	r3, #4
 800b446:	f841 c003 	str.w	ip, [r1, r3]
 800b44a:	f1bc 0f00 	cmp.w	ip, #0
 800b44e:	d001      	beq.n	800b454 <__lshift+0xac>
 800b450:	f108 0602 	add.w	r6, r8, #2
 800b454:	3e01      	subs	r6, #1
 800b456:	4638      	mov	r0, r7
 800b458:	612e      	str	r6, [r5, #16]
 800b45a:	4621      	mov	r1, r4
 800b45c:	f7ff fdd2 	bl	800b004 <_Bfree>
 800b460:	4628      	mov	r0, r5
 800b462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b466:	f842 0f04 	str.w	r0, [r2, #4]!
 800b46a:	3301      	adds	r3, #1
 800b46c:	e7c1      	b.n	800b3f2 <__lshift+0x4a>
 800b46e:	3904      	subs	r1, #4
 800b470:	f853 2b04 	ldr.w	r2, [r3], #4
 800b474:	f841 2f04 	str.w	r2, [r1, #4]!
 800b478:	4298      	cmp	r0, r3
 800b47a:	d8f9      	bhi.n	800b470 <__lshift+0xc8>
 800b47c:	e7ea      	b.n	800b454 <__lshift+0xac>
 800b47e:	bf00      	nop
 800b480:	0800d3ab 	.word	0x0800d3ab
 800b484:	0800d3bc 	.word	0x0800d3bc

0800b488 <__mcmp>:
 800b488:	b530      	push	{r4, r5, lr}
 800b48a:	6902      	ldr	r2, [r0, #16]
 800b48c:	690c      	ldr	r4, [r1, #16]
 800b48e:	1b12      	subs	r2, r2, r4
 800b490:	d10e      	bne.n	800b4b0 <__mcmp+0x28>
 800b492:	f100 0314 	add.w	r3, r0, #20
 800b496:	3114      	adds	r1, #20
 800b498:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b49c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4a8:	42a5      	cmp	r5, r4
 800b4aa:	d003      	beq.n	800b4b4 <__mcmp+0x2c>
 800b4ac:	d305      	bcc.n	800b4ba <__mcmp+0x32>
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	bd30      	pop	{r4, r5, pc}
 800b4b4:	4283      	cmp	r3, r0
 800b4b6:	d3f3      	bcc.n	800b4a0 <__mcmp+0x18>
 800b4b8:	e7fa      	b.n	800b4b0 <__mcmp+0x28>
 800b4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b4be:	e7f7      	b.n	800b4b0 <__mcmp+0x28>

0800b4c0 <__mdiff>:
 800b4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4690      	mov	r8, r2
 800b4ce:	f7ff ffdb 	bl	800b488 <__mcmp>
 800b4d2:	1e05      	subs	r5, r0, #0
 800b4d4:	d110      	bne.n	800b4f8 <__mdiff+0x38>
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7ff fd53 	bl	800af84 <_Balloc>
 800b4de:	b930      	cbnz	r0, 800b4ee <__mdiff+0x2e>
 800b4e0:	4b3a      	ldr	r3, [pc, #232]	; (800b5cc <__mdiff+0x10c>)
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	f240 2132 	movw	r1, #562	; 0x232
 800b4e8:	4839      	ldr	r0, [pc, #228]	; (800b5d0 <__mdiff+0x110>)
 800b4ea:	f000 fa41 	bl	800b970 <__assert_func>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f8:	bfa4      	itt	ge
 800b4fa:	4643      	movge	r3, r8
 800b4fc:	46a0      	movge	r8, r4
 800b4fe:	4630      	mov	r0, r6
 800b500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b504:	bfa6      	itte	ge
 800b506:	461c      	movge	r4, r3
 800b508:	2500      	movge	r5, #0
 800b50a:	2501      	movlt	r5, #1
 800b50c:	f7ff fd3a 	bl	800af84 <_Balloc>
 800b510:	b920      	cbnz	r0, 800b51c <__mdiff+0x5c>
 800b512:	4b2e      	ldr	r3, [pc, #184]	; (800b5cc <__mdiff+0x10c>)
 800b514:	4602      	mov	r2, r0
 800b516:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b51a:	e7e5      	b.n	800b4e8 <__mdiff+0x28>
 800b51c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b520:	6926      	ldr	r6, [r4, #16]
 800b522:	60c5      	str	r5, [r0, #12]
 800b524:	f104 0914 	add.w	r9, r4, #20
 800b528:	f108 0514 	add.w	r5, r8, #20
 800b52c:	f100 0e14 	add.w	lr, r0, #20
 800b530:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b534:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b538:	f108 0210 	add.w	r2, r8, #16
 800b53c:	46f2      	mov	sl, lr
 800b53e:	2100      	movs	r1, #0
 800b540:	f859 3b04 	ldr.w	r3, [r9], #4
 800b544:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b548:	fa1f f883 	uxth.w	r8, r3
 800b54c:	fa11 f18b 	uxtah	r1, r1, fp
 800b550:	0c1b      	lsrs	r3, r3, #16
 800b552:	eba1 0808 	sub.w	r8, r1, r8
 800b556:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b55a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b55e:	fa1f f888 	uxth.w	r8, r8
 800b562:	1419      	asrs	r1, r3, #16
 800b564:	454e      	cmp	r6, r9
 800b566:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b56a:	f84a 3b04 	str.w	r3, [sl], #4
 800b56e:	d8e7      	bhi.n	800b540 <__mdiff+0x80>
 800b570:	1b33      	subs	r3, r6, r4
 800b572:	3b15      	subs	r3, #21
 800b574:	f023 0303 	bic.w	r3, r3, #3
 800b578:	3304      	adds	r3, #4
 800b57a:	3415      	adds	r4, #21
 800b57c:	42a6      	cmp	r6, r4
 800b57e:	bf38      	it	cc
 800b580:	2304      	movcc	r3, #4
 800b582:	441d      	add	r5, r3
 800b584:	4473      	add	r3, lr
 800b586:	469e      	mov	lr, r3
 800b588:	462e      	mov	r6, r5
 800b58a:	4566      	cmp	r6, ip
 800b58c:	d30e      	bcc.n	800b5ac <__mdiff+0xec>
 800b58e:	f10c 0203 	add.w	r2, ip, #3
 800b592:	1b52      	subs	r2, r2, r5
 800b594:	f022 0203 	bic.w	r2, r2, #3
 800b598:	3d03      	subs	r5, #3
 800b59a:	45ac      	cmp	ip, r5
 800b59c:	bf38      	it	cc
 800b59e:	2200      	movcc	r2, #0
 800b5a0:	441a      	add	r2, r3
 800b5a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b5a6:	b17b      	cbz	r3, 800b5c8 <__mdiff+0x108>
 800b5a8:	6107      	str	r7, [r0, #16]
 800b5aa:	e7a3      	b.n	800b4f4 <__mdiff+0x34>
 800b5ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5b0:	fa11 f288 	uxtah	r2, r1, r8
 800b5b4:	1414      	asrs	r4, r2, #16
 800b5b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5ba:	b292      	uxth	r2, r2
 800b5bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5c0:	f84e 2b04 	str.w	r2, [lr], #4
 800b5c4:	1421      	asrs	r1, r4, #16
 800b5c6:	e7e0      	b.n	800b58a <__mdiff+0xca>
 800b5c8:	3f01      	subs	r7, #1
 800b5ca:	e7ea      	b.n	800b5a2 <__mdiff+0xe2>
 800b5cc:	0800d3ab 	.word	0x0800d3ab
 800b5d0:	0800d3bc 	.word	0x0800d3bc

0800b5d4 <__d2b>:
 800b5d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5d8:	4689      	mov	r9, r1
 800b5da:	2101      	movs	r1, #1
 800b5dc:	ec57 6b10 	vmov	r6, r7, d0
 800b5e0:	4690      	mov	r8, r2
 800b5e2:	f7ff fccf 	bl	800af84 <_Balloc>
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	b930      	cbnz	r0, 800b5f8 <__d2b+0x24>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b25      	ldr	r3, [pc, #148]	; (800b684 <__d2b+0xb0>)
 800b5ee:	4826      	ldr	r0, [pc, #152]	; (800b688 <__d2b+0xb4>)
 800b5f0:	f240 310a 	movw	r1, #778	; 0x30a
 800b5f4:	f000 f9bc 	bl	800b970 <__assert_func>
 800b5f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b600:	bb35      	cbnz	r5, 800b650 <__d2b+0x7c>
 800b602:	2e00      	cmp	r6, #0
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	d028      	beq.n	800b65a <__d2b+0x86>
 800b608:	4668      	mov	r0, sp
 800b60a:	9600      	str	r6, [sp, #0]
 800b60c:	f7ff fd82 	bl	800b114 <__lo0bits>
 800b610:	9900      	ldr	r1, [sp, #0]
 800b612:	b300      	cbz	r0, 800b656 <__d2b+0x82>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	f1c0 0320 	rsb	r3, r0, #32
 800b61a:	fa02 f303 	lsl.w	r3, r2, r3
 800b61e:	430b      	orrs	r3, r1
 800b620:	40c2      	lsrs	r2, r0
 800b622:	6163      	str	r3, [r4, #20]
 800b624:	9201      	str	r2, [sp, #4]
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	61a3      	str	r3, [r4, #24]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bf14      	ite	ne
 800b62e:	2202      	movne	r2, #2
 800b630:	2201      	moveq	r2, #1
 800b632:	6122      	str	r2, [r4, #16]
 800b634:	b1d5      	cbz	r5, 800b66c <__d2b+0x98>
 800b636:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b63a:	4405      	add	r5, r0
 800b63c:	f8c9 5000 	str.w	r5, [r9]
 800b640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b644:	f8c8 0000 	str.w	r0, [r8]
 800b648:	4620      	mov	r0, r4
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b654:	e7d5      	b.n	800b602 <__d2b+0x2e>
 800b656:	6161      	str	r1, [r4, #20]
 800b658:	e7e5      	b.n	800b626 <__d2b+0x52>
 800b65a:	a801      	add	r0, sp, #4
 800b65c:	f7ff fd5a 	bl	800b114 <__lo0bits>
 800b660:	9b01      	ldr	r3, [sp, #4]
 800b662:	6163      	str	r3, [r4, #20]
 800b664:	2201      	movs	r2, #1
 800b666:	6122      	str	r2, [r4, #16]
 800b668:	3020      	adds	r0, #32
 800b66a:	e7e3      	b.n	800b634 <__d2b+0x60>
 800b66c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b674:	f8c9 0000 	str.w	r0, [r9]
 800b678:	6918      	ldr	r0, [r3, #16]
 800b67a:	f7ff fd2b 	bl	800b0d4 <__hi0bits>
 800b67e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b682:	e7df      	b.n	800b644 <__d2b+0x70>
 800b684:	0800d3ab 	.word	0x0800d3ab
 800b688:	0800d3bc 	.word	0x0800d3bc

0800b68c <_calloc_r>:
 800b68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68e:	fba1 2402 	umull	r2, r4, r1, r2
 800b692:	b94c      	cbnz	r4, 800b6a8 <_calloc_r+0x1c>
 800b694:	4611      	mov	r1, r2
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	f7fe f8dc 	bl	8009854 <_malloc_r>
 800b69c:	9a01      	ldr	r2, [sp, #4]
 800b69e:	4605      	mov	r5, r0
 800b6a0:	b930      	cbnz	r0, 800b6b0 <_calloc_r+0x24>
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	b003      	add	sp, #12
 800b6a6:	bd30      	pop	{r4, r5, pc}
 800b6a8:	220c      	movs	r2, #12
 800b6aa:	6002      	str	r2, [r0, #0]
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	e7f8      	b.n	800b6a2 <_calloc_r+0x16>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	f7fe f85b 	bl	800976c <memset>
 800b6b6:	e7f4      	b.n	800b6a2 <_calloc_r+0x16>

0800b6b8 <__ssputs_r>:
 800b6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6bc:	688e      	ldr	r6, [r1, #8]
 800b6be:	429e      	cmp	r6, r3
 800b6c0:	4682      	mov	sl, r0
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	4690      	mov	r8, r2
 800b6c6:	461f      	mov	r7, r3
 800b6c8:	d838      	bhi.n	800b73c <__ssputs_r+0x84>
 800b6ca:	898a      	ldrh	r2, [r1, #12]
 800b6cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6d0:	d032      	beq.n	800b738 <__ssputs_r+0x80>
 800b6d2:	6825      	ldr	r5, [r4, #0]
 800b6d4:	6909      	ldr	r1, [r1, #16]
 800b6d6:	eba5 0901 	sub.w	r9, r5, r1
 800b6da:	6965      	ldr	r5, [r4, #20]
 800b6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	444b      	add	r3, r9
 800b6e8:	106d      	asrs	r5, r5, #1
 800b6ea:	429d      	cmp	r5, r3
 800b6ec:	bf38      	it	cc
 800b6ee:	461d      	movcc	r5, r3
 800b6f0:	0553      	lsls	r3, r2, #21
 800b6f2:	d531      	bpl.n	800b758 <__ssputs_r+0xa0>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7fe f8ad 	bl	8009854 <_malloc_r>
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	b950      	cbnz	r0, 800b714 <__ssputs_r+0x5c>
 800b6fe:	230c      	movs	r3, #12
 800b700:	f8ca 3000 	str.w	r3, [sl]
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b70a:	81a3      	strh	r3, [r4, #12]
 800b70c:	f04f 30ff 	mov.w	r0, #4294967295
 800b710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b714:	6921      	ldr	r1, [r4, #16]
 800b716:	464a      	mov	r2, r9
 800b718:	f7fe f81a 	bl	8009750 <memcpy>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b726:	81a3      	strh	r3, [r4, #12]
 800b728:	6126      	str	r6, [r4, #16]
 800b72a:	6165      	str	r5, [r4, #20]
 800b72c:	444e      	add	r6, r9
 800b72e:	eba5 0509 	sub.w	r5, r5, r9
 800b732:	6026      	str	r6, [r4, #0]
 800b734:	60a5      	str	r5, [r4, #8]
 800b736:	463e      	mov	r6, r7
 800b738:	42be      	cmp	r6, r7
 800b73a:	d900      	bls.n	800b73e <__ssputs_r+0x86>
 800b73c:	463e      	mov	r6, r7
 800b73e:	6820      	ldr	r0, [r4, #0]
 800b740:	4632      	mov	r2, r6
 800b742:	4641      	mov	r1, r8
 800b744:	f000 f959 	bl	800b9fa <memmove>
 800b748:	68a3      	ldr	r3, [r4, #8]
 800b74a:	1b9b      	subs	r3, r3, r6
 800b74c:	60a3      	str	r3, [r4, #8]
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	4433      	add	r3, r6
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	2000      	movs	r0, #0
 800b756:	e7db      	b.n	800b710 <__ssputs_r+0x58>
 800b758:	462a      	mov	r2, r5
 800b75a:	f000 f968 	bl	800ba2e <_realloc_r>
 800b75e:	4606      	mov	r6, r0
 800b760:	2800      	cmp	r0, #0
 800b762:	d1e1      	bne.n	800b728 <__ssputs_r+0x70>
 800b764:	6921      	ldr	r1, [r4, #16]
 800b766:	4650      	mov	r0, sl
 800b768:	f7fe f808 	bl	800977c <_free_r>
 800b76c:	e7c7      	b.n	800b6fe <__ssputs_r+0x46>
	...

0800b770 <_svfiprintf_r>:
 800b770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	4698      	mov	r8, r3
 800b776:	898b      	ldrh	r3, [r1, #12]
 800b778:	061b      	lsls	r3, r3, #24
 800b77a:	b09d      	sub	sp, #116	; 0x74
 800b77c:	4607      	mov	r7, r0
 800b77e:	460d      	mov	r5, r1
 800b780:	4614      	mov	r4, r2
 800b782:	d50e      	bpl.n	800b7a2 <_svfiprintf_r+0x32>
 800b784:	690b      	ldr	r3, [r1, #16]
 800b786:	b963      	cbnz	r3, 800b7a2 <_svfiprintf_r+0x32>
 800b788:	2140      	movs	r1, #64	; 0x40
 800b78a:	f7fe f863 	bl	8009854 <_malloc_r>
 800b78e:	6028      	str	r0, [r5, #0]
 800b790:	6128      	str	r0, [r5, #16]
 800b792:	b920      	cbnz	r0, 800b79e <_svfiprintf_r+0x2e>
 800b794:	230c      	movs	r3, #12
 800b796:	603b      	str	r3, [r7, #0]
 800b798:	f04f 30ff 	mov.w	r0, #4294967295
 800b79c:	e0d1      	b.n	800b942 <_svfiprintf_r+0x1d2>
 800b79e:	2340      	movs	r3, #64	; 0x40
 800b7a0:	616b      	str	r3, [r5, #20]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a6:	2320      	movs	r3, #32
 800b7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7b0:	2330      	movs	r3, #48	; 0x30
 800b7b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b95c <_svfiprintf_r+0x1ec>
 800b7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7ba:	f04f 0901 	mov.w	r9, #1
 800b7be:	4623      	mov	r3, r4
 800b7c0:	469a      	mov	sl, r3
 800b7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7c6:	b10a      	cbz	r2, 800b7cc <_svfiprintf_r+0x5c>
 800b7c8:	2a25      	cmp	r2, #37	; 0x25
 800b7ca:	d1f9      	bne.n	800b7c0 <_svfiprintf_r+0x50>
 800b7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b7d0:	d00b      	beq.n	800b7ea <_svfiprintf_r+0x7a>
 800b7d2:	465b      	mov	r3, fp
 800b7d4:	4622      	mov	r2, r4
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f7ff ff6d 	bl	800b6b8 <__ssputs_r>
 800b7de:	3001      	adds	r0, #1
 800b7e0:	f000 80aa 	beq.w	800b938 <_svfiprintf_r+0x1c8>
 800b7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7e6:	445a      	add	r2, fp
 800b7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 80a2 	beq.w	800b938 <_svfiprintf_r+0x1c8>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7fe:	f10a 0a01 	add.w	sl, sl, #1
 800b802:	9304      	str	r3, [sp, #16]
 800b804:	9307      	str	r3, [sp, #28]
 800b806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b80a:	931a      	str	r3, [sp, #104]	; 0x68
 800b80c:	4654      	mov	r4, sl
 800b80e:	2205      	movs	r2, #5
 800b810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b814:	4851      	ldr	r0, [pc, #324]	; (800b95c <_svfiprintf_r+0x1ec>)
 800b816:	f7f4 fceb 	bl	80001f0 <memchr>
 800b81a:	9a04      	ldr	r2, [sp, #16]
 800b81c:	b9d8      	cbnz	r0, 800b856 <_svfiprintf_r+0xe6>
 800b81e:	06d0      	lsls	r0, r2, #27
 800b820:	bf44      	itt	mi
 800b822:	2320      	movmi	r3, #32
 800b824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b828:	0711      	lsls	r1, r2, #28
 800b82a:	bf44      	itt	mi
 800b82c:	232b      	movmi	r3, #43	; 0x2b
 800b82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b832:	f89a 3000 	ldrb.w	r3, [sl]
 800b836:	2b2a      	cmp	r3, #42	; 0x2a
 800b838:	d015      	beq.n	800b866 <_svfiprintf_r+0xf6>
 800b83a:	9a07      	ldr	r2, [sp, #28]
 800b83c:	4654      	mov	r4, sl
 800b83e:	2000      	movs	r0, #0
 800b840:	f04f 0c0a 	mov.w	ip, #10
 800b844:	4621      	mov	r1, r4
 800b846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b84a:	3b30      	subs	r3, #48	; 0x30
 800b84c:	2b09      	cmp	r3, #9
 800b84e:	d94e      	bls.n	800b8ee <_svfiprintf_r+0x17e>
 800b850:	b1b0      	cbz	r0, 800b880 <_svfiprintf_r+0x110>
 800b852:	9207      	str	r2, [sp, #28]
 800b854:	e014      	b.n	800b880 <_svfiprintf_r+0x110>
 800b856:	eba0 0308 	sub.w	r3, r0, r8
 800b85a:	fa09 f303 	lsl.w	r3, r9, r3
 800b85e:	4313      	orrs	r3, r2
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	46a2      	mov	sl, r4
 800b864:	e7d2      	b.n	800b80c <_svfiprintf_r+0x9c>
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	1d19      	adds	r1, r3, #4
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	9103      	str	r1, [sp, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	bfbb      	ittet	lt
 800b872:	425b      	neglt	r3, r3
 800b874:	f042 0202 	orrlt.w	r2, r2, #2
 800b878:	9307      	strge	r3, [sp, #28]
 800b87a:	9307      	strlt	r3, [sp, #28]
 800b87c:	bfb8      	it	lt
 800b87e:	9204      	strlt	r2, [sp, #16]
 800b880:	7823      	ldrb	r3, [r4, #0]
 800b882:	2b2e      	cmp	r3, #46	; 0x2e
 800b884:	d10c      	bne.n	800b8a0 <_svfiprintf_r+0x130>
 800b886:	7863      	ldrb	r3, [r4, #1]
 800b888:	2b2a      	cmp	r3, #42	; 0x2a
 800b88a:	d135      	bne.n	800b8f8 <_svfiprintf_r+0x188>
 800b88c:	9b03      	ldr	r3, [sp, #12]
 800b88e:	1d1a      	adds	r2, r3, #4
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	9203      	str	r2, [sp, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	bfb8      	it	lt
 800b898:	f04f 33ff 	movlt.w	r3, #4294967295
 800b89c:	3402      	adds	r4, #2
 800b89e:	9305      	str	r3, [sp, #20]
 800b8a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b96c <_svfiprintf_r+0x1fc>
 800b8a4:	7821      	ldrb	r1, [r4, #0]
 800b8a6:	2203      	movs	r2, #3
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	f7f4 fca1 	bl	80001f0 <memchr>
 800b8ae:	b140      	cbz	r0, 800b8c2 <_svfiprintf_r+0x152>
 800b8b0:	2340      	movs	r3, #64	; 0x40
 800b8b2:	eba0 000a 	sub.w	r0, r0, sl
 800b8b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b8ba:	9b04      	ldr	r3, [sp, #16]
 800b8bc:	4303      	orrs	r3, r0
 800b8be:	3401      	adds	r4, #1
 800b8c0:	9304      	str	r3, [sp, #16]
 800b8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c6:	4826      	ldr	r0, [pc, #152]	; (800b960 <_svfiprintf_r+0x1f0>)
 800b8c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8cc:	2206      	movs	r2, #6
 800b8ce:	f7f4 fc8f 	bl	80001f0 <memchr>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d038      	beq.n	800b948 <_svfiprintf_r+0x1d8>
 800b8d6:	4b23      	ldr	r3, [pc, #140]	; (800b964 <_svfiprintf_r+0x1f4>)
 800b8d8:	bb1b      	cbnz	r3, 800b922 <_svfiprintf_r+0x1b2>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	3307      	adds	r3, #7
 800b8de:	f023 0307 	bic.w	r3, r3, #7
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e8:	4433      	add	r3, r6
 800b8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ec:	e767      	b.n	800b7be <_svfiprintf_r+0x4e>
 800b8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	e7a5      	b.n	800b844 <_svfiprintf_r+0xd4>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	3401      	adds	r4, #1
 800b8fc:	9305      	str	r3, [sp, #20]
 800b8fe:	4619      	mov	r1, r3
 800b900:	f04f 0c0a 	mov.w	ip, #10
 800b904:	4620      	mov	r0, r4
 800b906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b90a:	3a30      	subs	r2, #48	; 0x30
 800b90c:	2a09      	cmp	r2, #9
 800b90e:	d903      	bls.n	800b918 <_svfiprintf_r+0x1a8>
 800b910:	2b00      	cmp	r3, #0
 800b912:	d0c5      	beq.n	800b8a0 <_svfiprintf_r+0x130>
 800b914:	9105      	str	r1, [sp, #20]
 800b916:	e7c3      	b.n	800b8a0 <_svfiprintf_r+0x130>
 800b918:	fb0c 2101 	mla	r1, ip, r1, r2
 800b91c:	4604      	mov	r4, r0
 800b91e:	2301      	movs	r3, #1
 800b920:	e7f0      	b.n	800b904 <_svfiprintf_r+0x194>
 800b922:	ab03      	add	r3, sp, #12
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	462a      	mov	r2, r5
 800b928:	4b0f      	ldr	r3, [pc, #60]	; (800b968 <_svfiprintf_r+0x1f8>)
 800b92a:	a904      	add	r1, sp, #16
 800b92c:	4638      	mov	r0, r7
 800b92e:	f7fe f8a5 	bl	8009a7c <_printf_float>
 800b932:	1c42      	adds	r2, r0, #1
 800b934:	4606      	mov	r6, r0
 800b936:	d1d6      	bne.n	800b8e6 <_svfiprintf_r+0x176>
 800b938:	89ab      	ldrh	r3, [r5, #12]
 800b93a:	065b      	lsls	r3, r3, #25
 800b93c:	f53f af2c 	bmi.w	800b798 <_svfiprintf_r+0x28>
 800b940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b942:	b01d      	add	sp, #116	; 0x74
 800b944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b948:	ab03      	add	r3, sp, #12
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	462a      	mov	r2, r5
 800b94e:	4b06      	ldr	r3, [pc, #24]	; (800b968 <_svfiprintf_r+0x1f8>)
 800b950:	a904      	add	r1, sp, #16
 800b952:	4638      	mov	r0, r7
 800b954:	f7fe fb36 	bl	8009fc4 <_printf_i>
 800b958:	e7eb      	b.n	800b932 <_svfiprintf_r+0x1c2>
 800b95a:	bf00      	nop
 800b95c:	0800d514 	.word	0x0800d514
 800b960:	0800d51e 	.word	0x0800d51e
 800b964:	08009a7d 	.word	0x08009a7d
 800b968:	0800b6b9 	.word	0x0800b6b9
 800b96c:	0800d51a 	.word	0x0800d51a

0800b970 <__assert_func>:
 800b970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b972:	4614      	mov	r4, r2
 800b974:	461a      	mov	r2, r3
 800b976:	4b09      	ldr	r3, [pc, #36]	; (800b99c <__assert_func+0x2c>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4605      	mov	r5, r0
 800b97c:	68d8      	ldr	r0, [r3, #12]
 800b97e:	b14c      	cbz	r4, 800b994 <__assert_func+0x24>
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <__assert_func+0x30>)
 800b982:	9100      	str	r1, [sp, #0]
 800b984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b988:	4906      	ldr	r1, [pc, #24]	; (800b9a4 <__assert_func+0x34>)
 800b98a:	462b      	mov	r3, r5
 800b98c:	f000 f80e 	bl	800b9ac <fiprintf>
 800b990:	f000 faa4 	bl	800bedc <abort>
 800b994:	4b04      	ldr	r3, [pc, #16]	; (800b9a8 <__assert_func+0x38>)
 800b996:	461c      	mov	r4, r3
 800b998:	e7f3      	b.n	800b982 <__assert_func+0x12>
 800b99a:	bf00      	nop
 800b99c:	20000024 	.word	0x20000024
 800b9a0:	0800d525 	.word	0x0800d525
 800b9a4:	0800d532 	.word	0x0800d532
 800b9a8:	0800d560 	.word	0x0800d560

0800b9ac <fiprintf>:
 800b9ac:	b40e      	push	{r1, r2, r3}
 800b9ae:	b503      	push	{r0, r1, lr}
 800b9b0:	4601      	mov	r1, r0
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	4805      	ldr	r0, [pc, #20]	; (800b9cc <fiprintf+0x20>)
 800b9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ba:	6800      	ldr	r0, [r0, #0]
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	f000 f88f 	bl	800bae0 <_vfiprintf_r>
 800b9c2:	b002      	add	sp, #8
 800b9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9c8:	b003      	add	sp, #12
 800b9ca:	4770      	bx	lr
 800b9cc:	20000024 	.word	0x20000024

0800b9d0 <__retarget_lock_init_recursive>:
 800b9d0:	4770      	bx	lr

0800b9d2 <__retarget_lock_acquire_recursive>:
 800b9d2:	4770      	bx	lr

0800b9d4 <__retarget_lock_release_recursive>:
 800b9d4:	4770      	bx	lr

0800b9d6 <__ascii_mbtowc>:
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	b901      	cbnz	r1, 800b9dc <__ascii_mbtowc+0x6>
 800b9da:	a901      	add	r1, sp, #4
 800b9dc:	b142      	cbz	r2, 800b9f0 <__ascii_mbtowc+0x1a>
 800b9de:	b14b      	cbz	r3, 800b9f4 <__ascii_mbtowc+0x1e>
 800b9e0:	7813      	ldrb	r3, [r2, #0]
 800b9e2:	600b      	str	r3, [r1, #0]
 800b9e4:	7812      	ldrb	r2, [r2, #0]
 800b9e6:	1e10      	subs	r0, r2, #0
 800b9e8:	bf18      	it	ne
 800b9ea:	2001      	movne	r0, #1
 800b9ec:	b002      	add	sp, #8
 800b9ee:	4770      	bx	lr
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	e7fb      	b.n	800b9ec <__ascii_mbtowc+0x16>
 800b9f4:	f06f 0001 	mvn.w	r0, #1
 800b9f8:	e7f8      	b.n	800b9ec <__ascii_mbtowc+0x16>

0800b9fa <memmove>:
 800b9fa:	4288      	cmp	r0, r1
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	eb01 0402 	add.w	r4, r1, r2
 800ba02:	d902      	bls.n	800ba0a <memmove+0x10>
 800ba04:	4284      	cmp	r4, r0
 800ba06:	4623      	mov	r3, r4
 800ba08:	d807      	bhi.n	800ba1a <memmove+0x20>
 800ba0a:	1e43      	subs	r3, r0, #1
 800ba0c:	42a1      	cmp	r1, r4
 800ba0e:	d008      	beq.n	800ba22 <memmove+0x28>
 800ba10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba18:	e7f8      	b.n	800ba0c <memmove+0x12>
 800ba1a:	4402      	add	r2, r0
 800ba1c:	4601      	mov	r1, r0
 800ba1e:	428a      	cmp	r2, r1
 800ba20:	d100      	bne.n	800ba24 <memmove+0x2a>
 800ba22:	bd10      	pop	{r4, pc}
 800ba24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba2c:	e7f7      	b.n	800ba1e <memmove+0x24>

0800ba2e <_realloc_r>:
 800ba2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba32:	4680      	mov	r8, r0
 800ba34:	4614      	mov	r4, r2
 800ba36:	460e      	mov	r6, r1
 800ba38:	b921      	cbnz	r1, 800ba44 <_realloc_r+0x16>
 800ba3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3e:	4611      	mov	r1, r2
 800ba40:	f7fd bf08 	b.w	8009854 <_malloc_r>
 800ba44:	b92a      	cbnz	r2, 800ba52 <_realloc_r+0x24>
 800ba46:	f7fd fe99 	bl	800977c <_free_r>
 800ba4a:	4625      	mov	r5, r4
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba52:	f000 fc67 	bl	800c324 <_malloc_usable_size_r>
 800ba56:	4284      	cmp	r4, r0
 800ba58:	4607      	mov	r7, r0
 800ba5a:	d802      	bhi.n	800ba62 <_realloc_r+0x34>
 800ba5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba60:	d812      	bhi.n	800ba88 <_realloc_r+0x5a>
 800ba62:	4621      	mov	r1, r4
 800ba64:	4640      	mov	r0, r8
 800ba66:	f7fd fef5 	bl	8009854 <_malloc_r>
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d0ed      	beq.n	800ba4c <_realloc_r+0x1e>
 800ba70:	42bc      	cmp	r4, r7
 800ba72:	4622      	mov	r2, r4
 800ba74:	4631      	mov	r1, r6
 800ba76:	bf28      	it	cs
 800ba78:	463a      	movcs	r2, r7
 800ba7a:	f7fd fe69 	bl	8009750 <memcpy>
 800ba7e:	4631      	mov	r1, r6
 800ba80:	4640      	mov	r0, r8
 800ba82:	f7fd fe7b 	bl	800977c <_free_r>
 800ba86:	e7e1      	b.n	800ba4c <_realloc_r+0x1e>
 800ba88:	4635      	mov	r5, r6
 800ba8a:	e7df      	b.n	800ba4c <_realloc_r+0x1e>

0800ba8c <__sfputc_r>:
 800ba8c:	6893      	ldr	r3, [r2, #8]
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	b410      	push	{r4}
 800ba94:	6093      	str	r3, [r2, #8]
 800ba96:	da08      	bge.n	800baaa <__sfputc_r+0x1e>
 800ba98:	6994      	ldr	r4, [r2, #24]
 800ba9a:	42a3      	cmp	r3, r4
 800ba9c:	db01      	blt.n	800baa2 <__sfputc_r+0x16>
 800ba9e:	290a      	cmp	r1, #10
 800baa0:	d103      	bne.n	800baaa <__sfputc_r+0x1e>
 800baa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa6:	f000 b94b 	b.w	800bd40 <__swbuf_r>
 800baaa:	6813      	ldr	r3, [r2, #0]
 800baac:	1c58      	adds	r0, r3, #1
 800baae:	6010      	str	r0, [r2, #0]
 800bab0:	7019      	strb	r1, [r3, #0]
 800bab2:	4608      	mov	r0, r1
 800bab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <__sfputs_r>:
 800baba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	18d5      	adds	r5, r2, r3
 800bac4:	42ac      	cmp	r4, r5
 800bac6:	d101      	bne.n	800bacc <__sfputs_r+0x12>
 800bac8:	2000      	movs	r0, #0
 800baca:	e007      	b.n	800badc <__sfputs_r+0x22>
 800bacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad0:	463a      	mov	r2, r7
 800bad2:	4630      	mov	r0, r6
 800bad4:	f7ff ffda 	bl	800ba8c <__sfputc_r>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d1f3      	bne.n	800bac4 <__sfputs_r+0xa>
 800badc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bae0 <_vfiprintf_r>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	460d      	mov	r5, r1
 800bae6:	b09d      	sub	sp, #116	; 0x74
 800bae8:	4614      	mov	r4, r2
 800baea:	4698      	mov	r8, r3
 800baec:	4606      	mov	r6, r0
 800baee:	b118      	cbz	r0, 800baf8 <_vfiprintf_r+0x18>
 800baf0:	6983      	ldr	r3, [r0, #24]
 800baf2:	b90b      	cbnz	r3, 800baf8 <_vfiprintf_r+0x18>
 800baf4:	f000 fb14 	bl	800c120 <__sinit>
 800baf8:	4b89      	ldr	r3, [pc, #548]	; (800bd20 <_vfiprintf_r+0x240>)
 800bafa:	429d      	cmp	r5, r3
 800bafc:	d11b      	bne.n	800bb36 <_vfiprintf_r+0x56>
 800bafe:	6875      	ldr	r5, [r6, #4]
 800bb00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb02:	07d9      	lsls	r1, r3, #31
 800bb04:	d405      	bmi.n	800bb12 <_vfiprintf_r+0x32>
 800bb06:	89ab      	ldrh	r3, [r5, #12]
 800bb08:	059a      	lsls	r2, r3, #22
 800bb0a:	d402      	bmi.n	800bb12 <_vfiprintf_r+0x32>
 800bb0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb0e:	f7ff ff60 	bl	800b9d2 <__retarget_lock_acquire_recursive>
 800bb12:	89ab      	ldrh	r3, [r5, #12]
 800bb14:	071b      	lsls	r3, r3, #28
 800bb16:	d501      	bpl.n	800bb1c <_vfiprintf_r+0x3c>
 800bb18:	692b      	ldr	r3, [r5, #16]
 800bb1a:	b9eb      	cbnz	r3, 800bb58 <_vfiprintf_r+0x78>
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f000 f96e 	bl	800be00 <__swsetup_r>
 800bb24:	b1c0      	cbz	r0, 800bb58 <_vfiprintf_r+0x78>
 800bb26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb28:	07dc      	lsls	r4, r3, #31
 800bb2a:	d50e      	bpl.n	800bb4a <_vfiprintf_r+0x6a>
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	b01d      	add	sp, #116	; 0x74
 800bb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb36:	4b7b      	ldr	r3, [pc, #492]	; (800bd24 <_vfiprintf_r+0x244>)
 800bb38:	429d      	cmp	r5, r3
 800bb3a:	d101      	bne.n	800bb40 <_vfiprintf_r+0x60>
 800bb3c:	68b5      	ldr	r5, [r6, #8]
 800bb3e:	e7df      	b.n	800bb00 <_vfiprintf_r+0x20>
 800bb40:	4b79      	ldr	r3, [pc, #484]	; (800bd28 <_vfiprintf_r+0x248>)
 800bb42:	429d      	cmp	r5, r3
 800bb44:	bf08      	it	eq
 800bb46:	68f5      	ldreq	r5, [r6, #12]
 800bb48:	e7da      	b.n	800bb00 <_vfiprintf_r+0x20>
 800bb4a:	89ab      	ldrh	r3, [r5, #12]
 800bb4c:	0598      	lsls	r0, r3, #22
 800bb4e:	d4ed      	bmi.n	800bb2c <_vfiprintf_r+0x4c>
 800bb50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb52:	f7ff ff3f 	bl	800b9d4 <__retarget_lock_release_recursive>
 800bb56:	e7e9      	b.n	800bb2c <_vfiprintf_r+0x4c>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb62:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb66:	2330      	movs	r3, #48	; 0x30
 800bb68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd2c <_vfiprintf_r+0x24c>
 800bb6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb70:	f04f 0901 	mov.w	r9, #1
 800bb74:	4623      	mov	r3, r4
 800bb76:	469a      	mov	sl, r3
 800bb78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb7c:	b10a      	cbz	r2, 800bb82 <_vfiprintf_r+0xa2>
 800bb7e:	2a25      	cmp	r2, #37	; 0x25
 800bb80:	d1f9      	bne.n	800bb76 <_vfiprintf_r+0x96>
 800bb82:	ebba 0b04 	subs.w	fp, sl, r4
 800bb86:	d00b      	beq.n	800bba0 <_vfiprintf_r+0xc0>
 800bb88:	465b      	mov	r3, fp
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f7ff ff93 	bl	800baba <__sfputs_r>
 800bb94:	3001      	adds	r0, #1
 800bb96:	f000 80aa 	beq.w	800bcee <_vfiprintf_r+0x20e>
 800bb9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb9c:	445a      	add	r2, fp
 800bb9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bba0:	f89a 3000 	ldrb.w	r3, [sl]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 80a2 	beq.w	800bcee <_vfiprintf_r+0x20e>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbb4:	f10a 0a01 	add.w	sl, sl, #1
 800bbb8:	9304      	str	r3, [sp, #16]
 800bbba:	9307      	str	r3, [sp, #28]
 800bbbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbc0:	931a      	str	r3, [sp, #104]	; 0x68
 800bbc2:	4654      	mov	r4, sl
 800bbc4:	2205      	movs	r2, #5
 800bbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbca:	4858      	ldr	r0, [pc, #352]	; (800bd2c <_vfiprintf_r+0x24c>)
 800bbcc:	f7f4 fb10 	bl	80001f0 <memchr>
 800bbd0:	9a04      	ldr	r2, [sp, #16]
 800bbd2:	b9d8      	cbnz	r0, 800bc0c <_vfiprintf_r+0x12c>
 800bbd4:	06d1      	lsls	r1, r2, #27
 800bbd6:	bf44      	itt	mi
 800bbd8:	2320      	movmi	r3, #32
 800bbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbde:	0713      	lsls	r3, r2, #28
 800bbe0:	bf44      	itt	mi
 800bbe2:	232b      	movmi	r3, #43	; 0x2b
 800bbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbe8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbec:	2b2a      	cmp	r3, #42	; 0x2a
 800bbee:	d015      	beq.n	800bc1c <_vfiprintf_r+0x13c>
 800bbf0:	9a07      	ldr	r2, [sp, #28]
 800bbf2:	4654      	mov	r4, sl
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	f04f 0c0a 	mov.w	ip, #10
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc00:	3b30      	subs	r3, #48	; 0x30
 800bc02:	2b09      	cmp	r3, #9
 800bc04:	d94e      	bls.n	800bca4 <_vfiprintf_r+0x1c4>
 800bc06:	b1b0      	cbz	r0, 800bc36 <_vfiprintf_r+0x156>
 800bc08:	9207      	str	r2, [sp, #28]
 800bc0a:	e014      	b.n	800bc36 <_vfiprintf_r+0x156>
 800bc0c:	eba0 0308 	sub.w	r3, r0, r8
 800bc10:	fa09 f303 	lsl.w	r3, r9, r3
 800bc14:	4313      	orrs	r3, r2
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	46a2      	mov	sl, r4
 800bc1a:	e7d2      	b.n	800bbc2 <_vfiprintf_r+0xe2>
 800bc1c:	9b03      	ldr	r3, [sp, #12]
 800bc1e:	1d19      	adds	r1, r3, #4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	9103      	str	r1, [sp, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	bfbb      	ittet	lt
 800bc28:	425b      	neglt	r3, r3
 800bc2a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc2e:	9307      	strge	r3, [sp, #28]
 800bc30:	9307      	strlt	r3, [sp, #28]
 800bc32:	bfb8      	it	lt
 800bc34:	9204      	strlt	r2, [sp, #16]
 800bc36:	7823      	ldrb	r3, [r4, #0]
 800bc38:	2b2e      	cmp	r3, #46	; 0x2e
 800bc3a:	d10c      	bne.n	800bc56 <_vfiprintf_r+0x176>
 800bc3c:	7863      	ldrb	r3, [r4, #1]
 800bc3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc40:	d135      	bne.n	800bcae <_vfiprintf_r+0x1ce>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	1d1a      	adds	r2, r3, #4
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	9203      	str	r2, [sp, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	bfb8      	it	lt
 800bc4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc52:	3402      	adds	r4, #2
 800bc54:	9305      	str	r3, [sp, #20]
 800bc56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd3c <_vfiprintf_r+0x25c>
 800bc5a:	7821      	ldrb	r1, [r4, #0]
 800bc5c:	2203      	movs	r2, #3
 800bc5e:	4650      	mov	r0, sl
 800bc60:	f7f4 fac6 	bl	80001f0 <memchr>
 800bc64:	b140      	cbz	r0, 800bc78 <_vfiprintf_r+0x198>
 800bc66:	2340      	movs	r3, #64	; 0x40
 800bc68:	eba0 000a 	sub.w	r0, r0, sl
 800bc6c:	fa03 f000 	lsl.w	r0, r3, r0
 800bc70:	9b04      	ldr	r3, [sp, #16]
 800bc72:	4303      	orrs	r3, r0
 800bc74:	3401      	adds	r4, #1
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7c:	482c      	ldr	r0, [pc, #176]	; (800bd30 <_vfiprintf_r+0x250>)
 800bc7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc82:	2206      	movs	r2, #6
 800bc84:	f7f4 fab4 	bl	80001f0 <memchr>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d03f      	beq.n	800bd0c <_vfiprintf_r+0x22c>
 800bc8c:	4b29      	ldr	r3, [pc, #164]	; (800bd34 <_vfiprintf_r+0x254>)
 800bc8e:	bb1b      	cbnz	r3, 800bcd8 <_vfiprintf_r+0x1f8>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	3307      	adds	r3, #7
 800bc94:	f023 0307 	bic.w	r3, r3, #7
 800bc98:	3308      	adds	r3, #8
 800bc9a:	9303      	str	r3, [sp, #12]
 800bc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc9e:	443b      	add	r3, r7
 800bca0:	9309      	str	r3, [sp, #36]	; 0x24
 800bca2:	e767      	b.n	800bb74 <_vfiprintf_r+0x94>
 800bca4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bca8:	460c      	mov	r4, r1
 800bcaa:	2001      	movs	r0, #1
 800bcac:	e7a5      	b.n	800bbfa <_vfiprintf_r+0x11a>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	3401      	adds	r4, #1
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	f04f 0c0a 	mov.w	ip, #10
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc0:	3a30      	subs	r2, #48	; 0x30
 800bcc2:	2a09      	cmp	r2, #9
 800bcc4:	d903      	bls.n	800bcce <_vfiprintf_r+0x1ee>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d0c5      	beq.n	800bc56 <_vfiprintf_r+0x176>
 800bcca:	9105      	str	r1, [sp, #20]
 800bccc:	e7c3      	b.n	800bc56 <_vfiprintf_r+0x176>
 800bcce:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e7f0      	b.n	800bcba <_vfiprintf_r+0x1da>
 800bcd8:	ab03      	add	r3, sp, #12
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	462a      	mov	r2, r5
 800bcde:	4b16      	ldr	r3, [pc, #88]	; (800bd38 <_vfiprintf_r+0x258>)
 800bce0:	a904      	add	r1, sp, #16
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7fd feca 	bl	8009a7c <_printf_float>
 800bce8:	4607      	mov	r7, r0
 800bcea:	1c78      	adds	r0, r7, #1
 800bcec:	d1d6      	bne.n	800bc9c <_vfiprintf_r+0x1bc>
 800bcee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf0:	07d9      	lsls	r1, r3, #31
 800bcf2:	d405      	bmi.n	800bd00 <_vfiprintf_r+0x220>
 800bcf4:	89ab      	ldrh	r3, [r5, #12]
 800bcf6:	059a      	lsls	r2, r3, #22
 800bcf8:	d402      	bmi.n	800bd00 <_vfiprintf_r+0x220>
 800bcfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcfc:	f7ff fe6a 	bl	800b9d4 <__retarget_lock_release_recursive>
 800bd00:	89ab      	ldrh	r3, [r5, #12]
 800bd02:	065b      	lsls	r3, r3, #25
 800bd04:	f53f af12 	bmi.w	800bb2c <_vfiprintf_r+0x4c>
 800bd08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd0a:	e711      	b.n	800bb30 <_vfiprintf_r+0x50>
 800bd0c:	ab03      	add	r3, sp, #12
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	462a      	mov	r2, r5
 800bd12:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <_vfiprintf_r+0x258>)
 800bd14:	a904      	add	r1, sp, #16
 800bd16:	4630      	mov	r0, r6
 800bd18:	f7fe f954 	bl	8009fc4 <_printf_i>
 800bd1c:	e7e4      	b.n	800bce8 <_vfiprintf_r+0x208>
 800bd1e:	bf00      	nop
 800bd20:	0800d68c 	.word	0x0800d68c
 800bd24:	0800d6ac 	.word	0x0800d6ac
 800bd28:	0800d66c 	.word	0x0800d66c
 800bd2c:	0800d514 	.word	0x0800d514
 800bd30:	0800d51e 	.word	0x0800d51e
 800bd34:	08009a7d 	.word	0x08009a7d
 800bd38:	0800babb 	.word	0x0800babb
 800bd3c:	0800d51a 	.word	0x0800d51a

0800bd40 <__swbuf_r>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	460e      	mov	r6, r1
 800bd44:	4614      	mov	r4, r2
 800bd46:	4605      	mov	r5, r0
 800bd48:	b118      	cbz	r0, 800bd52 <__swbuf_r+0x12>
 800bd4a:	6983      	ldr	r3, [r0, #24]
 800bd4c:	b90b      	cbnz	r3, 800bd52 <__swbuf_r+0x12>
 800bd4e:	f000 f9e7 	bl	800c120 <__sinit>
 800bd52:	4b21      	ldr	r3, [pc, #132]	; (800bdd8 <__swbuf_r+0x98>)
 800bd54:	429c      	cmp	r4, r3
 800bd56:	d12b      	bne.n	800bdb0 <__swbuf_r+0x70>
 800bd58:	686c      	ldr	r4, [r5, #4]
 800bd5a:	69a3      	ldr	r3, [r4, #24]
 800bd5c:	60a3      	str	r3, [r4, #8]
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	071a      	lsls	r2, r3, #28
 800bd62:	d52f      	bpl.n	800bdc4 <__swbuf_r+0x84>
 800bd64:	6923      	ldr	r3, [r4, #16]
 800bd66:	b36b      	cbz	r3, 800bdc4 <__swbuf_r+0x84>
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	6820      	ldr	r0, [r4, #0]
 800bd6c:	1ac0      	subs	r0, r0, r3
 800bd6e:	6963      	ldr	r3, [r4, #20]
 800bd70:	b2f6      	uxtb	r6, r6
 800bd72:	4283      	cmp	r3, r0
 800bd74:	4637      	mov	r7, r6
 800bd76:	dc04      	bgt.n	800bd82 <__swbuf_r+0x42>
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f000 f93c 	bl	800bff8 <_fflush_r>
 800bd80:	bb30      	cbnz	r0, 800bdd0 <__swbuf_r+0x90>
 800bd82:	68a3      	ldr	r3, [r4, #8]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	60a3      	str	r3, [r4, #8]
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	6022      	str	r2, [r4, #0]
 800bd8e:	701e      	strb	r6, [r3, #0]
 800bd90:	6963      	ldr	r3, [r4, #20]
 800bd92:	3001      	adds	r0, #1
 800bd94:	4283      	cmp	r3, r0
 800bd96:	d004      	beq.n	800bda2 <__swbuf_r+0x62>
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	07db      	lsls	r3, r3, #31
 800bd9c:	d506      	bpl.n	800bdac <__swbuf_r+0x6c>
 800bd9e:	2e0a      	cmp	r6, #10
 800bda0:	d104      	bne.n	800bdac <__swbuf_r+0x6c>
 800bda2:	4621      	mov	r1, r4
 800bda4:	4628      	mov	r0, r5
 800bda6:	f000 f927 	bl	800bff8 <_fflush_r>
 800bdaa:	b988      	cbnz	r0, 800bdd0 <__swbuf_r+0x90>
 800bdac:	4638      	mov	r0, r7
 800bdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	; (800bddc <__swbuf_r+0x9c>)
 800bdb2:	429c      	cmp	r4, r3
 800bdb4:	d101      	bne.n	800bdba <__swbuf_r+0x7a>
 800bdb6:	68ac      	ldr	r4, [r5, #8]
 800bdb8:	e7cf      	b.n	800bd5a <__swbuf_r+0x1a>
 800bdba:	4b09      	ldr	r3, [pc, #36]	; (800bde0 <__swbuf_r+0xa0>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	bf08      	it	eq
 800bdc0:	68ec      	ldreq	r4, [r5, #12]
 800bdc2:	e7ca      	b.n	800bd5a <__swbuf_r+0x1a>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f000 f81a 	bl	800be00 <__swsetup_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d0cb      	beq.n	800bd68 <__swbuf_r+0x28>
 800bdd0:	f04f 37ff 	mov.w	r7, #4294967295
 800bdd4:	e7ea      	b.n	800bdac <__swbuf_r+0x6c>
 800bdd6:	bf00      	nop
 800bdd8:	0800d68c 	.word	0x0800d68c
 800bddc:	0800d6ac 	.word	0x0800d6ac
 800bde0:	0800d66c 	.word	0x0800d66c

0800bde4 <__ascii_wctomb>:
 800bde4:	b149      	cbz	r1, 800bdfa <__ascii_wctomb+0x16>
 800bde6:	2aff      	cmp	r2, #255	; 0xff
 800bde8:	bf85      	ittet	hi
 800bdea:	238a      	movhi	r3, #138	; 0x8a
 800bdec:	6003      	strhi	r3, [r0, #0]
 800bdee:	700a      	strbls	r2, [r1, #0]
 800bdf0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bdf4:	bf98      	it	ls
 800bdf6:	2001      	movls	r0, #1
 800bdf8:	4770      	bx	lr
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	4770      	bx	lr
	...

0800be00 <__swsetup_r>:
 800be00:	4b32      	ldr	r3, [pc, #200]	; (800becc <__swsetup_r+0xcc>)
 800be02:	b570      	push	{r4, r5, r6, lr}
 800be04:	681d      	ldr	r5, [r3, #0]
 800be06:	4606      	mov	r6, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	b125      	cbz	r5, 800be16 <__swsetup_r+0x16>
 800be0c:	69ab      	ldr	r3, [r5, #24]
 800be0e:	b913      	cbnz	r3, 800be16 <__swsetup_r+0x16>
 800be10:	4628      	mov	r0, r5
 800be12:	f000 f985 	bl	800c120 <__sinit>
 800be16:	4b2e      	ldr	r3, [pc, #184]	; (800bed0 <__swsetup_r+0xd0>)
 800be18:	429c      	cmp	r4, r3
 800be1a:	d10f      	bne.n	800be3c <__swsetup_r+0x3c>
 800be1c:	686c      	ldr	r4, [r5, #4]
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be24:	0719      	lsls	r1, r3, #28
 800be26:	d42c      	bmi.n	800be82 <__swsetup_r+0x82>
 800be28:	06dd      	lsls	r5, r3, #27
 800be2a:	d411      	bmi.n	800be50 <__swsetup_r+0x50>
 800be2c:	2309      	movs	r3, #9
 800be2e:	6033      	str	r3, [r6, #0]
 800be30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be34:	81a3      	strh	r3, [r4, #12]
 800be36:	f04f 30ff 	mov.w	r0, #4294967295
 800be3a:	e03e      	b.n	800beba <__swsetup_r+0xba>
 800be3c:	4b25      	ldr	r3, [pc, #148]	; (800bed4 <__swsetup_r+0xd4>)
 800be3e:	429c      	cmp	r4, r3
 800be40:	d101      	bne.n	800be46 <__swsetup_r+0x46>
 800be42:	68ac      	ldr	r4, [r5, #8]
 800be44:	e7eb      	b.n	800be1e <__swsetup_r+0x1e>
 800be46:	4b24      	ldr	r3, [pc, #144]	; (800bed8 <__swsetup_r+0xd8>)
 800be48:	429c      	cmp	r4, r3
 800be4a:	bf08      	it	eq
 800be4c:	68ec      	ldreq	r4, [r5, #12]
 800be4e:	e7e6      	b.n	800be1e <__swsetup_r+0x1e>
 800be50:	0758      	lsls	r0, r3, #29
 800be52:	d512      	bpl.n	800be7a <__swsetup_r+0x7a>
 800be54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be56:	b141      	cbz	r1, 800be6a <__swsetup_r+0x6a>
 800be58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be5c:	4299      	cmp	r1, r3
 800be5e:	d002      	beq.n	800be66 <__swsetup_r+0x66>
 800be60:	4630      	mov	r0, r6
 800be62:	f7fd fc8b 	bl	800977c <_free_r>
 800be66:	2300      	movs	r3, #0
 800be68:	6363      	str	r3, [r4, #52]	; 0x34
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be70:	81a3      	strh	r3, [r4, #12]
 800be72:	2300      	movs	r3, #0
 800be74:	6063      	str	r3, [r4, #4]
 800be76:	6923      	ldr	r3, [r4, #16]
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	89a3      	ldrh	r3, [r4, #12]
 800be7c:	f043 0308 	orr.w	r3, r3, #8
 800be80:	81a3      	strh	r3, [r4, #12]
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	b94b      	cbnz	r3, 800be9a <__swsetup_r+0x9a>
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be90:	d003      	beq.n	800be9a <__swsetup_r+0x9a>
 800be92:	4621      	mov	r1, r4
 800be94:	4630      	mov	r0, r6
 800be96:	f000 fa05 	bl	800c2a4 <__smakebuf_r>
 800be9a:	89a0      	ldrh	r0, [r4, #12]
 800be9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bea0:	f010 0301 	ands.w	r3, r0, #1
 800bea4:	d00a      	beq.n	800bebc <__swsetup_r+0xbc>
 800bea6:	2300      	movs	r3, #0
 800bea8:	60a3      	str	r3, [r4, #8]
 800beaa:	6963      	ldr	r3, [r4, #20]
 800beac:	425b      	negs	r3, r3
 800beae:	61a3      	str	r3, [r4, #24]
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	b943      	cbnz	r3, 800bec6 <__swsetup_r+0xc6>
 800beb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800beb8:	d1ba      	bne.n	800be30 <__swsetup_r+0x30>
 800beba:	bd70      	pop	{r4, r5, r6, pc}
 800bebc:	0781      	lsls	r1, r0, #30
 800bebe:	bf58      	it	pl
 800bec0:	6963      	ldrpl	r3, [r4, #20]
 800bec2:	60a3      	str	r3, [r4, #8]
 800bec4:	e7f4      	b.n	800beb0 <__swsetup_r+0xb0>
 800bec6:	2000      	movs	r0, #0
 800bec8:	e7f7      	b.n	800beba <__swsetup_r+0xba>
 800beca:	bf00      	nop
 800becc:	20000024 	.word	0x20000024
 800bed0:	0800d68c 	.word	0x0800d68c
 800bed4:	0800d6ac 	.word	0x0800d6ac
 800bed8:	0800d66c 	.word	0x0800d66c

0800bedc <abort>:
 800bedc:	b508      	push	{r3, lr}
 800bede:	2006      	movs	r0, #6
 800bee0:	f000 fa50 	bl	800c384 <raise>
 800bee4:	2001      	movs	r0, #1
 800bee6:	f7f7 fa8d 	bl	8003404 <_exit>
	...

0800beec <__sflush_r>:
 800beec:	898a      	ldrh	r2, [r1, #12]
 800beee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef2:	4605      	mov	r5, r0
 800bef4:	0710      	lsls	r0, r2, #28
 800bef6:	460c      	mov	r4, r1
 800bef8:	d458      	bmi.n	800bfac <__sflush_r+0xc0>
 800befa:	684b      	ldr	r3, [r1, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	dc05      	bgt.n	800bf0c <__sflush_r+0x20>
 800bf00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	dc02      	bgt.n	800bf0c <__sflush_r+0x20>
 800bf06:	2000      	movs	r0, #0
 800bf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf0e:	2e00      	cmp	r6, #0
 800bf10:	d0f9      	beq.n	800bf06 <__sflush_r+0x1a>
 800bf12:	2300      	movs	r3, #0
 800bf14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf18:	682f      	ldr	r7, [r5, #0]
 800bf1a:	602b      	str	r3, [r5, #0]
 800bf1c:	d032      	beq.n	800bf84 <__sflush_r+0x98>
 800bf1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	075a      	lsls	r2, r3, #29
 800bf24:	d505      	bpl.n	800bf32 <__sflush_r+0x46>
 800bf26:	6863      	ldr	r3, [r4, #4]
 800bf28:	1ac0      	subs	r0, r0, r3
 800bf2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf2c:	b10b      	cbz	r3, 800bf32 <__sflush_r+0x46>
 800bf2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf30:	1ac0      	subs	r0, r0, r3
 800bf32:	2300      	movs	r3, #0
 800bf34:	4602      	mov	r2, r0
 800bf36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf38:	6a21      	ldr	r1, [r4, #32]
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	47b0      	blx	r6
 800bf3e:	1c43      	adds	r3, r0, #1
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	d106      	bne.n	800bf52 <__sflush_r+0x66>
 800bf44:	6829      	ldr	r1, [r5, #0]
 800bf46:	291d      	cmp	r1, #29
 800bf48:	d82c      	bhi.n	800bfa4 <__sflush_r+0xb8>
 800bf4a:	4a2a      	ldr	r2, [pc, #168]	; (800bff4 <__sflush_r+0x108>)
 800bf4c:	40ca      	lsrs	r2, r1
 800bf4e:	07d6      	lsls	r6, r2, #31
 800bf50:	d528      	bpl.n	800bfa4 <__sflush_r+0xb8>
 800bf52:	2200      	movs	r2, #0
 800bf54:	6062      	str	r2, [r4, #4]
 800bf56:	04d9      	lsls	r1, r3, #19
 800bf58:	6922      	ldr	r2, [r4, #16]
 800bf5a:	6022      	str	r2, [r4, #0]
 800bf5c:	d504      	bpl.n	800bf68 <__sflush_r+0x7c>
 800bf5e:	1c42      	adds	r2, r0, #1
 800bf60:	d101      	bne.n	800bf66 <__sflush_r+0x7a>
 800bf62:	682b      	ldr	r3, [r5, #0]
 800bf64:	b903      	cbnz	r3, 800bf68 <__sflush_r+0x7c>
 800bf66:	6560      	str	r0, [r4, #84]	; 0x54
 800bf68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf6a:	602f      	str	r7, [r5, #0]
 800bf6c:	2900      	cmp	r1, #0
 800bf6e:	d0ca      	beq.n	800bf06 <__sflush_r+0x1a>
 800bf70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf74:	4299      	cmp	r1, r3
 800bf76:	d002      	beq.n	800bf7e <__sflush_r+0x92>
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f7fd fbff 	bl	800977c <_free_r>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	6360      	str	r0, [r4, #52]	; 0x34
 800bf82:	e7c1      	b.n	800bf08 <__sflush_r+0x1c>
 800bf84:	6a21      	ldr	r1, [r4, #32]
 800bf86:	2301      	movs	r3, #1
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b0      	blx	r6
 800bf8c:	1c41      	adds	r1, r0, #1
 800bf8e:	d1c7      	bne.n	800bf20 <__sflush_r+0x34>
 800bf90:	682b      	ldr	r3, [r5, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0c4      	beq.n	800bf20 <__sflush_r+0x34>
 800bf96:	2b1d      	cmp	r3, #29
 800bf98:	d001      	beq.n	800bf9e <__sflush_r+0xb2>
 800bf9a:	2b16      	cmp	r3, #22
 800bf9c:	d101      	bne.n	800bfa2 <__sflush_r+0xb6>
 800bf9e:	602f      	str	r7, [r5, #0]
 800bfa0:	e7b1      	b.n	800bf06 <__sflush_r+0x1a>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	e7ad      	b.n	800bf08 <__sflush_r+0x1c>
 800bfac:	690f      	ldr	r7, [r1, #16]
 800bfae:	2f00      	cmp	r7, #0
 800bfb0:	d0a9      	beq.n	800bf06 <__sflush_r+0x1a>
 800bfb2:	0793      	lsls	r3, r2, #30
 800bfb4:	680e      	ldr	r6, [r1, #0]
 800bfb6:	bf08      	it	eq
 800bfb8:	694b      	ldreq	r3, [r1, #20]
 800bfba:	600f      	str	r7, [r1, #0]
 800bfbc:	bf18      	it	ne
 800bfbe:	2300      	movne	r3, #0
 800bfc0:	eba6 0807 	sub.w	r8, r6, r7
 800bfc4:	608b      	str	r3, [r1, #8]
 800bfc6:	f1b8 0f00 	cmp.w	r8, #0
 800bfca:	dd9c      	ble.n	800bf06 <__sflush_r+0x1a>
 800bfcc:	6a21      	ldr	r1, [r4, #32]
 800bfce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfd0:	4643      	mov	r3, r8
 800bfd2:	463a      	mov	r2, r7
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b0      	blx	r6
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	dc06      	bgt.n	800bfea <__sflush_r+0xfe>
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe2:	81a3      	strh	r3, [r4, #12]
 800bfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe8:	e78e      	b.n	800bf08 <__sflush_r+0x1c>
 800bfea:	4407      	add	r7, r0
 800bfec:	eba8 0800 	sub.w	r8, r8, r0
 800bff0:	e7e9      	b.n	800bfc6 <__sflush_r+0xda>
 800bff2:	bf00      	nop
 800bff4:	20400001 	.word	0x20400001

0800bff8 <_fflush_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	690b      	ldr	r3, [r1, #16]
 800bffc:	4605      	mov	r5, r0
 800bffe:	460c      	mov	r4, r1
 800c000:	b913      	cbnz	r3, 800c008 <_fflush_r+0x10>
 800c002:	2500      	movs	r5, #0
 800c004:	4628      	mov	r0, r5
 800c006:	bd38      	pop	{r3, r4, r5, pc}
 800c008:	b118      	cbz	r0, 800c012 <_fflush_r+0x1a>
 800c00a:	6983      	ldr	r3, [r0, #24]
 800c00c:	b90b      	cbnz	r3, 800c012 <_fflush_r+0x1a>
 800c00e:	f000 f887 	bl	800c120 <__sinit>
 800c012:	4b14      	ldr	r3, [pc, #80]	; (800c064 <_fflush_r+0x6c>)
 800c014:	429c      	cmp	r4, r3
 800c016:	d11b      	bne.n	800c050 <_fflush_r+0x58>
 800c018:	686c      	ldr	r4, [r5, #4]
 800c01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0ef      	beq.n	800c002 <_fflush_r+0xa>
 800c022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c024:	07d0      	lsls	r0, r2, #31
 800c026:	d404      	bmi.n	800c032 <_fflush_r+0x3a>
 800c028:	0599      	lsls	r1, r3, #22
 800c02a:	d402      	bmi.n	800c032 <_fflush_r+0x3a>
 800c02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c02e:	f7ff fcd0 	bl	800b9d2 <__retarget_lock_acquire_recursive>
 800c032:	4628      	mov	r0, r5
 800c034:	4621      	mov	r1, r4
 800c036:	f7ff ff59 	bl	800beec <__sflush_r>
 800c03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c03c:	07da      	lsls	r2, r3, #31
 800c03e:	4605      	mov	r5, r0
 800c040:	d4e0      	bmi.n	800c004 <_fflush_r+0xc>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	059b      	lsls	r3, r3, #22
 800c046:	d4dd      	bmi.n	800c004 <_fflush_r+0xc>
 800c048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04a:	f7ff fcc3 	bl	800b9d4 <__retarget_lock_release_recursive>
 800c04e:	e7d9      	b.n	800c004 <_fflush_r+0xc>
 800c050:	4b05      	ldr	r3, [pc, #20]	; (800c068 <_fflush_r+0x70>)
 800c052:	429c      	cmp	r4, r3
 800c054:	d101      	bne.n	800c05a <_fflush_r+0x62>
 800c056:	68ac      	ldr	r4, [r5, #8]
 800c058:	e7df      	b.n	800c01a <_fflush_r+0x22>
 800c05a:	4b04      	ldr	r3, [pc, #16]	; (800c06c <_fflush_r+0x74>)
 800c05c:	429c      	cmp	r4, r3
 800c05e:	bf08      	it	eq
 800c060:	68ec      	ldreq	r4, [r5, #12]
 800c062:	e7da      	b.n	800c01a <_fflush_r+0x22>
 800c064:	0800d68c 	.word	0x0800d68c
 800c068:	0800d6ac 	.word	0x0800d6ac
 800c06c:	0800d66c 	.word	0x0800d66c

0800c070 <std>:
 800c070:	2300      	movs	r3, #0
 800c072:	b510      	push	{r4, lr}
 800c074:	4604      	mov	r4, r0
 800c076:	e9c0 3300 	strd	r3, r3, [r0]
 800c07a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c07e:	6083      	str	r3, [r0, #8]
 800c080:	8181      	strh	r1, [r0, #12]
 800c082:	6643      	str	r3, [r0, #100]	; 0x64
 800c084:	81c2      	strh	r2, [r0, #14]
 800c086:	6183      	str	r3, [r0, #24]
 800c088:	4619      	mov	r1, r3
 800c08a:	2208      	movs	r2, #8
 800c08c:	305c      	adds	r0, #92	; 0x5c
 800c08e:	f7fd fb6d 	bl	800976c <memset>
 800c092:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <std+0x38>)
 800c094:	6263      	str	r3, [r4, #36]	; 0x24
 800c096:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <std+0x3c>)
 800c098:	62a3      	str	r3, [r4, #40]	; 0x28
 800c09a:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <std+0x40>)
 800c09c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <std+0x44>)
 800c0a0:	6224      	str	r4, [r4, #32]
 800c0a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c0a4:	bd10      	pop	{r4, pc}
 800c0a6:	bf00      	nop
 800c0a8:	0800c3bd 	.word	0x0800c3bd
 800c0ac:	0800c3df 	.word	0x0800c3df
 800c0b0:	0800c417 	.word	0x0800c417
 800c0b4:	0800c43b 	.word	0x0800c43b

0800c0b8 <_cleanup_r>:
 800c0b8:	4901      	ldr	r1, [pc, #4]	; (800c0c0 <_cleanup_r+0x8>)
 800c0ba:	f000 b8af 	b.w	800c21c <_fwalk_reent>
 800c0be:	bf00      	nop
 800c0c0:	0800bff9 	.word	0x0800bff9

0800c0c4 <__sfmoreglue>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	2268      	movs	r2, #104	; 0x68
 800c0c8:	1e4d      	subs	r5, r1, #1
 800c0ca:	4355      	muls	r5, r2
 800c0cc:	460e      	mov	r6, r1
 800c0ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0d2:	f7fd fbbf 	bl	8009854 <_malloc_r>
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	b140      	cbz	r0, 800c0ec <__sfmoreglue+0x28>
 800c0da:	2100      	movs	r1, #0
 800c0dc:	e9c0 1600 	strd	r1, r6, [r0]
 800c0e0:	300c      	adds	r0, #12
 800c0e2:	60a0      	str	r0, [r4, #8]
 800c0e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0e8:	f7fd fb40 	bl	800976c <memset>
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}

0800c0f0 <__sfp_lock_acquire>:
 800c0f0:	4801      	ldr	r0, [pc, #4]	; (800c0f8 <__sfp_lock_acquire+0x8>)
 800c0f2:	f7ff bc6e 	b.w	800b9d2 <__retarget_lock_acquire_recursive>
 800c0f6:	bf00      	nop
 800c0f8:	20000935 	.word	0x20000935

0800c0fc <__sfp_lock_release>:
 800c0fc:	4801      	ldr	r0, [pc, #4]	; (800c104 <__sfp_lock_release+0x8>)
 800c0fe:	f7ff bc69 	b.w	800b9d4 <__retarget_lock_release_recursive>
 800c102:	bf00      	nop
 800c104:	20000935 	.word	0x20000935

0800c108 <__sinit_lock_acquire>:
 800c108:	4801      	ldr	r0, [pc, #4]	; (800c110 <__sinit_lock_acquire+0x8>)
 800c10a:	f7ff bc62 	b.w	800b9d2 <__retarget_lock_acquire_recursive>
 800c10e:	bf00      	nop
 800c110:	20000936 	.word	0x20000936

0800c114 <__sinit_lock_release>:
 800c114:	4801      	ldr	r0, [pc, #4]	; (800c11c <__sinit_lock_release+0x8>)
 800c116:	f7ff bc5d 	b.w	800b9d4 <__retarget_lock_release_recursive>
 800c11a:	bf00      	nop
 800c11c:	20000936 	.word	0x20000936

0800c120 <__sinit>:
 800c120:	b510      	push	{r4, lr}
 800c122:	4604      	mov	r4, r0
 800c124:	f7ff fff0 	bl	800c108 <__sinit_lock_acquire>
 800c128:	69a3      	ldr	r3, [r4, #24]
 800c12a:	b11b      	cbz	r3, 800c134 <__sinit+0x14>
 800c12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c130:	f7ff bff0 	b.w	800c114 <__sinit_lock_release>
 800c134:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c138:	6523      	str	r3, [r4, #80]	; 0x50
 800c13a:	4b13      	ldr	r3, [pc, #76]	; (800c188 <__sinit+0x68>)
 800c13c:	4a13      	ldr	r2, [pc, #76]	; (800c18c <__sinit+0x6c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	62a2      	str	r2, [r4, #40]	; 0x28
 800c142:	42a3      	cmp	r3, r4
 800c144:	bf04      	itt	eq
 800c146:	2301      	moveq	r3, #1
 800c148:	61a3      	streq	r3, [r4, #24]
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 f820 	bl	800c190 <__sfp>
 800c150:	6060      	str	r0, [r4, #4]
 800c152:	4620      	mov	r0, r4
 800c154:	f000 f81c 	bl	800c190 <__sfp>
 800c158:	60a0      	str	r0, [r4, #8]
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 f818 	bl	800c190 <__sfp>
 800c160:	2200      	movs	r2, #0
 800c162:	60e0      	str	r0, [r4, #12]
 800c164:	2104      	movs	r1, #4
 800c166:	6860      	ldr	r0, [r4, #4]
 800c168:	f7ff ff82 	bl	800c070 <std>
 800c16c:	68a0      	ldr	r0, [r4, #8]
 800c16e:	2201      	movs	r2, #1
 800c170:	2109      	movs	r1, #9
 800c172:	f7ff ff7d 	bl	800c070 <std>
 800c176:	68e0      	ldr	r0, [r4, #12]
 800c178:	2202      	movs	r2, #2
 800c17a:	2112      	movs	r1, #18
 800c17c:	f7ff ff78 	bl	800c070 <std>
 800c180:	2301      	movs	r3, #1
 800c182:	61a3      	str	r3, [r4, #24]
 800c184:	e7d2      	b.n	800c12c <__sinit+0xc>
 800c186:	bf00      	nop
 800c188:	0800d2f4 	.word	0x0800d2f4
 800c18c:	0800c0b9 	.word	0x0800c0b9

0800c190 <__sfp>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	4607      	mov	r7, r0
 800c194:	f7ff ffac 	bl	800c0f0 <__sfp_lock_acquire>
 800c198:	4b1e      	ldr	r3, [pc, #120]	; (800c214 <__sfp+0x84>)
 800c19a:	681e      	ldr	r6, [r3, #0]
 800c19c:	69b3      	ldr	r3, [r6, #24]
 800c19e:	b913      	cbnz	r3, 800c1a6 <__sfp+0x16>
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff ffbd 	bl	800c120 <__sinit>
 800c1a6:	3648      	adds	r6, #72	; 0x48
 800c1a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	d503      	bpl.n	800c1b8 <__sfp+0x28>
 800c1b0:	6833      	ldr	r3, [r6, #0]
 800c1b2:	b30b      	cbz	r3, 800c1f8 <__sfp+0x68>
 800c1b4:	6836      	ldr	r6, [r6, #0]
 800c1b6:	e7f7      	b.n	800c1a8 <__sfp+0x18>
 800c1b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1bc:	b9d5      	cbnz	r5, 800c1f4 <__sfp+0x64>
 800c1be:	4b16      	ldr	r3, [pc, #88]	; (800c218 <__sfp+0x88>)
 800c1c0:	60e3      	str	r3, [r4, #12]
 800c1c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1c6:	6665      	str	r5, [r4, #100]	; 0x64
 800c1c8:	f7ff fc02 	bl	800b9d0 <__retarget_lock_init_recursive>
 800c1cc:	f7ff ff96 	bl	800c0fc <__sfp_lock_release>
 800c1d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1d8:	6025      	str	r5, [r4, #0]
 800c1da:	61a5      	str	r5, [r4, #24]
 800c1dc:	2208      	movs	r2, #8
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1e4:	f7fd fac2 	bl	800976c <memset>
 800c1e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f4:	3468      	adds	r4, #104	; 0x68
 800c1f6:	e7d9      	b.n	800c1ac <__sfp+0x1c>
 800c1f8:	2104      	movs	r1, #4
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	f7ff ff62 	bl	800c0c4 <__sfmoreglue>
 800c200:	4604      	mov	r4, r0
 800c202:	6030      	str	r0, [r6, #0]
 800c204:	2800      	cmp	r0, #0
 800c206:	d1d5      	bne.n	800c1b4 <__sfp+0x24>
 800c208:	f7ff ff78 	bl	800c0fc <__sfp_lock_release>
 800c20c:	230c      	movs	r3, #12
 800c20e:	603b      	str	r3, [r7, #0]
 800c210:	e7ee      	b.n	800c1f0 <__sfp+0x60>
 800c212:	bf00      	nop
 800c214:	0800d2f4 	.word	0x0800d2f4
 800c218:	ffff0001 	.word	0xffff0001

0800c21c <_fwalk_reent>:
 800c21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c220:	4606      	mov	r6, r0
 800c222:	4688      	mov	r8, r1
 800c224:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c228:	2700      	movs	r7, #0
 800c22a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c22e:	f1b9 0901 	subs.w	r9, r9, #1
 800c232:	d505      	bpl.n	800c240 <_fwalk_reent+0x24>
 800c234:	6824      	ldr	r4, [r4, #0]
 800c236:	2c00      	cmp	r4, #0
 800c238:	d1f7      	bne.n	800c22a <_fwalk_reent+0xe>
 800c23a:	4638      	mov	r0, r7
 800c23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c240:	89ab      	ldrh	r3, [r5, #12]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d907      	bls.n	800c256 <_fwalk_reent+0x3a>
 800c246:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c24a:	3301      	adds	r3, #1
 800c24c:	d003      	beq.n	800c256 <_fwalk_reent+0x3a>
 800c24e:	4629      	mov	r1, r5
 800c250:	4630      	mov	r0, r6
 800c252:	47c0      	blx	r8
 800c254:	4307      	orrs	r7, r0
 800c256:	3568      	adds	r5, #104	; 0x68
 800c258:	e7e9      	b.n	800c22e <_fwalk_reent+0x12>

0800c25a <__swhatbuf_r>:
 800c25a:	b570      	push	{r4, r5, r6, lr}
 800c25c:	460e      	mov	r6, r1
 800c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c262:	2900      	cmp	r1, #0
 800c264:	b096      	sub	sp, #88	; 0x58
 800c266:	4614      	mov	r4, r2
 800c268:	461d      	mov	r5, r3
 800c26a:	da08      	bge.n	800c27e <__swhatbuf_r+0x24>
 800c26c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	602a      	str	r2, [r5, #0]
 800c274:	061a      	lsls	r2, r3, #24
 800c276:	d410      	bmi.n	800c29a <__swhatbuf_r+0x40>
 800c278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c27c:	e00e      	b.n	800c29c <__swhatbuf_r+0x42>
 800c27e:	466a      	mov	r2, sp
 800c280:	f000 f902 	bl	800c488 <_fstat_r>
 800c284:	2800      	cmp	r0, #0
 800c286:	dbf1      	blt.n	800c26c <__swhatbuf_r+0x12>
 800c288:	9a01      	ldr	r2, [sp, #4]
 800c28a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c28e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c292:	425a      	negs	r2, r3
 800c294:	415a      	adcs	r2, r3
 800c296:	602a      	str	r2, [r5, #0]
 800c298:	e7ee      	b.n	800c278 <__swhatbuf_r+0x1e>
 800c29a:	2340      	movs	r3, #64	; 0x40
 800c29c:	2000      	movs	r0, #0
 800c29e:	6023      	str	r3, [r4, #0]
 800c2a0:	b016      	add	sp, #88	; 0x58
 800c2a2:	bd70      	pop	{r4, r5, r6, pc}

0800c2a4 <__smakebuf_r>:
 800c2a4:	898b      	ldrh	r3, [r1, #12]
 800c2a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2a8:	079d      	lsls	r5, r3, #30
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	460c      	mov	r4, r1
 800c2ae:	d507      	bpl.n	800c2c0 <__smakebuf_r+0x1c>
 800c2b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	6123      	str	r3, [r4, #16]
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	6163      	str	r3, [r4, #20]
 800c2bc:	b002      	add	sp, #8
 800c2be:	bd70      	pop	{r4, r5, r6, pc}
 800c2c0:	ab01      	add	r3, sp, #4
 800c2c2:	466a      	mov	r2, sp
 800c2c4:	f7ff ffc9 	bl	800c25a <__swhatbuf_r>
 800c2c8:	9900      	ldr	r1, [sp, #0]
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7fd fac1 	bl	8009854 <_malloc_r>
 800c2d2:	b948      	cbnz	r0, 800c2e8 <__smakebuf_r+0x44>
 800c2d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d8:	059a      	lsls	r2, r3, #22
 800c2da:	d4ef      	bmi.n	800c2bc <__smakebuf_r+0x18>
 800c2dc:	f023 0303 	bic.w	r3, r3, #3
 800c2e0:	f043 0302 	orr.w	r3, r3, #2
 800c2e4:	81a3      	strh	r3, [r4, #12]
 800c2e6:	e7e3      	b.n	800c2b0 <__smakebuf_r+0xc>
 800c2e8:	4b0d      	ldr	r3, [pc, #52]	; (800c320 <__smakebuf_r+0x7c>)
 800c2ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	6020      	str	r0, [r4, #0]
 800c2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2f4:	81a3      	strh	r3, [r4, #12]
 800c2f6:	9b00      	ldr	r3, [sp, #0]
 800c2f8:	6163      	str	r3, [r4, #20]
 800c2fa:	9b01      	ldr	r3, [sp, #4]
 800c2fc:	6120      	str	r0, [r4, #16]
 800c2fe:	b15b      	cbz	r3, 800c318 <__smakebuf_r+0x74>
 800c300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c304:	4630      	mov	r0, r6
 800c306:	f000 f8d1 	bl	800c4ac <_isatty_r>
 800c30a:	b128      	cbz	r0, 800c318 <__smakebuf_r+0x74>
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	f023 0303 	bic.w	r3, r3, #3
 800c312:	f043 0301 	orr.w	r3, r3, #1
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	89a0      	ldrh	r0, [r4, #12]
 800c31a:	4305      	orrs	r5, r0
 800c31c:	81a5      	strh	r5, [r4, #12]
 800c31e:	e7cd      	b.n	800c2bc <__smakebuf_r+0x18>
 800c320:	0800c0b9 	.word	0x0800c0b9

0800c324 <_malloc_usable_size_r>:
 800c324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c328:	1f18      	subs	r0, r3, #4
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	bfbc      	itt	lt
 800c32e:	580b      	ldrlt	r3, [r1, r0]
 800c330:	18c0      	addlt	r0, r0, r3
 800c332:	4770      	bx	lr

0800c334 <_raise_r>:
 800c334:	291f      	cmp	r1, #31
 800c336:	b538      	push	{r3, r4, r5, lr}
 800c338:	4604      	mov	r4, r0
 800c33a:	460d      	mov	r5, r1
 800c33c:	d904      	bls.n	800c348 <_raise_r+0x14>
 800c33e:	2316      	movs	r3, #22
 800c340:	6003      	str	r3, [r0, #0]
 800c342:	f04f 30ff 	mov.w	r0, #4294967295
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c34a:	b112      	cbz	r2, 800c352 <_raise_r+0x1e>
 800c34c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c350:	b94b      	cbnz	r3, 800c366 <_raise_r+0x32>
 800c352:	4620      	mov	r0, r4
 800c354:	f000 f830 	bl	800c3b8 <_getpid_r>
 800c358:	462a      	mov	r2, r5
 800c35a:	4601      	mov	r1, r0
 800c35c:	4620      	mov	r0, r4
 800c35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c362:	f000 b817 	b.w	800c394 <_kill_r>
 800c366:	2b01      	cmp	r3, #1
 800c368:	d00a      	beq.n	800c380 <_raise_r+0x4c>
 800c36a:	1c59      	adds	r1, r3, #1
 800c36c:	d103      	bne.n	800c376 <_raise_r+0x42>
 800c36e:	2316      	movs	r3, #22
 800c370:	6003      	str	r3, [r0, #0]
 800c372:	2001      	movs	r0, #1
 800c374:	e7e7      	b.n	800c346 <_raise_r+0x12>
 800c376:	2400      	movs	r4, #0
 800c378:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c37c:	4628      	mov	r0, r5
 800c37e:	4798      	blx	r3
 800c380:	2000      	movs	r0, #0
 800c382:	e7e0      	b.n	800c346 <_raise_r+0x12>

0800c384 <raise>:
 800c384:	4b02      	ldr	r3, [pc, #8]	; (800c390 <raise+0xc>)
 800c386:	4601      	mov	r1, r0
 800c388:	6818      	ldr	r0, [r3, #0]
 800c38a:	f7ff bfd3 	b.w	800c334 <_raise_r>
 800c38e:	bf00      	nop
 800c390:	20000024 	.word	0x20000024

0800c394 <_kill_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4d07      	ldr	r5, [pc, #28]	; (800c3b4 <_kill_r+0x20>)
 800c398:	2300      	movs	r3, #0
 800c39a:	4604      	mov	r4, r0
 800c39c:	4608      	mov	r0, r1
 800c39e:	4611      	mov	r1, r2
 800c3a0:	602b      	str	r3, [r5, #0]
 800c3a2:	f7f7 f81f 	bl	80033e4 <_kill>
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	d102      	bne.n	800c3b0 <_kill_r+0x1c>
 800c3aa:	682b      	ldr	r3, [r5, #0]
 800c3ac:	b103      	cbz	r3, 800c3b0 <_kill_r+0x1c>
 800c3ae:	6023      	str	r3, [r4, #0]
 800c3b0:	bd38      	pop	{r3, r4, r5, pc}
 800c3b2:	bf00      	nop
 800c3b4:	20000930 	.word	0x20000930

0800c3b8 <_getpid_r>:
 800c3b8:	f7f7 b80c 	b.w	80033d4 <_getpid>

0800c3bc <__sread>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	460c      	mov	r4, r1
 800c3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c4:	f000 f894 	bl	800c4f0 <_read_r>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	bfab      	itete	ge
 800c3cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c3d0:	181b      	addge	r3, r3, r0
 800c3d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3d6:	bfac      	ite	ge
 800c3d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3da:	81a3      	strhlt	r3, [r4, #12]
 800c3dc:	bd10      	pop	{r4, pc}

0800c3de <__swrite>:
 800c3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e2:	461f      	mov	r7, r3
 800c3e4:	898b      	ldrh	r3, [r1, #12]
 800c3e6:	05db      	lsls	r3, r3, #23
 800c3e8:	4605      	mov	r5, r0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	4616      	mov	r6, r2
 800c3ee:	d505      	bpl.n	800c3fc <__swrite+0x1e>
 800c3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f000 f868 	bl	800c4cc <_lseek_r>
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c406:	81a3      	strh	r3, [r4, #12]
 800c408:	4632      	mov	r2, r6
 800c40a:	463b      	mov	r3, r7
 800c40c:	4628      	mov	r0, r5
 800c40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c412:	f000 b817 	b.w	800c444 <_write_r>

0800c416 <__sseek>:
 800c416:	b510      	push	{r4, lr}
 800c418:	460c      	mov	r4, r1
 800c41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41e:	f000 f855 	bl	800c4cc <_lseek_r>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	bf15      	itete	ne
 800c428:	6560      	strne	r0, [r4, #84]	; 0x54
 800c42a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c42e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c432:	81a3      	strheq	r3, [r4, #12]
 800c434:	bf18      	it	ne
 800c436:	81a3      	strhne	r3, [r4, #12]
 800c438:	bd10      	pop	{r4, pc}

0800c43a <__sclose>:
 800c43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c43e:	f000 b813 	b.w	800c468 <_close_r>
	...

0800c444 <_write_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d07      	ldr	r5, [pc, #28]	; (800c464 <_write_r+0x20>)
 800c448:	4604      	mov	r4, r0
 800c44a:	4608      	mov	r0, r1
 800c44c:	4611      	mov	r1, r2
 800c44e:	2200      	movs	r2, #0
 800c450:	602a      	str	r2, [r5, #0]
 800c452:	461a      	mov	r2, r3
 800c454:	f7f6 fffd 	bl	8003452 <_write>
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	d102      	bne.n	800c462 <_write_r+0x1e>
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	b103      	cbz	r3, 800c462 <_write_r+0x1e>
 800c460:	6023      	str	r3, [r4, #0]
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	20000930 	.word	0x20000930

0800c468 <_close_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4d06      	ldr	r5, [pc, #24]	; (800c484 <_close_r+0x1c>)
 800c46c:	2300      	movs	r3, #0
 800c46e:	4604      	mov	r4, r0
 800c470:	4608      	mov	r0, r1
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	f7f7 f809 	bl	800348a <_close>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_close_r+0x1a>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_close_r+0x1a>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	20000930 	.word	0x20000930

0800c488 <_fstat_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	4d07      	ldr	r5, [pc, #28]	; (800c4a8 <_fstat_r+0x20>)
 800c48c:	2300      	movs	r3, #0
 800c48e:	4604      	mov	r4, r0
 800c490:	4608      	mov	r0, r1
 800c492:	4611      	mov	r1, r2
 800c494:	602b      	str	r3, [r5, #0]
 800c496:	f7f7 f804 	bl	80034a2 <_fstat>
 800c49a:	1c43      	adds	r3, r0, #1
 800c49c:	d102      	bne.n	800c4a4 <_fstat_r+0x1c>
 800c49e:	682b      	ldr	r3, [r5, #0]
 800c4a0:	b103      	cbz	r3, 800c4a4 <_fstat_r+0x1c>
 800c4a2:	6023      	str	r3, [r4, #0]
 800c4a4:	bd38      	pop	{r3, r4, r5, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20000930 	.word	0x20000930

0800c4ac <_isatty_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4d06      	ldr	r5, [pc, #24]	; (800c4c8 <_isatty_r+0x1c>)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	602b      	str	r3, [r5, #0]
 800c4b8:	f7f7 f803 	bl	80034c2 <_isatty>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_isatty_r+0x1a>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_isatty_r+0x1a>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	20000930 	.word	0x20000930

0800c4cc <_lseek_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d07      	ldr	r5, [pc, #28]	; (800c4ec <_lseek_r+0x20>)
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	602a      	str	r2, [r5, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f7f6 fffc 	bl	80034d8 <_lseek>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d102      	bne.n	800c4ea <_lseek_r+0x1e>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	b103      	cbz	r3, 800c4ea <_lseek_r+0x1e>
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	20000930 	.word	0x20000930

0800c4f0 <_read_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4d07      	ldr	r5, [pc, #28]	; (800c510 <_read_r+0x20>)
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	4608      	mov	r0, r1
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	602a      	str	r2, [r5, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	f7f6 ff8a 	bl	8003418 <_read>
 800c504:	1c43      	adds	r3, r0, #1
 800c506:	d102      	bne.n	800c50e <_read_r+0x1e>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	b103      	cbz	r3, 800c50e <_read_r+0x1e>
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	bd38      	pop	{r3, r4, r5, pc}
 800c510:	20000930 	.word	0x20000930
 800c514:	00000000 	.word	0x00000000

0800c518 <log>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	ed2d 8b02 	vpush	{d8}
 800c51e:	ec55 4b10 	vmov	r4, r5, d0
 800c522:	f000 f839 	bl	800c598 <__ieee754_log>
 800c526:	4622      	mov	r2, r4
 800c528:	462b      	mov	r3, r5
 800c52a:	4620      	mov	r0, r4
 800c52c:	4629      	mov	r1, r5
 800c52e:	eeb0 8a40 	vmov.f32	s16, s0
 800c532:	eef0 8a60 	vmov.f32	s17, s1
 800c536:	f7f4 fb01 	bl	8000b3c <__aeabi_dcmpun>
 800c53a:	b998      	cbnz	r0, 800c564 <log+0x4c>
 800c53c:	2200      	movs	r2, #0
 800c53e:	2300      	movs	r3, #0
 800c540:	4620      	mov	r0, r4
 800c542:	4629      	mov	r1, r5
 800c544:	f7f4 faf0 	bl	8000b28 <__aeabi_dcmpgt>
 800c548:	b960      	cbnz	r0, 800c564 <log+0x4c>
 800c54a:	2200      	movs	r2, #0
 800c54c:	2300      	movs	r3, #0
 800c54e:	4620      	mov	r0, r4
 800c550:	4629      	mov	r1, r5
 800c552:	f7f4 fac1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c556:	b160      	cbz	r0, 800c572 <log+0x5a>
 800c558:	f7fd f8c0 	bl	80096dc <__errno>
 800c55c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800c588 <log+0x70>
 800c560:	2322      	movs	r3, #34	; 0x22
 800c562:	6003      	str	r3, [r0, #0]
 800c564:	eeb0 0a48 	vmov.f32	s0, s16
 800c568:	eef0 0a68 	vmov.f32	s1, s17
 800c56c:	ecbd 8b02 	vpop	{d8}
 800c570:	bd38      	pop	{r3, r4, r5, pc}
 800c572:	f7fd f8b3 	bl	80096dc <__errno>
 800c576:	ecbd 8b02 	vpop	{d8}
 800c57a:	2321      	movs	r3, #33	; 0x21
 800c57c:	6003      	str	r3, [r0, #0]
 800c57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c582:	4803      	ldr	r0, [pc, #12]	; (800c590 <log+0x78>)
 800c584:	f000 b9c4 	b.w	800c910 <nan>
 800c588:	00000000 	.word	0x00000000
 800c58c:	fff00000 	.word	0xfff00000
 800c590:	0800d560 	.word	0x0800d560
 800c594:	00000000 	.word	0x00000000

0800c598 <__ieee754_log>:
 800c598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	ec51 0b10 	vmov	r0, r1, d0
 800c5a0:	ed2d 8b04 	vpush	{d8-d9}
 800c5a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c5a8:	b083      	sub	sp, #12
 800c5aa:	460d      	mov	r5, r1
 800c5ac:	da29      	bge.n	800c602 <__ieee754_log+0x6a>
 800c5ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5b2:	4303      	orrs	r3, r0
 800c5b4:	ee10 2a10 	vmov	r2, s0
 800c5b8:	d10c      	bne.n	800c5d4 <__ieee754_log+0x3c>
 800c5ba:	49cf      	ldr	r1, [pc, #828]	; (800c8f8 <__ieee754_log+0x360>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	2300      	movs	r3, #0
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	f7f4 f94b 	bl	800085c <__aeabi_ddiv>
 800c5c6:	ec41 0b10 	vmov	d0, r0, r1
 800c5ca:	b003      	add	sp, #12
 800c5cc:	ecbd 8b04 	vpop	{d8-d9}
 800c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	da05      	bge.n	800c5e4 <__ieee754_log+0x4c>
 800c5d8:	460b      	mov	r3, r1
 800c5da:	f7f3 fe5d 	bl	8000298 <__aeabi_dsub>
 800c5de:	2200      	movs	r2, #0
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	e7ee      	b.n	800c5c2 <__ieee754_log+0x2a>
 800c5e4:	4bc5      	ldr	r3, [pc, #788]	; (800c8fc <__ieee754_log+0x364>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f7f4 f80e 	bl	8000608 <__aeabi_dmul>
 800c5ec:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c5f0:	460d      	mov	r5, r1
 800c5f2:	4ac3      	ldr	r2, [pc, #780]	; (800c900 <__ieee754_log+0x368>)
 800c5f4:	4295      	cmp	r5, r2
 800c5f6:	dd06      	ble.n	800c606 <__ieee754_log+0x6e>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	f7f3 fe4e 	bl	800029c <__adddf3>
 800c600:	e7e1      	b.n	800c5c6 <__ieee754_log+0x2e>
 800c602:	2300      	movs	r3, #0
 800c604:	e7f5      	b.n	800c5f2 <__ieee754_log+0x5a>
 800c606:	152c      	asrs	r4, r5, #20
 800c608:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c60c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c610:	441c      	add	r4, r3
 800c612:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c616:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c61a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c61e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c622:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c626:	ea42 0105 	orr.w	r1, r2, r5
 800c62a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c62e:	2200      	movs	r2, #0
 800c630:	4bb4      	ldr	r3, [pc, #720]	; (800c904 <__ieee754_log+0x36c>)
 800c632:	f7f3 fe31 	bl	8000298 <__aeabi_dsub>
 800c636:	1cab      	adds	r3, r5, #2
 800c638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	4682      	mov	sl, r0
 800c640:	468b      	mov	fp, r1
 800c642:	f04f 0200 	mov.w	r2, #0
 800c646:	dc53      	bgt.n	800c6f0 <__ieee754_log+0x158>
 800c648:	2300      	movs	r3, #0
 800c64a:	f7f4 fa45 	bl	8000ad8 <__aeabi_dcmpeq>
 800c64e:	b1d0      	cbz	r0, 800c686 <__ieee754_log+0xee>
 800c650:	2c00      	cmp	r4, #0
 800c652:	f000 8122 	beq.w	800c89a <__ieee754_log+0x302>
 800c656:	4620      	mov	r0, r4
 800c658:	f7f3 ff6c 	bl	8000534 <__aeabi_i2d>
 800c65c:	a390      	add	r3, pc, #576	; (adr r3, 800c8a0 <__ieee754_log+0x308>)
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	4606      	mov	r6, r0
 800c664:	460f      	mov	r7, r1
 800c666:	f7f3 ffcf 	bl	8000608 <__aeabi_dmul>
 800c66a:	a38f      	add	r3, pc, #572	; (adr r3, 800c8a8 <__ieee754_log+0x310>)
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	4604      	mov	r4, r0
 800c672:	460d      	mov	r5, r1
 800c674:	4630      	mov	r0, r6
 800c676:	4639      	mov	r1, r7
 800c678:	f7f3 ffc6 	bl	8000608 <__aeabi_dmul>
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	4620      	mov	r0, r4
 800c682:	4629      	mov	r1, r5
 800c684:	e7ba      	b.n	800c5fc <__ieee754_log+0x64>
 800c686:	a38a      	add	r3, pc, #552	; (adr r3, 800c8b0 <__ieee754_log+0x318>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	4650      	mov	r0, sl
 800c68e:	4659      	mov	r1, fp
 800c690:	f7f3 ffba 	bl	8000608 <__aeabi_dmul>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	2000      	movs	r0, #0
 800c69a:	499b      	ldr	r1, [pc, #620]	; (800c908 <__ieee754_log+0x370>)
 800c69c:	f7f3 fdfc 	bl	8000298 <__aeabi_dsub>
 800c6a0:	4652      	mov	r2, sl
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460f      	mov	r7, r1
 800c6a6:	465b      	mov	r3, fp
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	4659      	mov	r1, fp
 800c6ac:	f7f3 ffac 	bl	8000608 <__aeabi_dmul>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	f7f3 ffa6 	bl	8000608 <__aeabi_dmul>
 800c6bc:	4606      	mov	r6, r0
 800c6be:	460f      	mov	r7, r1
 800c6c0:	b914      	cbnz	r4, 800c6c8 <__ieee754_log+0x130>
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	e0a2      	b.n	800c80e <__ieee754_log+0x276>
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f7f3 ff33 	bl	8000534 <__aeabi_i2d>
 800c6ce:	a374      	add	r3, pc, #464	; (adr r3, 800c8a0 <__ieee754_log+0x308>)
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	4680      	mov	r8, r0
 800c6d6:	4689      	mov	r9, r1
 800c6d8:	f7f3 ff96 	bl	8000608 <__aeabi_dmul>
 800c6dc:	a372      	add	r3, pc, #456	; (adr r3, 800c8a8 <__ieee754_log+0x310>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	460d      	mov	r5, r1
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	f7f3 ff8d 	bl	8000608 <__aeabi_dmul>
 800c6ee:	e0a7      	b.n	800c840 <__ieee754_log+0x2a8>
 800c6f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6f4:	f7f3 fdd2 	bl	800029c <__adddf3>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	4650      	mov	r0, sl
 800c6fe:	4659      	mov	r1, fp
 800c700:	f7f4 f8ac 	bl	800085c <__aeabi_ddiv>
 800c704:	ec41 0b18 	vmov	d8, r0, r1
 800c708:	4620      	mov	r0, r4
 800c70a:	f7f3 ff13 	bl	8000534 <__aeabi_i2d>
 800c70e:	ec53 2b18 	vmov	r2, r3, d8
 800c712:	ec41 0b19 	vmov	d9, r0, r1
 800c716:	ec51 0b18 	vmov	r0, r1, d8
 800c71a:	f7f3 ff75 	bl	8000608 <__aeabi_dmul>
 800c71e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c722:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	4680      	mov	r8, r0
 800c72e:	4689      	mov	r9, r1
 800c730:	f7f3 ff6a 	bl	8000608 <__aeabi_dmul>
 800c734:	a360      	add	r3, pc, #384	; (adr r3, 800c8b8 <__ieee754_log+0x320>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	4606      	mov	r6, r0
 800c73c:	460f      	mov	r7, r1
 800c73e:	f7f3 ff63 	bl	8000608 <__aeabi_dmul>
 800c742:	a35f      	add	r3, pc, #380	; (adr r3, 800c8c0 <__ieee754_log+0x328>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fda8 	bl	800029c <__adddf3>
 800c74c:	4632      	mov	r2, r6
 800c74e:	463b      	mov	r3, r7
 800c750:	f7f3 ff5a 	bl	8000608 <__aeabi_dmul>
 800c754:	a35c      	add	r3, pc, #368	; (adr r3, 800c8c8 <__ieee754_log+0x330>)
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f7f3 fd9f 	bl	800029c <__adddf3>
 800c75e:	4632      	mov	r2, r6
 800c760:	463b      	mov	r3, r7
 800c762:	f7f3 ff51 	bl	8000608 <__aeabi_dmul>
 800c766:	a35a      	add	r3, pc, #360	; (adr r3, 800c8d0 <__ieee754_log+0x338>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 fd96 	bl	800029c <__adddf3>
 800c770:	4642      	mov	r2, r8
 800c772:	464b      	mov	r3, r9
 800c774:	f7f3 ff48 	bl	8000608 <__aeabi_dmul>
 800c778:	a357      	add	r3, pc, #348	; (adr r3, 800c8d8 <__ieee754_log+0x340>)
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	4680      	mov	r8, r0
 800c780:	4689      	mov	r9, r1
 800c782:	4630      	mov	r0, r6
 800c784:	4639      	mov	r1, r7
 800c786:	f7f3 ff3f 	bl	8000608 <__aeabi_dmul>
 800c78a:	a355      	add	r3, pc, #340	; (adr r3, 800c8e0 <__ieee754_log+0x348>)
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	f7f3 fd84 	bl	800029c <__adddf3>
 800c794:	4632      	mov	r2, r6
 800c796:	463b      	mov	r3, r7
 800c798:	f7f3 ff36 	bl	8000608 <__aeabi_dmul>
 800c79c:	a352      	add	r3, pc, #328	; (adr r3, 800c8e8 <__ieee754_log+0x350>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f7f3 fd7b 	bl	800029c <__adddf3>
 800c7a6:	4632      	mov	r2, r6
 800c7a8:	463b      	mov	r3, r7
 800c7aa:	f7f3 ff2d 	bl	8000608 <__aeabi_dmul>
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	f7f3 fd71 	bl	800029c <__adddf3>
 800c7ba:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	3551      	adds	r5, #81	; 0x51
 800c7c2:	431d      	orrs	r5, r3
 800c7c4:	2d00      	cmp	r5, #0
 800c7c6:	4680      	mov	r8, r0
 800c7c8:	4689      	mov	r9, r1
 800c7ca:	dd48      	ble.n	800c85e <__ieee754_log+0x2c6>
 800c7cc:	4b4e      	ldr	r3, [pc, #312]	; (800c908 <__ieee754_log+0x370>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	4650      	mov	r0, sl
 800c7d2:	4659      	mov	r1, fp
 800c7d4:	f7f3 ff18 	bl	8000608 <__aeabi_dmul>
 800c7d8:	4652      	mov	r2, sl
 800c7da:	465b      	mov	r3, fp
 800c7dc:	f7f3 ff14 	bl	8000608 <__aeabi_dmul>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	460f      	mov	r7, r1
 800c7e8:	4640      	mov	r0, r8
 800c7ea:	4649      	mov	r1, r9
 800c7ec:	f7f3 fd56 	bl	800029c <__adddf3>
 800c7f0:	ec53 2b18 	vmov	r2, r3, d8
 800c7f4:	f7f3 ff08 	bl	8000608 <__aeabi_dmul>
 800c7f8:	4680      	mov	r8, r0
 800c7fa:	4689      	mov	r9, r1
 800c7fc:	b964      	cbnz	r4, 800c818 <__ieee754_log+0x280>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4630      	mov	r0, r6
 800c804:	4639      	mov	r1, r7
 800c806:	f7f3 fd47 	bl	8000298 <__aeabi_dsub>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4650      	mov	r0, sl
 800c810:	4659      	mov	r1, fp
 800c812:	f7f3 fd41 	bl	8000298 <__aeabi_dsub>
 800c816:	e6d6      	b.n	800c5c6 <__ieee754_log+0x2e>
 800c818:	a321      	add	r3, pc, #132	; (adr r3, 800c8a0 <__ieee754_log+0x308>)
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	ec51 0b19 	vmov	r0, r1, d9
 800c822:	f7f3 fef1 	bl	8000608 <__aeabi_dmul>
 800c826:	a320      	add	r3, pc, #128	; (adr r3, 800c8a8 <__ieee754_log+0x310>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	4604      	mov	r4, r0
 800c82e:	460d      	mov	r5, r1
 800c830:	ec51 0b19 	vmov	r0, r1, d9
 800c834:	f7f3 fee8 	bl	8000608 <__aeabi_dmul>
 800c838:	4642      	mov	r2, r8
 800c83a:	464b      	mov	r3, r9
 800c83c:	f7f3 fd2e 	bl	800029c <__adddf3>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	4630      	mov	r0, r6
 800c846:	4639      	mov	r1, r7
 800c848:	f7f3 fd26 	bl	8000298 <__aeabi_dsub>
 800c84c:	4652      	mov	r2, sl
 800c84e:	465b      	mov	r3, fp
 800c850:	f7f3 fd22 	bl	8000298 <__aeabi_dsub>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4620      	mov	r0, r4
 800c85a:	4629      	mov	r1, r5
 800c85c:	e7d9      	b.n	800c812 <__ieee754_log+0x27a>
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	4650      	mov	r0, sl
 800c864:	4659      	mov	r1, fp
 800c866:	f7f3 fd17 	bl	8000298 <__aeabi_dsub>
 800c86a:	ec53 2b18 	vmov	r2, r3, d8
 800c86e:	f7f3 fecb 	bl	8000608 <__aeabi_dmul>
 800c872:	4606      	mov	r6, r0
 800c874:	460f      	mov	r7, r1
 800c876:	2c00      	cmp	r4, #0
 800c878:	f43f af23 	beq.w	800c6c2 <__ieee754_log+0x12a>
 800c87c:	a308      	add	r3, pc, #32	; (adr r3, 800c8a0 <__ieee754_log+0x308>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	ec51 0b19 	vmov	r0, r1, d9
 800c886:	f7f3 febf 	bl	8000608 <__aeabi_dmul>
 800c88a:	a307      	add	r3, pc, #28	; (adr r3, 800c8a8 <__ieee754_log+0x310>)
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	4604      	mov	r4, r0
 800c892:	460d      	mov	r5, r1
 800c894:	ec51 0b19 	vmov	r0, r1, d9
 800c898:	e727      	b.n	800c6ea <__ieee754_log+0x152>
 800c89a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c8f0 <__ieee754_log+0x358>
 800c89e:	e694      	b.n	800c5ca <__ieee754_log+0x32>
 800c8a0:	fee00000 	.word	0xfee00000
 800c8a4:	3fe62e42 	.word	0x3fe62e42
 800c8a8:	35793c76 	.word	0x35793c76
 800c8ac:	3dea39ef 	.word	0x3dea39ef
 800c8b0:	55555555 	.word	0x55555555
 800c8b4:	3fd55555 	.word	0x3fd55555
 800c8b8:	df3e5244 	.word	0xdf3e5244
 800c8bc:	3fc2f112 	.word	0x3fc2f112
 800c8c0:	96cb03de 	.word	0x96cb03de
 800c8c4:	3fc74664 	.word	0x3fc74664
 800c8c8:	94229359 	.word	0x94229359
 800c8cc:	3fd24924 	.word	0x3fd24924
 800c8d0:	55555593 	.word	0x55555593
 800c8d4:	3fe55555 	.word	0x3fe55555
 800c8d8:	d078c69f 	.word	0xd078c69f
 800c8dc:	3fc39a09 	.word	0x3fc39a09
 800c8e0:	1d8e78af 	.word	0x1d8e78af
 800c8e4:	3fcc71c5 	.word	0x3fcc71c5
 800c8e8:	9997fa04 	.word	0x9997fa04
 800c8ec:	3fd99999 	.word	0x3fd99999
	...
 800c8f8:	c3500000 	.word	0xc3500000
 800c8fc:	43500000 	.word	0x43500000
 800c900:	7fefffff 	.word	0x7fefffff
 800c904:	3ff00000 	.word	0x3ff00000
 800c908:	3fe00000 	.word	0x3fe00000
 800c90c:	00000000 	.word	0x00000000

0800c910 <nan>:
 800c910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c918 <nan+0x8>
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	00000000 	.word	0x00000000
 800c91c:	7ff80000 	.word	0x7ff80000

0800c920 <_init>:
 800c920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c922:	bf00      	nop
 800c924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c926:	bc08      	pop	{r3}
 800c928:	469e      	mov	lr, r3
 800c92a:	4770      	bx	lr

0800c92c <_fini>:
 800c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92e:	bf00      	nop
 800c930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c932:	bc08      	pop	{r3}
 800c934:	469e      	mov	lr, r3
 800c936:	4770      	bx	lr
